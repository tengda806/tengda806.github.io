<?xml version="1.0" encoding="utf-8"?>
<search> 
  
  
    
    <entry>
      <title>正则实战</title>
      <link href="/2020/04/12/regexp/"/>
      <url>/2020/04/12/regexp/</url>
      
        <content type="html"><![CDATA[<blockquote><p>可视化: <a href="https://regexper.com/" target="_blank" rel="noopener">https://regexper.com/</a></p></blockquote><h3 id="字符匹配"><a href="#字符匹配" class="headerlink" title="字符匹配"></a>字符匹配</h3><h5 id="模糊匹配"><a href="#模糊匹配" class="headerlink" title="模糊匹配"></a>模糊匹配</h5><blockquote><ol><li>横向模糊匹配: 一个正则可匹配的字符串的长度不是固定的，可以是多种情况的。</li><li>纵向模糊匹配: 一个正则匹配的字符串，具体到某一位字符时，它可以不是某个确定的字符，可以有多种可能。</li></ol></blockquote><pre class=" language-javascript"><code class="language-javascript"><span class="token comment" spellcheck="true">// 横向</span><span class="token keyword">var</span> regex <span class="token operator">=</span> <span class="token regex">/ab{2,5}c/g</span><span class="token punctuation">;</span><span class="token keyword">var</span> string <span class="token operator">=</span> <span class="token string">"abc abbc abbbc abbbbc abbbbbc abbbbbbc"</span><span class="token punctuation">;</span>console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span> string<span class="token punctuation">.</span><span class="token function">match</span><span class="token punctuation">(</span>regex<span class="token punctuation">)</span> <span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment" spellcheck="true">// => ["abbc", "abbbc", "abbbbc", "abbbbbc"]</span><span class="token comment" spellcheck="true">// 纵向</span><span class="token keyword">var</span> regex <span class="token operator">=</span> <span class="token regex">/a[123]b/g</span><span class="token punctuation">;</span><span class="token keyword">var</span> string <span class="token operator">=</span> <span class="token string">"a0b a1b a2b a3b a4b"</span><span class="token punctuation">;</span>console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span> string<span class="token punctuation">.</span><span class="token function">match</span><span class="token punctuation">(</span>regex<span class="token punctuation">)</span> <span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment" spellcheck="true">// => ["a1b", "a2b", "a3b"]</span></code></pre><h5 id="字符组"><a href="#字符组" class="headerlink" title="字符组"></a>字符组</h5><blockquote><ol><li>范围表示</li><li>排除字符组</li><li>简写<br>\d就是[0-9]。表示是一位数字。记忆方式：其英文是digit（数字）。<br>\D就是[^0-9]。表示除数字外的任意字符。<br>\w就是[0-9a-zA-Z_]。表示数字、大小写字母和下划线。记忆方式：w是word的简写，也称单词字符。<br>\W是[^0-9a-zA-Z_]。非单词字符。<br>\s是[ \t\v\n\r\f]。表示空白符，包括空格、水平制表符、垂直制表符、换行符、回车符、换页符。记忆方式：s是space character的首字母。<br>\S是[^ \t\v\n\r\f]。非空白符。<br>.就是[^\n\r\u2028\u2029]。通配符，表示几乎任意字符。换行符、回车符、行分隔符和段分隔符除外。记忆方式：想想省略号…中的每个点，都可以理解成占位符，表示任何类似的东西。</li></ol></blockquote><pre class=" language-javascript"><code class="language-javascript"><span class="token comment" spellcheck="true">// 范围</span><span class="token keyword">const</span> reg <span class="token operator">=</span> <span class="token regex">/[123456abcdefGHIJKLM]/</span><span class="token punctuation">;</span><span class="token comment" spellcheck="true">// 排除</span><span class="token keyword">const</span> reg <span class="token operator">=</span> <span class="token regex">/[^abc]/</span><span class="token punctuation">;</span><span class="token comment" spellcheck="true">// 简写</span><span class="token keyword">const</span> reg <span class="token operator">=</span> <span class="token regex">/\d\w\s./</span></code></pre><h5 id="量词"><a href="#量词" class="headerlink" title="量词"></a>量词</h5><ol><li>{m,n}</li></ol><ul><li>{m,} 表示至少出现m次。</li><li>{m} 等价于{m,m}，表示出现m次。</li><li>? 等价于{0,1}，表示出现或者不出现。记忆方式：问号的意思表示，有吗？</li><li><ul><li>等价于{1,}，表示出现至少一次。记忆方式：加号是追加的意思，得先有一个，然后才考虑追加。</li></ul></li><li><ul><li>等价于{0,}，表示出现任意次，有可能不出现。记忆方式：看看天上的星星，可能一颗没有，可能零散有几颗，可能数也数不过来。</li></ul></li></ul><ol start="2"><li>贪婪匹配和惰性匹配</li></ol><pre class=" language-javascript"><code class="language-javascript"><span class="token comment" spellcheck="true">// 贪婪模式</span><span class="token keyword">var</span> regex <span class="token operator">=</span> <span class="token regex">/\d{2,5}/g</span><span class="token punctuation">;</span><span class="token keyword">var</span> string <span class="token operator">=</span> <span class="token string">"123 1234 12345 123456"</span><span class="token punctuation">;</span>console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span> string<span class="token punctuation">.</span><span class="token function">match</span><span class="token punctuation">(</span>regex<span class="token punctuation">)</span> <span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment" spellcheck="true">// => ["123", "1234", "12345", "12345"]</span><span class="token comment" spellcheck="true">// 修改为惰性</span><span class="token keyword">var</span> regex <span class="token operator">=</span> <span class="token regex">/\d{2,5}?/g</span><span class="token punctuation">;</span><span class="token keyword">var</span> string <span class="token operator">=</span> <span class="token string">"123 1234 12345 123456"</span><span class="token punctuation">;</span>console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span> string<span class="token punctuation">.</span><span class="token function">match</span><span class="token punctuation">(</span>regex<span class="token punctuation">)</span> <span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment" spellcheck="true">// => ["12", "12", "34", "12", "34", "12", "34", "56"]</span></code></pre><h5 id="多选分支"><a href="#多选分支" class="headerlink" title="多选分支"></a>多选分支</h5><blockquote><p>分支结构也是惰性的，即当前面的匹配上了，后面的就不再尝试了。</p></blockquote><pre class=" language-javascript"><code class="language-javascript"><span class="token keyword">var</span> regex <span class="token operator">=</span> <span class="token regex">/good|nice/g</span><span class="token punctuation">;</span><span class="token keyword">var</span> string <span class="token operator">=</span> <span class="token string">"good idea, nice try."</span><span class="token punctuation">;</span>console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span> string<span class="token punctuation">.</span><span class="token function">match</span><span class="token punctuation">(</span>regex<span class="token punctuation">)</span> <span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment" spellcheck="true">// => ["good", "nice"]</span><span class="token keyword">var</span> regex <span class="token operator">=</span> <span class="token regex">/good|goodbye/g</span><span class="token punctuation">;</span><span class="token keyword">var</span> string <span class="token operator">=</span> <span class="token string">"goodbye"</span><span class="token punctuation">;</span>console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span> string<span class="token punctuation">.</span><span class="token function">match</span><span class="token punctuation">(</span>regex<span class="token punctuation">)</span> <span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment" spellcheck="true">// => ["good"]</span><span class="token keyword">var</span> regex <span class="token operator">=</span> <span class="token regex">/goodbye|good/g</span><span class="token punctuation">;</span><span class="token keyword">var</span> string <span class="token operator">=</span> <span class="token string">"goodbye"</span><span class="token punctuation">;</span>console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span> string<span class="token punctuation">.</span><span class="token function">match</span><span class="token punctuation">(</span>regex<span class="token punctuation">)</span> <span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment" spellcheck="true">// => ["goodbye"]</span></code></pre><h3 id="匹配位置"><a href="#匹配位置" class="headerlink" title="匹配位置"></a>匹配位置</h3><blockquote><p>(?=p)  匹配p前面位置</p></blockquote><blockquote><p>(?!p)  匹配非p前面的位置</p></blockquote><pre class=" language-javascript"><code class="language-javascript"><span class="token keyword">var</span> result <span class="token operator">=</span> <span class="token string">"hello"</span><span class="token punctuation">.</span><span class="token function">replace</span><span class="token punctuation">(</span><span class="token regex">/(?=l)/g</span><span class="token punctuation">,</span> <span class="token string">'#'</span><span class="token punctuation">)</span><span class="token punctuation">;</span>console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span>result<span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment" spellcheck="true">// => "he#l#lo"</span><span class="token keyword">var</span> result <span class="token operator">=</span> <span class="token string">"hello"</span><span class="token punctuation">.</span><span class="token function">replace</span><span class="token punctuation">(</span><span class="token regex">/(?!l)/g</span><span class="token punctuation">,</span> <span class="token string">'#'</span><span class="token punctuation">)</span><span class="token punctuation">;</span>console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span>result<span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment" spellcheck="true">// => "#h#ell#o#"</span><span class="token comment" spellcheck="true">// 匹配同时包含小写、大写、数字</span><span class="token comment" spellcheck="true">// 分解如下: </span><span class="token comment" spellcheck="true">// 1. 同时包含数字和小写字母</span><span class="token comment" spellcheck="true">// 2. 同时包含数字和大写字母</span><span class="token comment" spellcheck="true">// 3. 同时包含小写字母和大写字母</span><span class="token comment" spellcheck="true">// 4. 同时包含数字、小写字母和大写字母</span><span class="token keyword">var</span> reg <span class="token operator">=</span> <span class="token regex">/((?=.*[0-9])(?=.*[a-z])|(?=.*[0-9])(?=.*[A-Z])|(?=.*[a-z])(?=.*[A-Z]))^[0-9A-Za-z]{6,12}$/</span><span class="token punctuation">;</span>console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span> reg<span class="token punctuation">.</span><span class="token function">test</span><span class="token punctuation">(</span><span class="token string">"1234567"</span><span class="token punctuation">)</span> <span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment" spellcheck="true">// false 全是数字</span>console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span> reg<span class="token punctuation">.</span><span class="token function">test</span><span class="token punctuation">(</span><span class="token string">"abcdef"</span><span class="token punctuation">)</span> <span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment" spellcheck="true">// false 全是小写字母</span>console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span> reg<span class="token punctuation">.</span><span class="token function">test</span><span class="token punctuation">(</span><span class="token string">"ABCDEFGH"</span><span class="token punctuation">)</span> <span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment" spellcheck="true">// false 全是大写字母</span>console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span> reg<span class="token punctuation">.</span><span class="token function">test</span><span class="token punctuation">(</span><span class="token string">"ab23C"</span><span class="token punctuation">)</span> <span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment" spellcheck="true">// false 不足6位</span>console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span> reg<span class="token punctuation">.</span><span class="token function">test</span><span class="token punctuation">(</span><span class="token string">"ABCDEF234"</span><span class="token punctuation">)</span> <span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment" spellcheck="true">// true 大写字母和数字</span>console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span> reg<span class="token punctuation">.</span><span class="token function">test</span><span class="token punctuation">(</span><span class="token string">"abcdEF234"</span><span class="token punctuation">)</span> <span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment" spellcheck="true">// true</span><span class="token comment" spellcheck="true">// 另外一种解法: “至少包含两种字符”的意思就是说，不能全部都是数字，也不能全部都是小写字母，也不能全部都是大写字母。</span><span class="token keyword">var</span> reg <span class="token operator">=</span> <span class="token regex">/(?!^[0-9]{6,12}$)(?!^[a-z]{6,12}$)(?!^[A-Z]{6,12}$)^[0-9A-Za-z]{6,12}$/</span><span class="token punctuation">;</span>console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span> reg<span class="token punctuation">.</span><span class="token function">test</span><span class="token punctuation">(</span><span class="token string">"1234567"</span><span class="token punctuation">)</span> <span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment" spellcheck="true">// false 全是数字</span>console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span> reg<span class="token punctuation">.</span><span class="token function">test</span><span class="token punctuation">(</span><span class="token string">"abcdef"</span><span class="token punctuation">)</span> <span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment" spellcheck="true">// false 全是小写字母</span>console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span> reg<span class="token punctuation">.</span><span class="token function">test</span><span class="token punctuation">(</span><span class="token string">"ABCDEFGH"</span><span class="token punctuation">)</span> <span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment" spellcheck="true">// false 全是大写字母</span>console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span> reg<span class="token punctuation">.</span><span class="token function">test</span><span class="token punctuation">(</span><span class="token string">"ab23C"</span><span class="token punctuation">)</span> <span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment" spellcheck="true">// false 不足6位</span>console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span> reg<span class="token punctuation">.</span><span class="token function">test</span><span class="token punctuation">(</span><span class="token string">"ABCDEF234"</span><span class="token punctuation">)</span> <span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment" spellcheck="true">// true 大写字母和数字</span>console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span> reg<span class="token punctuation">.</span><span class="token function">test</span><span class="token punctuation">(</span><span class="token string">"abcdEF234"</span><span class="token punctuation">)</span> <span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment" spellcheck="true">// true</span></code></pre><blockquote><p>\b 单词边界</p></blockquote><ul><li>\w 与 \W 之间</li><li>\w 与 ^ 之间</li><li>\w 与 $ 之间</li></ul><blockquote><p>\B 非单词边界</p></blockquote><ul><li>\w 与 \w</li><li>\W 与 \W</li><li>\W 与 $</li><li>\W 与 ^</li></ul><pre class=" language-javascript"><code class="language-javascript"><span class="token keyword">var</span> result <span class="token operator">=</span> <span class="token string">"[JS] Lesson_01.mp4"</span><span class="token punctuation">.</span><span class="token function">replace</span><span class="token punctuation">(</span><span class="token regex">/\b/g</span><span class="token punctuation">,</span> <span class="token string">'#'</span><span class="token punctuation">)</span><span class="token punctuation">;</span>console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span>result<span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment" spellcheck="true">// => "[#JS#] #Lesson_01#.#mp4#"</span><span class="token keyword">var</span> result <span class="token operator">=</span> <span class="token string">"[JS] Lesson_01.mp4"</span><span class="token punctuation">.</span><span class="token function">replace</span><span class="token punctuation">(</span><span class="token regex">/\B/g</span><span class="token punctuation">,</span> <span class="token string">'#'</span><span class="token punctuation">)</span><span class="token punctuation">;</span>console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span>result<span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment" spellcheck="true">// => "#[J#S]# L#e#s#s#o#n#_#0#1.m#p#4"</span></code></pre><h5 id="位置特性"><a href="#位置特性" class="headerlink" title="位置特性"></a>位置特性</h5><blockquote><p>字符之间的位置，可以写成多个, 可理解为空字符串</p></blockquote><pre class=" language-javascript"><code class="language-javascript"><span class="token string">"hello"</span> <span class="token operator">==</span> <span class="token string">""</span> <span class="token operator">+</span> <span class="token string">"h"</span> <span class="token operator">+</span> <span class="token string">""</span> <span class="token operator">+</span> <span class="token string">"e"</span> <span class="token operator">+</span> <span class="token string">""</span> <span class="token operator">+</span> <span class="token string">"l"</span> <span class="token operator">+</span> <span class="token string">""</span> <span class="token operator">+</span> <span class="token string">"l"</span> <span class="token operator">+</span> <span class="token string">"o"</span> <span class="token operator">+</span> <span class="token string">""</span><span class="token punctuation">;</span><span class="token string">"hello"</span> <span class="token operator">==</span> <span class="token string">""</span> <span class="token operator">+</span> <span class="token string">""</span> <span class="token operator">+</span> <span class="token string">"hello"</span><span class="token keyword">var</span> result <span class="token operator">=</span> <span class="token regex">/^^hello?$/</span><span class="token punctuation">.</span><span class="token function">test</span><span class="token punctuation">(</span><span class="token string">"hello"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span>result<span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment" spellcheck="true">// => true</span></code></pre><h3 id="括号的作用"><a href="#括号的作用" class="headerlink" title="括号的作用"></a>括号的作用</h3><h5 id="分组"><a href="#分组" class="headerlink" title="分组"></a>分组</h5><pre class=" language-javascript"><code class="language-javascript"><span class="token comment" spellcheck="true">// 使量词 + 作用于整体</span><span class="token keyword">var</span> regex <span class="token operator">=</span> <span class="token regex">/(ab)+/g</span><span class="token punctuation">;</span><span class="token keyword">var</span> string <span class="token operator">=</span> <span class="token string">"ababa abbb ababab"</span><span class="token punctuation">;</span>console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span> string<span class="token punctuation">.</span><span class="token function">match</span><span class="token punctuation">(</span>regex<span class="token punctuation">)</span> <span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment" spellcheck="true">// => ["abab", "ab", "ababab"]</span><span class="token comment" spellcheck="true">// 支持子表达式</span><span class="token keyword">var</span> regex <span class="token operator">=</span> <span class="token regex">/^I love (JavaScript|Regular Expression)$/</span><span class="token punctuation">;</span>console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span> regex<span class="token punctuation">.</span><span class="token function">test</span><span class="token punctuation">(</span><span class="token string">"I love JavaScript"</span><span class="token punctuation">)</span> <span class="token punctuation">)</span><span class="token punctuation">;</span>console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span> regex<span class="token punctuation">.</span><span class="token function">test</span><span class="token punctuation">(</span><span class="token string">"I love Regular Expression"</span><span class="token punctuation">)</span> <span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token comment" spellcheck="true">// => true</span><span class="token comment" spellcheck="true">// => true</span></code></pre><h5 id="使用分组"><a href="#使用分组" class="headerlink" title="使用分组"></a>使用分组</h5><pre class=" language-javascript"><code class="language-javascript"><span class="token comment" spellcheck="true">// 提取数据</span><span class="token keyword">var</span> regex <span class="token operator">=</span> <span class="token regex">/(\d{4})-(\d{2})-(\d{2})/</span><span class="token punctuation">;</span><span class="token keyword">var</span> string <span class="token operator">=</span> <span class="token string">"2017-06-12"</span><span class="token punctuation">;</span>console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span> string<span class="token punctuation">.</span><span class="token function">match</span><span class="token punctuation">(</span>regex<span class="token punctuation">)</span> <span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment" spellcheck="true">// => ["2017-06-12", "2017", "06", "12", index: 0, input: "2017-06-12"]</span><span class="token comment" spellcheck="true">// 替换数据</span><span class="token keyword">var</span> regex <span class="token operator">=</span> <span class="token regex">/(\d{4})-(\d{2})-(\d{2})/</span><span class="token punctuation">;</span><span class="token keyword">var</span> string <span class="token operator">=</span> <span class="token string">"2017-06-12"</span><span class="token punctuation">;</span><span class="token keyword">var</span> result <span class="token operator">=</span> string<span class="token punctuation">.</span><span class="token function">replace</span><span class="token punctuation">(</span>regex<span class="token punctuation">,</span> <span class="token keyword">function</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>    <span class="token keyword">return</span> RegExp<span class="token punctuation">.</span>$<span class="token number">2</span> <span class="token operator">+</span> <span class="token string">"/"</span> <span class="token operator">+</span> RegExp<span class="token punctuation">.</span>$<span class="token number">3</span> <span class="token operator">+</span> <span class="token string">"/"</span> <span class="token operator">+</span> RegExp<span class="token punctuation">.</span>$<span class="token number">1</span><span class="token punctuation">;</span><span class="token punctuation">}</span><span class="token punctuation">)</span><span class="token punctuation">;</span>console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span>result<span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment" spellcheck="true">// => "06/12/2017"</span><span class="token comment" spellcheck="true">// 反向引用</span><span class="token keyword">var</span> regex <span class="token operator">=</span> <span class="token regex">/\d{4}(-|\/|\.)\d{2}(-|\/|\.)\d{2}/</span><span class="token punctuation">;</span><span class="token keyword">var</span> string1 <span class="token operator">=</span> <span class="token string">"2017-06-12"</span><span class="token punctuation">;</span><span class="token keyword">var</span> string2 <span class="token operator">=</span> <span class="token string">"2017/06/12"</span><span class="token punctuation">;</span><span class="token keyword">var</span> string3 <span class="token operator">=</span> <span class="token string">"2017.06.12"</span><span class="token punctuation">;</span><span class="token keyword">var</span> string4 <span class="token operator">=</span> <span class="token string">"2016-06/12"</span><span class="token punctuation">;</span>console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span> regex<span class="token punctuation">.</span><span class="token function">test</span><span class="token punctuation">(</span>string1<span class="token punctuation">)</span> <span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment" spellcheck="true">// true</span>console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span> regex<span class="token punctuation">.</span><span class="token function">test</span><span class="token punctuation">(</span>string2<span class="token punctuation">)</span> <span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment" spellcheck="true">// true</span>console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span> regex<span class="token punctuation">.</span><span class="token function">test</span><span class="token punctuation">(</span>string3<span class="token punctuation">)</span> <span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment" spellcheck="true">// true</span>console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span> regex<span class="token punctuation">.</span><span class="token function">test</span><span class="token punctuation">(</span>string4<span class="token punctuation">)</span> <span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment" spellcheck="true">// true</span><span class="token comment" spellcheck="true">// 前后间隔符保持一致，需要反向引用匹配的第一个分隔符</span><span class="token keyword">var</span> regex <span class="token operator">=</span> <span class="token regex">/\d{4}(-|\/|\.)\d{2}\1\d{2}/</span><span class="token punctuation">;</span>console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span> regex<span class="token punctuation">.</span><span class="token function">test</span><span class="token punctuation">(</span>string4<span class="token punctuation">)</span> <span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment" spellcheck="true">// false</span><span class="token comment" spellcheck="true">//  匹配成对标签</span><span class="token keyword">var</span> regex <span class="token operator">=</span> <span class="token regex">/&lt;([^>]+)>[\d\D]*&lt;\/\1>/</span><span class="token punctuation">;</span><span class="token keyword">var</span> string1 <span class="token operator">=</span> <span class="token string">"&lt;title>regular expression&lt;/title>"</span><span class="token punctuation">;</span><span class="token keyword">var</span> string2 <span class="token operator">=</span> <span class="token string">"&lt;p>laoyao bye bye&lt;/p>"</span><span class="token punctuation">;</span><span class="token keyword">var</span> string3 <span class="token operator">=</span> <span class="token string">"&lt;title>wrong!&lt;/p>"</span><span class="token punctuation">;</span>console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span> regex<span class="token punctuation">.</span><span class="token function">test</span><span class="token punctuation">(</span>string1<span class="token punctuation">)</span> <span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment" spellcheck="true">// true</span>console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span> regex<span class="token punctuation">.</span><span class="token function">test</span><span class="token punctuation">(</span>string2<span class="token punctuation">)</span> <span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment" spellcheck="true">// true</span>console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span> regex<span class="token punctuation">.</span><span class="token function">test</span><span class="token punctuation">(</span>string3<span class="token punctuation">)</span> <span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment" spellcheck="true">// false</span></code></pre><h5 id="嵌套括号"><a href="#嵌套括号" class="headerlink" title="嵌套括号"></a>嵌套括号</h5><blockquote><p>根据开括号从左往右依次分组</p></blockquote><pre class=" language-javascript"><code class="language-javascript"><span class="token keyword">var</span> regex <span class="token operator">=</span> <span class="token regex">/^((\d)(\d(\d)))\1\2\3\4$/</span><span class="token punctuation">;</span><span class="token keyword">var</span> string <span class="token operator">=</span> <span class="token string">"1231231233"</span><span class="token punctuation">;</span>console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span> regex<span class="token punctuation">.</span><span class="token function">test</span><span class="token punctuation">(</span>string<span class="token punctuation">)</span> <span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment" spellcheck="true">// true</span>console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span> RegExp<span class="token punctuation">.</span>$<span class="token number">1</span> <span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment" spellcheck="true">// 123</span>console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span> RegExp<span class="token punctuation">.</span>$<span class="token number">2</span> <span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment" spellcheck="true">// 1</span>console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span> RegExp<span class="token punctuation">.</span>$<span class="token number">3</span> <span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment" spellcheck="true">// 23</span>console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span> RegExp<span class="token punctuation">.</span>$<span class="token number">4</span> <span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment" spellcheck="true">// 3</span></code></pre><p><code>\10代表第十个分组，而非\1和0的组合</code></p><pre class=" language-javascript"><code class="language-javascript"><span class="token keyword">var</span> regex <span class="token operator">=</span> <span class="token regex">/(1)(2)(3)(4)(5)(6)(7)(8)(9)(#) \10+/</span><span class="token punctuation">;</span><span class="token keyword">var</span> string <span class="token operator">=</span> <span class="token string">"123456789# ######"</span>console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span> regex<span class="token punctuation">.</span><span class="token function">test</span><span class="token punctuation">(</span>string<span class="token punctuation">)</span> <span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token comment" spellcheck="true">// => true</span></code></pre><p><code>不存在引用分组，则代表字符本身</code></p><pre class=" language-javascript"><code class="language-javascript"><span class="token keyword">var</span> regex <span class="token operator">=</span> <span class="token regex">/\1\2\3\4\5\6\7\8\9/</span><span class="token punctuation">;</span>console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span> regex<span class="token punctuation">.</span><span class="token function">test</span><span class="token punctuation">(</span><span class="token string">"\1\2\3\4\5\6\7\8\9"</span><span class="token punctuation">)</span> <span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment" spellcheck="true">// true</span></code></pre><h5 id="非捕获分组"><a href="#非捕获分组" class="headerlink" title="非捕获分组"></a>非捕获分组</h5><blockquote><p>如果只想要括号最原始的功能，但不会引用它，即，既不在API里引用，也不在正则里反向引用。此时可以使用非捕获分组(?:p)</p></blockquote><pre class=" language-javascript"><code class="language-javascript"><span class="token keyword">var</span> regex <span class="token operator">=</span> <span class="token regex">/(?:ab)+/g</span><span class="token punctuation">;</span><span class="token keyword">var</span> string <span class="token operator">=</span> <span class="token string">"ababa abbb ababab"</span><span class="token punctuation">;</span>console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span> string<span class="token punctuation">.</span><span class="token function">match</span><span class="token punctuation">(</span>regex<span class="token punctuation">)</span> <span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment" spellcheck="true">// => ["abab", "ab", "ababab"]</span></code></pre><h3 id="正则表达式操作符优先级"><a href="#正则表达式操作符优先级" class="headerlink" title="正则表达式操作符优先级"></a>正则表达式操作符优先级</h3><ul><li>1.转义符 \</li><li>2.括号和方括号 (…)、(?:…)、(?=…)、(?!…)、[…]</li><li>3.量词限定符 {m}、{m,n}、{m,}、?、*、+</li><li>4.位置和序列 ^ 、$、 \元字符、 一般字符</li><li><ol start="5"><li>管道符（竖杠）|</li></ol></li></ul><pre class=" language-javascript"><code class="language-javascript"><span class="token keyword">var</span> reg <span class="token operator">=</span> <span class="token regex">/ab?(c|de*)+|fg/</span><span class="token comment" spellcheck="true">// 由于括号的存在，所以，(c|de*)是一个整体结构。</span><span class="token comment" spellcheck="true">// 在(c|de*)中，注意其中的量词*，因此e*是一个整体结构。</span><span class="token comment" spellcheck="true">// 又因为分支结构“|”优先级最低，因此c是一个整体、而de*是另一个整体。</span><span class="token comment" spellcheck="true">// 同理，整个正则分成了a、b?、(...)+、f、g。而由于分支的原因，又可以分成ab?(c|de*)+和fg这两部分。。</span></code></pre><h3 id="修饰符"><a href="#修饰符" class="headerlink" title="修饰符"></a>修饰符</h3><ul><li><p>g 全局匹配，即找到所有匹配的，单词是global</p></li><li><p>i 忽略字母大小写，单词ingoreCase</p></li><li><p>m 多行匹配，只影响^和$，二者变成行的概念，即行开头和行结尾。单词是multiline</p></li></ul>]]></content>
      
      
      <categories>
          
          <category> 正则 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 正则 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>typescript</title>
      <link href="/2020/02/05/ts/"/>
      <url>/2020/02/05/ts/</url>
      
        <content type="html"><![CDATA[<h3 id="简单类型"><a href="#简单类型" class="headerlink" title="简单类型"></a>简单类型</h3><h4 id="基本类型"><a href="#基本类型" class="headerlink" title="基本类型"></a>基本类型</h4><ul><li>number</li><li>string</li><li>boolean</li><li>never</li><li>void</li><li>object</li><li>symbol</li><li>bigint</li><li>…</li></ul><pre class=" language-typescript"><code class="language-typescript"><span class="token keyword">let</span> num<span class="token punctuation">:</span> <span class="token keyword">number</span> <span class="token operator">=</span> <span class="token number">1</span><span class="token punctuation">;</span><span class="token keyword">let</span> str<span class="token punctuation">:</span> <span class="token keyword">string</span> <span class="token operator">=</span> <span class="token string">'1'</span><span class="token punctuation">;</span><span class="token keyword">let</span> bol<span class="token punctuation">:</span> <span class="token keyword">boolean</span> <span class="token operator">=</span> <span class="token keyword">true</span><span class="token punctuation">;</span><span class="token keyword">let</span> s1<span class="token punctuation">:</span> symbol <span class="token operator">=</span> <span class="token function">Symbol</span><span class="token punctuation">(</span><span class="token number">1</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token keyword">let</span> max <span class="token operator">=</span> Number<span class="token punctuation">.</span>MAX_SAFE_INTEGER<span class="token keyword">let</span> r1<span class="token punctuation">:</span>bigint <span class="token operator">=</span> <span class="token function">BigInt</span><span class="token punctuation">(</span>max<span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token comment" spellcheck="true">// never 永远打不到的类型</span><span class="token keyword">function</span> <span class="token function">throwError</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">:</span> never <span class="token punctuation">{</span>    <span class="token keyword">throw</span> <span class="token keyword">new</span> <span class="token class-name">Error</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">}</span><span class="token keyword">function</span> <span class="token function">setVal</span><span class="token punctuation">(</span>val<span class="token punctuation">:</span> <span class="token keyword">string</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>    <span class="token keyword">if</span> <span class="token punctuation">(</span><span class="token keyword">typeof</span> val <span class="token operator">===</span> <span class="token string">'string'</span><span class="token punctuation">)</span>    <span class="token keyword">else</span> val <span class="token comment" spellcheck="true">// never</span><span class="token punctuation">}</span><span class="token keyword">function</span> <span class="token function">whileTrue</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">:</span> never <span class="token punctuation">{</span>    <span class="token keyword">while</span> <span class="token punctuation">(</span><span class="token keyword">true</span><span class="token punctuation">)</span> <span class="token punctuation">{</span> <span class="token punctuation">}</span><span class="token punctuation">}</span><span class="token comment" spellcheck="true">// void 一般用于函数无返回值</span><span class="token keyword">function</span> <span class="token function">getVoid</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">:</span><span class="token keyword">void</span> <span class="token punctuation">{</span><span class="token operator">...</span><span class="token punctuation">}</span></code></pre><h4 id="联合类型"><a href="#联合类型" class="headerlink" title="联合类型"></a>联合类型</h4><blockquote><p>多个类型的集合</p></blockquote><pre class=" language-javascript"><code class="language-javascript"><span class="token comment" spellcheck="true">// 类型联合</span><span class="token keyword">let</span> numOrStr<span class="token punctuation">:</span> number <span class="token operator">|</span> string <span class="token operator">=</span> <span class="token string">'1'</span><span class="token punctuation">;</span>numOrStr <span class="token operator">=</span> <span class="token number">1</span><span class="token punctuation">;</span><span class="token comment" spellcheck="true">// 固定值联合</span>type IType <span class="token operator">=</span> <span class="token string">'a'</span> <span class="token operator">|</span> <span class="token string">'b'</span> <span class="token operator">|</span> <span class="token string">'c'</span> <span class="token operator">|</span> <span class="token string">'d'</span><span class="token keyword">let</span> type<span class="token punctuation">:</span> IType <span class="token operator">=</span> <span class="token string">'a'</span><span class="token punctuation">;</span>type <span class="token operator">=</span> <span class="token string">'b'</span><span class="token punctuation">;</span></code></pre><h4 id="函数类型"><a href="#函数类型" class="headerlink" title="函数类型"></a>函数类型</h4><blockquote><p>函数可以定义参数类型和返回值类型, 也可以给函数本身添加类型，两方添一方即可，会自动推导类型</p></blockquote><pre class=" language-typescript"><code class="language-typescript"><span class="token comment" spellcheck="true">// 自动推导sum的类型</span><span class="token keyword">function</span> <span class="token function">sum</span><span class="token punctuation">(</span>x<span class="token punctuation">:</span> <span class="token keyword">number</span><span class="token punctuation">,</span> y<span class="token punctuation">:</span> <span class="token keyword">string</span><span class="token punctuation">)</span><span class="token punctuation">:</span> <span class="token keyword">string</span> <span class="token punctuation">{</span> <span class="token comment" spellcheck="true">// 函数 括号后面的是返回值类型</span>    <span class="token keyword">return</span> x <span class="token operator">+</span> y<span class="token punctuation">;</span><span class="token punctuation">}</span><span class="token comment" spellcheck="true">// 自动推导参数和返回值类型</span>type IFn <span class="token operator">=</span> <span class="token punctuation">(</span>a<span class="token punctuation">:</span> <span class="token keyword">number</span><span class="token punctuation">,</span> b<span class="token punctuation">:</span> <span class="token keyword">number</span><span class="token punctuation">)</span> <span class="token operator">=</span><span class="token operator">></span> <span class="token keyword">number</span><span class="token keyword">const</span> sum1<span class="token punctuation">:</span> IFn <span class="token operator">=</span> <span class="token punctuation">(</span>x<span class="token punctuation">,</span>y<span class="token punctuation">)</span> <span class="token operator">=</span><span class="token operator">></span> x <span class="token operator">+</span> y<span class="token punctuation">;</span><span class="token comment" spellcheck="true">// 多余参数用扩展运算符</span><span class="token keyword">const</span> sum3 <span class="token operator">=</span> <span class="token punctuation">(</span>x<span class="token punctuation">:</span> <span class="token keyword">number</span><span class="token punctuation">,</span> y<span class="token operator">?</span><span class="token punctuation">:</span> <span class="token keyword">number</span><span class="token punctuation">,</span> <span class="token operator">...</span>args<span class="token punctuation">:</span> <span class="token keyword">number</span><span class="token punctuation">[</span><span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token punctuation">:</span> <span class="token keyword">number</span> <span class="token operator">=</span><span class="token operator">></span> <span class="token punctuation">{</span>    <span class="token keyword">return</span> x <span class="token operator">+</span> <span class="token punctuation">(</span>y as <span class="token keyword">number</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token punctuation">}</span><span class="token comment" spellcheck="true">// 函数重载 重载方法在真实方法的上面</span><span class="token keyword">function</span> <span class="token function">toArray</span><span class="token punctuation">(</span>value<span class="token punctuation">:</span><span class="token keyword">string</span><span class="token punctuation">)</span><span class="token punctuation">:</span><span class="token keyword">string</span><span class="token punctuation">[</span><span class="token punctuation">]</span><span class="token keyword">function</span> <span class="token function">toArray</span><span class="token punctuation">(</span>value<span class="token punctuation">:</span><span class="token keyword">number</span><span class="token punctuation">)</span><span class="token punctuation">:</span><span class="token keyword">number</span><span class="token punctuation">[</span><span class="token punctuation">]</span><span class="token keyword">function</span> <span class="token function">toArray</span><span class="token punctuation">(</span>value<span class="token punctuation">:</span><span class="token keyword">string</span> <span class="token operator">|</span> <span class="token keyword">number</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>    <span class="token operator">...</span><span class="token operator">...</span><span class="token punctuation">}</span></code></pre><h4 id="类的类型"><a href="#类的类型" class="headerlink" title="类的类型"></a>类的类型</h4><blockquote><p>类的修饰符</p><ul><li>public 是属性修饰符 public 表示自己 和 子类 和子类之外都可以访问到</li><li>protected 只有自己和 自己的后辈能访问</li><li>private 就是只有自己能访问的属性</li></ul></blockquote><blockquote><p>类中的装饰器: 修饰类会将target 目标类传给定义的函数 修饰属性会将目标类和属性key传给定义好的函数 修饰方法 。。。 修饰参数 。。。</p></blockquote><pre class=" language-typescript"><code class="language-typescript">@addSaay<span class="token keyword">class</span> <span class="token class-name">Person</span> <span class="token punctuation">{</span>    <span class="token comment" spellcheck="true">// eat!:()=>void</span>    @toUpperCase    <span class="token keyword">public</span> name<span class="token punctuation">:</span> <span class="token keyword">string</span> <span class="token operator">=</span> <span class="token string">'jw'</span><span class="token punctuation">;</span>    @<span class="token function">double</span><span class="token punctuation">(</span><span class="token number">3</span><span class="token punctuation">)</span>    <span class="token keyword">static</span> age<span class="token punctuation">:</span> <span class="token keyword">number</span> <span class="token operator">=</span> <span class="token number">18</span><span class="token punctuation">;</span> <span class="token comment" spellcheck="true">// 静态的通过类来调用</span>    @<span class="token function">Enum</span><span class="token punctuation">(</span><span class="token keyword">false</span><span class="token punctuation">)</span>    <span class="token comment" spellcheck="true">// 还能修饰参数</span>    <span class="token function">drink</span><span class="token punctuation">(</span>@params content<span class="token punctuation">:</span> <span class="token keyword">any</span><span class="token punctuation">)</span> <span class="token punctuation">{</span> <span class="token punctuation">}</span><span class="token punctuation">}</span><span class="token keyword">function</span> <span class="token function">double</span><span class="token punctuation">(</span>num<span class="token punctuation">:</span> <span class="token keyword">number</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>    <span class="token keyword">return</span> <span class="token keyword">function</span> <span class="token punctuation">(</span>target<span class="token punctuation">:</span> <span class="token keyword">any</span><span class="token punctuation">,</span> key<span class="token punctuation">:</span> <span class="token keyword">string</span><span class="token punctuation">)</span> <span class="token punctuation">{</span> <span class="token comment" spellcheck="true">// target => 类</span>        <span class="token keyword">let</span> v <span class="token operator">=</span> target<span class="token punctuation">[</span>key<span class="token punctuation">]</span>        Object<span class="token punctuation">.</span><span class="token function">defineProperty</span><span class="token punctuation">(</span>target<span class="token punctuation">,</span> key<span class="token punctuation">,</span> <span class="token punctuation">{</span>            <span class="token keyword">get</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>                <span class="token keyword">return</span> num <span class="token operator">*</span> v            <span class="token punctuation">}</span>        <span class="token punctuation">}</span><span class="token punctuation">)</span>    <span class="token punctuation">}</span><span class="token punctuation">}</span></code></pre><h3 id="接口"><a href="#接口" class="headerlink" title="接口"></a>接口</h3><blockquote><p>使用interface声明一个接口，用来描述对象的结构 也可以使用type来定义接口</p></blockquote><ul><li>区别，interface可以被类实现和继承,type可以使用联合类型</li><li>多个重名接口会合并</li></ul><pre class=" language-typescript"><code class="language-typescript"><span class="token comment" spellcheck="true">// kv之间可以用逗号分隔，也可以: 也可以无符号回车</span><span class="token keyword">interface</span> <span class="token class-name">IObj</span> <span class="token punctuation">{</span>    <span class="token punctuation">(</span>params<span class="token punctuation">:</span> <span class="token keyword">string</span><span class="token punctuation">)</span><span class="token punctuation">:</span> <span class="token keyword">string</span> <span class="token comment" spellcheck="true">// 函数</span>    readonly read<span class="token punctuation">:</span> <span class="token keyword">boolean</span> <span class="token comment" spellcheck="true">// 仅读</span>    name<span class="token punctuation">:</span> <span class="token keyword">string</span> <span class="token comment" spellcheck="true">// 必填</span>    age<span class="token operator">?</span><span class="token punctuation">:</span> <span class="token keyword">number</span> <span class="token comment" spellcheck="true">// 选填</span>    <span class="token punctuation">[</span>key<span class="token punctuation">:</span> <span class="token keyword">string</span><span class="token punctuation">]</span><span class="token punctuation">:</span> <span class="token keyword">any</span> <span class="token comment" spellcheck="true">// 扩展任意值</span><span class="token punctuation">}</span><span class="token keyword">interface</span> <span class="token class-name">My</span> <span class="token keyword">extends</span> <span class="token class-name">IObj</span> <span class="token punctuation">{</span><span class="token punctuation">}</span> <span class="token comment" spellcheck="true">// 继承</span></code></pre><blockquote><p>接口实现: 使用implements关键字继承，可继承多个接口，用逗号隔开</p></blockquote><pre class=" language-typescript"><code class="language-typescript"><span class="token keyword">interface</span> <span class="token class-name">ISpeakable</span> <span class="token punctuation">{</span>    name<span class="token punctuation">:</span> <span class="token keyword">string</span><span class="token punctuation">,</span>    <span class="token function">speak</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">:</span> <span class="token keyword">void</span><span class="token punctuation">}</span><span class="token keyword">interface</span> <span class="token class-name">IChineseSpeakable</span> <span class="token punctuation">{</span>    <span class="token function">speakChinese</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">:</span> <span class="token keyword">void</span><span class="token punctuation">}</span><span class="token keyword">class</span> <span class="token class-name">Speak</span> <span class="token keyword">implements</span> <span class="token class-name">ISpeakable</span><span class="token punctuation">,</span> IChineseSpeakable <span class="token punctuation">{</span>    <span class="token function">speakChinese</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">:</span> <span class="token keyword">void</span> <span class="token punctuation">{</span>        <span class="token keyword">throw</span> <span class="token keyword">new</span> <span class="token class-name">Error</span><span class="token punctuation">(</span><span class="token string">"Method not implemented."</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span>    name<span class="token operator">!</span><span class="token punctuation">:</span> <span class="token keyword">string</span>    <span class="token function">speak</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">:</span> <span class="token keyword">string</span> <span class="token punctuation">{</span> <span class="token comment" spellcheck="true">// 此方法是原型方法</span>        <span class="token keyword">return</span> <span class="token string">'xxx'</span>    <span class="token punctuation">}</span><span class="token punctuation">}</span></code></pre><h3 id="泛型"><a href="#泛型" class="headerlink" title="泛型"></a>泛型</h3><blockquote><p>泛型的用处在于 当我们调用的时候 确定类型，而不是一开始就写好类型，类型不确定，只有在执行的时候才能确定</p><ul><li>泛型可以在 函数 类 （接口、别名） 中使用</li><li>extends 约束</li><li>keyof 取当前类型的key</li><li>typeof 取当前值的类型</li></ul></blockquote><pre class=" language-typescript"><code class="language-typescript"><span class="token comment" spellcheck="true">// 接口使用泛型</span><span class="token keyword">interface</span> <span class="token class-name">IMyArr</span><span class="token operator">&lt;</span>T<span class="token operator">></span> <span class="token punctuation">{</span>    name<span class="token punctuation">:</span> T<span class="token punctuation">}</span><span class="token keyword">let</span> my<span class="token punctuation">:</span> IMyArr<span class="token operator">&lt;</span><span class="token keyword">string</span><span class="token operator">></span> <span class="token operator">=</span> <span class="token punctuation">{</span>    name<span class="token punctuation">:</span> <span class="token string">'str'</span><span class="token punctuation">}</span><span class="token comment" spellcheck="true">// 函数使用泛型</span><span class="token keyword">const</span> swap <span class="token operator">=</span> <span class="token operator">&lt;</span>T<span class="token punctuation">,</span> K<span class="token operator">></span><span class="token punctuation">(</span>tuple<span class="token punctuation">:</span> <span class="token punctuation">[</span>T<span class="token punctuation">,</span> K<span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token punctuation">:</span> <span class="token punctuation">[</span>K<span class="token punctuation">,</span> T<span class="token punctuation">]</span> <span class="token operator">=</span><span class="token operator">></span> <span class="token punctuation">{</span> <span class="token comment" spellcheck="true">// 元组是特殊的数组</span>    <span class="token keyword">return</span> <span class="token punctuation">[</span>tuple<span class="token punctuation">[</span><span class="token number">1</span><span class="token punctuation">]</span><span class="token punctuation">,</span> tuple<span class="token punctuation">[</span><span class="token number">0</span><span class="token punctuation">]</span><span class="token punctuation">]</span><span class="token punctuation">}</span></code></pre><h4 id="类的约束"><a href="#类的约束" class="headerlink" title="类的约束"></a>类的约束</h4><pre class=" language-typescript"><code class="language-typescript"><span class="token comment" spellcheck="true">// 必须包含length属性</span>type withLen <span class="token operator">=</span> <span class="token punctuation">{</span> length<span class="token punctuation">:</span> <span class="token keyword">number</span> <span class="token punctuation">}</span><span class="token keyword">const</span> computeArrayLength <span class="token operator">=</span> <span class="token operator">&lt;</span>T <span class="token keyword">extends</span> <span class="token class-name">withLen</span><span class="token punctuation">,</span> K <span class="token keyword">extends</span> <span class="token class-name">withLen</span><span class="token operator">></span><span class="token punctuation">(</span>arr1<span class="token punctuation">:</span> T<span class="token punctuation">,</span> arr2<span class="token punctuation">:</span> K<span class="token punctuation">)</span><span class="token punctuation">:</span> <span class="token keyword">number</span> <span class="token operator">=</span><span class="token operator">></span> <span class="token punctuation">{</span>    <span class="token keyword">return</span> arr1<span class="token punctuation">.</span>length <span class="token operator">+</span> arr2<span class="token punctuation">.</span>length<span class="token punctuation">}</span><span class="token function">computeArrayLength</span><span class="token punctuation">(</span><span class="token string">'123'</span><span class="token punctuation">,</span> <span class="token punctuation">{</span> length<span class="token punctuation">:</span> <span class="token number">3</span> <span class="token punctuation">}</span><span class="token punctuation">)</span><span class="token keyword">const</span> getVal <span class="token operator">=</span> <span class="token operator">&lt;</span>T <span class="token keyword">extends</span> <span class="token class-name">object</span><span class="token punctuation">,</span> K <span class="token keyword">extends</span> <span class="token class-name">keyof</span> T<span class="token operator">></span><span class="token punctuation">(</span>obj<span class="token punctuation">:</span> T<span class="token punctuation">,</span> key<span class="token punctuation">:</span> K<span class="token punctuation">)</span> <span class="token operator">=</span><span class="token operator">></span> <span class="token punctuation">{</span>    <span class="token keyword">if</span> <span class="token punctuation">(</span><span class="token keyword">typeof</span> obj <span class="token operator">!==</span> <span class="token string">'object'</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>        <span class="token keyword">return</span>    <span class="token punctuation">}</span><span class="token punctuation">}</span></code></pre><h4 id="keyof"><a href="#keyof" class="headerlink" title="keyof"></a>keyof</h4><pre class=" language-typescript"><code class="language-typescript"> keyof <span class="token punctuation">{</span> a<span class="token punctuation">:</span> <span class="token number">1</span><span class="token punctuation">,</span> b<span class="token punctuation">:</span> <span class="token number">2</span> <span class="token punctuation">}</span> <span class="token comment" spellcheck="true">// => 'a' | 'b'</span> keyof <span class="token keyword">any</span> <span class="token comment" spellcheck="true">// => number | string | symbal</span> keyof <span class="token keyword">string</span> <span class="token comment" spellcheck="true">// => string的属性和方法对应的key</span></code></pre><h3 id="类型保护"><a href="#类型保护" class="headerlink" title="类型保护"></a>类型保护</h3><h4 id="js类型判断方法"><a href="#js类型判断方法" class="headerlink" title="js类型判断方法"></a>js类型判断方法</h4><ul><li>typeof</li><li>instanceof</li><li>in语法</li></ul><pre class=" language-typescript"><code class="language-typescript"><span class="token comment" spellcheck="true">// typeof</span><span class="token keyword">function</span> <span class="token function">fn</span><span class="token punctuation">(</span>val<span class="token punctuation">:</span> <span class="token keyword">string</span> <span class="token operator">|</span> <span class="token keyword">number</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>    <span class="token keyword">if</span> <span class="token punctuation">(</span><span class="token keyword">typeof</span> val <span class="token operator">==</span> <span class="token string">'string'</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>        val<span class="token punctuation">.</span>match    <span class="token punctuation">}</span> <span class="token keyword">else</span> <span class="token punctuation">{</span>        val<span class="token punctuation">.</span>toFixed    <span class="token punctuation">}</span><span class="token punctuation">}</span><span class="token comment" spellcheck="true">// instanceof</span><span class="token keyword">class</span> <span class="token class-name">Person</span> <span class="token punctuation">{</span> <span class="token function">eat</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span> <span class="token punctuation">}</span> <span class="token punctuation">}</span><span class="token keyword">class</span> <span class="token class-name">Dog</span> <span class="token punctuation">{</span> <span class="token punctuation">}</span><span class="token keyword">const</span> createClass <span class="token operator">=</span> <span class="token punctuation">(</span>clazz<span class="token punctuation">:</span> <span class="token keyword">new</span> <span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">=</span><span class="token operator">></span> Person <span class="token operator">|</span> Dog<span class="token punctuation">)</span> <span class="token operator">=</span><span class="token operator">></span> <span class="token punctuation">{</span>    <span class="token keyword">return</span> <span class="token keyword">new</span> <span class="token class-name">clazz</span><span class="token punctuation">}</span><span class="token keyword">let</span> r <span class="token operator">=</span> <span class="token function">createClass</span><span class="token punctuation">(</span>Person<span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token keyword">if</span> <span class="token punctuation">(</span>r <span class="token keyword">instanceof</span> <span class="token class-name">Person</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>    r<span class="token punctuation">.</span>eat <span class="token comment" spellcheck="true">// Person</span><span class="token punctuation">}</span> <span class="token keyword">else</span> <span class="token punctuation">{</span>    r <span class="token comment" spellcheck="true">// Dog</span><span class="token punctuation">}</span></code></pre><h4 id="is语法"><a href="#is语法" class="headerlink" title="is语法"></a>is语法</h4><pre class=" language-typescript"><code class="language-typescript"><span class="token comment" spellcheck="true">// 用于判断方法，断言返回值的类型，不关心方法内容</span><span class="token keyword">function</span> <span class="token function">isString</span><span class="token punctuation">(</span>val<span class="token punctuation">:</span> <span class="token keyword">any</span><span class="token punctuation">)</span><span class="token punctuation">:</span> val is <span class="token keyword">string</span> <span class="token punctuation">{</span> <span class="token comment" spellcheck="true">// 根据函数的返回值确定是不是string类型</span>    <span class="token comment" spellcheck="true">// ts 是给代码的  js是自己的逻辑  ts不关心，ts只关心类型</span>    <span class="token keyword">return</span> Object<span class="token punctuation">.</span>prototype<span class="token punctuation">.</span>toString<span class="token punctuation">.</span><span class="token function">call</span><span class="token punctuation">(</span>val<span class="token punctuation">)</span> <span class="token operator">==</span> <span class="token string">'[object String]'</span><span class="token punctuation">}</span></code></pre><h4 id="完整性保护"><a href="#完整性保护" class="headerlink" title="完整性保护"></a>完整性保护</h4><pre class=" language-typescript"><code class="language-typescript"><span class="token keyword">const</span> assert <span class="token operator">=</span> <span class="token punctuation">(</span>obj<span class="token punctuation">:</span> never<span class="token punctuation">)</span> <span class="token operator">=</span><span class="token operator">></span> <span class="token punctuation">{</span> <span class="token keyword">throw</span> <span class="token keyword">new</span> <span class="token class-name">Error</span><span class="token punctuation">(</span><span class="token string">"err"</span><span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token punctuation">}</span><span class="token comment" spellcheck="true">// 完整性保护 保证代码逻辑全部覆盖到</span><span class="token keyword">function</span> <span class="token function">getArea</span><span class="token punctuation">(</span>obj<span class="token punctuation">:</span> ISquare <span class="token operator">|</span> IRant <span class="token operator">|</span> ICircle<span class="token punctuation">)</span> <span class="token punctuation">{</span>    <span class="token keyword">switch</span> <span class="token punctuation">(</span>obj<span class="token punctuation">.</span>kind<span class="token punctuation">)</span> <span class="token punctuation">{</span>        <span class="token keyword">case</span> <span class="token string">'square'</span><span class="token punctuation">:</span>            <span class="token keyword">return</span> obj<span class="token punctuation">.</span>width <span class="token operator">*</span> obj<span class="token punctuation">.</span>width<span class="token punctuation">;</span>        <span class="token keyword">case</span> <span class="token string">'rant'</span><span class="token punctuation">:</span>            <span class="token keyword">return</span> obj<span class="token punctuation">.</span>width <span class="token operator">*</span> obj<span class="token punctuation">.</span>height<span class="token punctuation">;</span>        <span class="token keyword">case</span> <span class="token string">'circle'</span><span class="token punctuation">:</span>            <span class="token keyword">return</span>        <span class="token keyword">default</span><span class="token punctuation">:</span>            <span class="token function">assert</span><span class="token punctuation">(</span>obj<span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span><span class="token punctuation">}</span><span class="token function">getArea</span><span class="token punctuation">(</span><span class="token punctuation">{</span> kind<span class="token punctuation">:</span> <span class="token string">'circle'</span><span class="token punctuation">,</span> r<span class="token punctuation">:</span> <span class="token number">10</span> <span class="token punctuation">}</span><span class="token punctuation">)</span><span class="token punctuation">;</span></code></pre><h3 id="交叉"><a href="#交叉" class="headerlink" title="交叉"></a>交叉</h3><blockquote><p>交叉类型 = 交集</p><ul><li>可用于在原有类型基础上扩展类型</li><li>交叉类型可以赋值给没有交叉之前的类型</li></ul></blockquote><pre class=" language-typescript"><code class="language-typescript"><span class="token keyword">interface</span> <span class="token class-name">Person1</span> <span class="token punctuation">{</span>    handsome<span class="token punctuation">:</span> <span class="token keyword">string</span><span class="token punctuation">,</span>    <span class="token comment" spellcheck="true">// a:string  如果两个类型不一致 则相交的结果是never</span><span class="token punctuation">}</span><span class="token keyword">interface</span> <span class="token class-name">Person2</span> <span class="token punctuation">{</span>    height<span class="token punctuation">:</span> <span class="token keyword">string</span><span class="token punctuation">,</span>    <span class="token comment" spellcheck="true">// a:number</span><span class="token punctuation">}</span>type Person3 <span class="token operator">=</span> Person1 <span class="token operator">&amp;</span> Person2<span class="token punctuation">;</span> <span class="token comment" spellcheck="true">// | 并集  &amp; 交集  (交集可以理解成 涵盖所有属性)</span><span class="token keyword">let</span> person<span class="token punctuation">:</span> Person3 <span class="token operator">=</span> <span class="token punctuation">{</span>    handsome<span class="token punctuation">:</span> <span class="token string">'帅'</span><span class="token punctuation">,</span>    height<span class="token punctuation">:</span> <span class="token string">'高'</span><span class="token punctuation">,</span><span class="token punctuation">}</span></code></pre><h3 id="内置类型"><a href="#内置类型" class="headerlink" title="内置类型"></a>内置类型</h3><h4 id="条件类型"><a href="#条件类型" class="headerlink" title="条件类型"></a>条件类型</h4><ul><li>Exclude:ts中内置的类型 内置类型包含条件的情况 （内部用条件来实现的）</li><li>Extract:多个属性中 抽离某几个</li><li>NonNullable:在多个类型中排除null类型(undefined也会被排除)</li></ul><pre class=" language-typescript"><code class="language-typescript">type Exclude<span class="token operator">&lt;</span>T<span class="token punctuation">,</span> K<span class="token operator">></span> <span class="token operator">=</span> T <span class="token keyword">extends</span> <span class="token class-name">K</span> <span class="token operator">?</span> never <span class="token punctuation">:</span> T<span class="token punctuation">;</span> <span class="token comment" spellcheck="true">// 在多个类型中提排除掉某几个</span>type MyExclude <span class="token operator">=</span> Exclude<span class="token operator">&lt;</span><span class="token keyword">string</span> <span class="token operator">|</span> <span class="token keyword">number</span> <span class="token operator">|</span> <span class="token keyword">boolean</span><span class="token punctuation">,</span> <span class="token keyword">boolean</span><span class="token operator">></span> <span class="token comment" spellcheck="true">// string | number</span>type MyExtract <span class="token operator">=</span> Extract<span class="token operator">&lt;</span><span class="token keyword">string</span> <span class="token operator">|</span> <span class="token keyword">number</span> <span class="token operator">|</span> <span class="token keyword">boolean</span><span class="token punctuation">,</span> <span class="token keyword">boolean</span><span class="token operator">></span> <span class="token comment" spellcheck="true">// =>  boolean</span>type NonNullable<span class="token operator">&lt;</span>T<span class="token operator">></span> <span class="token operator">=</span> T <span class="token keyword">extends</span> <span class="token class-name">null</span> <span class="token operator">|</span> undefined <span class="token operator">?</span> never <span class="token punctuation">:</span> T<span class="token punctuation">;</span> <span class="token comment" spellcheck="true">// 在多个类型中提排除掉某几个</span>type MyNonNullable <span class="token operator">=</span> NonNullable<span class="token operator">&lt;</span><span class="token keyword">string</span> <span class="token operator">|</span> <span class="token keyword">number</span> <span class="token operator">|</span> <span class="token keyword">null</span> <span class="token operator">|</span> undefined<span class="token operator">></span> <span class="token comment" spellcheck="true">// string | number</span></code></pre><ul><li>ReturnType: 获取返回值类型</li><li>Parameters: 获取参数类型</li><li>ConstructorParameters: 获取类的参数类型</li></ul><pre class=" language-typescript"><code class="language-typescript"><span class="token comment" spellcheck="true">// infer放在哪里 就是推断哪里的结果</span><span class="token keyword">function</span> <span class="token function">getSchool</span><span class="token punctuation">(</span>x<span class="token punctuation">:</span> <span class="token keyword">string</span><span class="token punctuation">,</span> y<span class="token punctuation">:</span> <span class="token keyword">number</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>    <span class="token keyword">return</span> <span class="token punctuation">{</span> name<span class="token punctuation">:</span> <span class="token string">'jiatengda'</span><span class="token punctuation">,</span> age<span class="token punctuation">:</span> <span class="token number">12</span> <span class="token punctuation">}</span><span class="token punctuation">}</span>type ReturnType<span class="token operator">&lt;</span>T <span class="token keyword">extends</span> <span class="token punctuation">(</span><span class="token punctuation">(</span><span class="token operator">...</span>args<span class="token punctuation">:</span> <span class="token keyword">any</span><span class="token punctuation">[</span><span class="token punctuation">]</span><span class="token punctuation">)</span> <span class="token operator">=</span><span class="token operator">></span> <span class="token keyword">any</span><span class="token punctuation">)</span><span class="token operator">></span> <span class="token operator">=</span> T <span class="token keyword">extends</span> <span class="token punctuation">(</span><span class="token punctuation">(</span><span class="token operator">...</span>args<span class="token punctuation">:</span> <span class="token keyword">any</span><span class="token punctuation">[</span><span class="token punctuation">]</span><span class="token punctuation">)</span> <span class="token operator">=</span><span class="token operator">></span> infer R<span class="token punctuation">)</span> <span class="token operator">?</span> R <span class="token punctuation">:</span> <span class="token keyword">any</span>type MyReturnType <span class="token operator">=</span> ReturnType<span class="token operator">&lt;</span><span class="token keyword">typeof</span> getSchool<span class="token operator">></span><span class="token punctuation">;</span> <span class="token comment" spellcheck="true">// {name: string;age: number;}</span>type Parameters<span class="token operator">&lt;</span>T <span class="token keyword">extends</span> <span class="token punctuation">(</span><span class="token punctuation">(</span><span class="token operator">...</span>args<span class="token punctuation">:</span> <span class="token keyword">any</span><span class="token punctuation">[</span><span class="token punctuation">]</span><span class="token punctuation">)</span> <span class="token operator">=</span><span class="token operator">></span> <span class="token keyword">any</span><span class="token punctuation">)</span><span class="token operator">></span> <span class="token operator">=</span> T <span class="token keyword">extends</span> <span class="token punctuation">(</span><span class="token operator">...</span>args<span class="token punctuation">:</span> infer P<span class="token punctuation">)</span> <span class="token operator">=</span><span class="token operator">></span> <span class="token keyword">any</span> <span class="token operator">?</span> P <span class="token punctuation">:</span> <span class="token keyword">any</span>type MyParameters <span class="token operator">=</span> Parameters<span class="token operator">&lt;</span><span class="token keyword">typeof</span> getSchool<span class="token operator">></span><span class="token punctuation">;</span> <span class="token comment" spellcheck="true">// [x: string, y: number]</span><span class="token comment" spellcheck="true">// ------------</span><span class="token keyword">class</span> <span class="token class-name">Person</span> <span class="token punctuation">{</span>    <span class="token keyword">constructor</span><span class="token punctuation">(</span>name<span class="token punctuation">:</span><span class="token keyword">string</span><span class="token punctuation">)</span><span class="token punctuation">{</span><span class="token punctuation">}</span><span class="token punctuation">}</span>type ConstructorParameters<span class="token operator">&lt;</span>T <span class="token keyword">extends</span> <span class="token class-name">new</span> <span class="token punctuation">(</span><span class="token operator">...</span>args<span class="token punctuation">:</span><span class="token keyword">any</span><span class="token punctuation">[</span><span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token operator">=</span><span class="token operator">></span> <span class="token keyword">any</span><span class="token operator">></span> <span class="token operator">=</span> T <span class="token keyword">extends</span> <span class="token class-name">new</span> <span class="token punctuation">(</span><span class="token operator">...</span>args<span class="token punctuation">:</span>infer CP<span class="token punctuation">)</span><span class="token operator">=</span><span class="token operator">></span> <span class="token keyword">any</span> <span class="token operator">?</span> CP<span class="token punctuation">:</span><span class="token keyword">any</span>type MyConstructorParameters <span class="token operator">=</span> ConstructorParameters<span class="token operator">&lt;</span><span class="token keyword">typeof</span> Person<span class="token operator">></span> <span class="token comment" spellcheck="true">// [name: string]</span></code></pre><h4 id="其他内置类型"><a href="#其他内置类型" class="headerlink" title="其他内置类型"></a>其他内置类型</h4><ul><li>Partial: 表示选项可以是选填的 , 深度递归 ，默认不是深度递归</li><li>Required -? 去掉可选</li><li>Readonly 全部只读</li><li>Pick 精挑细选 （对象里选属性） extract 抽离可用的 （类型中选择类型）</li><li>Omit 忽略属性</li></ul><pre class=" language-typescript"><code class="language-typescript"><span class="token keyword">interface</span> <span class="token class-name">ICompany</span> <span class="token punctuation">{</span>    name<span class="token punctuation">:</span> <span class="token keyword">string</span><span class="token punctuation">,</span>    address<span class="token punctuation">:</span> <span class="token keyword">string</span><span class="token punctuation">}</span><span class="token keyword">interface</span> <span class="token class-name">IPerson</span> <span class="token punctuation">{</span>    name<span class="token operator">?</span><span class="token punctuation">:</span> <span class="token keyword">string</span><span class="token punctuation">,</span>    age<span class="token punctuation">:</span> <span class="token keyword">number</span><span class="token punctuation">,</span>    company<span class="token operator">?</span><span class="token punctuation">:</span> ICompany<span class="token punctuation">}</span><span class="token comment" spellcheck="true">// 内置类型默认不递归，在内置类型上扩展</span>type Partial<span class="token operator">&lt;</span>T<span class="token operator">></span> <span class="token operator">=</span> <span class="token punctuation">{</span> <span class="token punctuation">[</span>K <span class="token keyword">in</span> keyof T<span class="token punctuation">]</span><span class="token operator">?</span><span class="token punctuation">:</span> T<span class="token punctuation">[</span>K<span class="token punctuation">]</span> <span class="token keyword">extends</span> <span class="token class-name">object</span><span class="token operator">?</span>Partial<span class="token operator">&lt;</span>T<span class="token punctuation">[</span>K<span class="token punctuation">]</span><span class="token operator">></span><span class="token punctuation">:</span>T<span class="token punctuation">[</span>K<span class="token punctuation">]</span><span class="token punctuation">}</span>type MyPerson <span class="token operator">=</span> Partial<span class="token operator">&lt;</span>IPerson<span class="token operator">></span> <span class="token comment" spellcheck="true">/*MyPerson = {    name?: string | undefined;    age?: number | undefined;    company?: ICompany | undefined;}*/</span>type Required<span class="token operator">&lt;</span>T<span class="token operator">></span> <span class="token operator">=</span> <span class="token punctuation">{</span> <span class="token punctuation">[</span>K <span class="token keyword">in</span> keyof T<span class="token punctuation">]</span><span class="token operator">-</span><span class="token operator">?</span><span class="token punctuation">:</span> T<span class="token punctuation">[</span>K<span class="token punctuation">]</span> <span class="token punctuation">}</span>type MyRequired <span class="token operator">=</span> Required<span class="token operator">&lt;</span>MyPerson<span class="token operator">></span>type Readonly<span class="token operator">&lt;</span>T<span class="token operator">></span> <span class="token operator">=</span> <span class="token punctuation">{</span> readonly <span class="token punctuation">[</span>K <span class="token keyword">in</span> keyof T<span class="token punctuation">]</span><span class="token punctuation">:</span> T<span class="token punctuation">[</span>K<span class="token punctuation">]</span> <span class="token punctuation">}</span>type MyReadonly <span class="token operator">=</span> Readonly<span class="token operator">&lt;</span>IPerson<span class="token operator">></span>type Pick<span class="token operator">&lt;</span>T<span class="token punctuation">,</span> K <span class="token keyword">extends</span> <span class="token class-name">keyof</span> T<span class="token operator">></span> <span class="token operator">=</span> <span class="token punctuation">{</span> <span class="token punctuation">[</span>X <span class="token keyword">in</span> K<span class="token punctuation">]</span><span class="token punctuation">:</span> T<span class="token punctuation">[</span>X<span class="token punctuation">]</span> <span class="token punctuation">}</span><span class="token punctuation">;</span> <span class="token comment" spellcheck="true">// 挑选属性</span>type MyPick <span class="token operator">=</span> Pick<span class="token operator">&lt;</span>IPerson<span class="token punctuation">,</span> <span class="token string">'age'</span> <span class="token operator">|</span> <span class="token string">'company'</span><span class="token operator">></span><span class="token comment" spellcheck="true">// 可以忽略再加上 修改新增的属性类型值等</span>type Omit<span class="token operator">&lt;</span>T<span class="token punctuation">,</span> K <span class="token keyword">extends</span> <span class="token class-name">keyof</span> <span class="token keyword">any</span><span class="token operator">></span> <span class="token operator">=</span> Pick<span class="token operator">&lt;</span>T<span class="token punctuation">,</span> Exclude<span class="token operator">&lt;</span>keyof T<span class="token punctuation">,</span> K<span class="token operator">></span><span class="token operator">></span>type MyType <span class="token operator">=</span> Omit<span class="token operator">&lt;</span>IPerson<span class="token punctuation">,</span> <span class="token string">'name'</span><span class="token operator">></span> <span class="token operator">&amp;</span> <span class="token punctuation">{</span> name<span class="token punctuation">:</span> <span class="token keyword">string</span> <span class="token punctuation">}</span><span class="token punctuation">;</span></code></pre><h4 id="根据内置类型-自定义类型"><a href="#根据内置类型-自定义类型" class="headerlink" title="根据内置类型 自定义类型"></a>根据内置类型 自定义类型</h4><ul><li>差集 获取两个类型的差集 exclude 在一群类型中忽略掉某个类型 和 omit 对象中忽略</li><li>交集</li><li>对象合并</li></ul><pre class=" language-typescript"><code class="language-typescript"><span class="token keyword">let</span> person1 <span class="token operator">=</span> <span class="token punctuation">{</span>    name<span class="token punctuation">:</span> <span class="token string">'jiatengda'</span><span class="token punctuation">,</span>    age<span class="token punctuation">:</span> <span class="token number">12</span><span class="token punctuation">,</span>    address<span class="token punctuation">:</span> <span class="token string">'回龙观'</span><span class="token punctuation">}</span><span class="token keyword">let</span> person2<span class="token punctuation">:</span> <span class="token punctuation">{</span>    address<span class="token punctuation">:</span> <span class="token string">'回龙观'</span><span class="token punctuation">}</span>type Diff<span class="token operator">&lt;</span>T <span class="token keyword">extends</span> <span class="token class-name">object</span><span class="token punctuation">,</span> K <span class="token keyword">extends</span> <span class="token class-name">object</span><span class="token operator">></span> <span class="token operator">=</span> Omit<span class="token operator">&lt;</span>T<span class="token punctuation">,</span> keyof K<span class="token operator">></span><span class="token punctuation">;</span>type myDiff <span class="token operator">=</span> Diff<span class="token operator">&lt;</span><span class="token keyword">typeof</span> person1<span class="token punctuation">,</span> <span class="token keyword">typeof</span> person2<span class="token operator">></span><span class="token punctuation">;</span><span class="token comment" spellcheck="true">/*{    name: string;    age: number;}*/</span><span class="token comment" spellcheck="true">// 交集 </span>type Inter<span class="token operator">&lt;</span>T <span class="token keyword">extends</span> <span class="token class-name">object</span><span class="token punctuation">,</span> K <span class="token keyword">extends</span> <span class="token class-name">object</span><span class="token operator">></span> <span class="token operator">=</span> Pick<span class="token operator">&lt;</span>K<span class="token punctuation">,</span> Extract<span class="token operator">&lt;</span>keyof T<span class="token punctuation">,</span> keyof K<span class="token operator">></span><span class="token operator">></span>type myInter <span class="token operator">=</span> Inter<span class="token operator">&lt;</span><span class="token keyword">typeof</span> person1<span class="token punctuation">,</span> <span class="token keyword">typeof</span> person2<span class="token operator">></span><span class="token punctuation">;</span><span class="token comment" spellcheck="true">/*{    address: '回龙观';}*/</span><span class="token comment" spellcheck="true">// 将类型展开</span>type Compute<span class="token operator">&lt;</span>T<span class="token operator">></span> <span class="token operator">=</span> <span class="token punctuation">{</span> <span class="token punctuation">[</span>K <span class="token keyword">in</span> keyof T<span class="token punctuation">]</span><span class="token punctuation">:</span> Compute<span class="token operator">&lt;</span>T<span class="token punctuation">[</span>K<span class="token punctuation">]</span><span class="token operator">></span> <span class="token punctuation">}</span><span class="token punctuation">;</span> <span class="token comment" spellcheck="true">// 将类型展开方便提示</span><span class="token comment" spellcheck="true">//  对象合并</span>type Merge<span class="token operator">&lt;</span>T <span class="token keyword">extends</span> <span class="token class-name">object</span><span class="token punctuation">,</span> K <span class="token keyword">extends</span> <span class="token class-name">object</span><span class="token operator">></span> <span class="token operator">=</span> Omit<span class="token operator">&lt;</span>T<span class="token punctuation">,</span> keyof K<span class="token operator">></span> <span class="token operator">&amp;</span> K<span class="token punctuation">;</span>type myMerge <span class="token operator">=</span> Compute<span class="token operator">&lt;</span>Merge<span class="token operator">&lt;</span>Person1<span class="token punctuation">,</span> Person2<span class="token operator">></span><span class="token operator">></span><span class="token punctuation">;</span></code></pre><h3 id="命名空间"><a href="#命名空间" class="headerlink" title="命名空间"></a>命名空间</h3><blockquote><p>为了解决命名冲突，称之为文件内的模块，一般开发中都是使用es6module、cjs 进行模块开发<br>关键字: namespace module，两个关键字都可以声明命名空间</p></blockquote><ul><li>命名空间就是通过自执行函数来是实现的，我们一般写代码不会使用</li><li>定义的内容需要export导出</li><li>两个重名的命名空间会合并，但是合并后重名的会报错</li><li>命名空间可以进行无线嵌套</li></ul><pre class=" language-typescript"><code class="language-typescript">namespace Home1 <span class="token punctuation">{</span>    <span class="token comment" spellcheck="true">//export class Dog{} // 命名空间中的内容 需要导出</span>    <span class="token keyword">export</span> <span class="token keyword">const</span> b <span class="token operator">=</span> <span class="token string">'abc'</span>    <span class="token keyword">export</span> namespace Graden<span class="token punctuation">{</span>        <span class="token keyword">export</span> <span class="token keyword">const</span> a <span class="token operator">=</span> <span class="token string">'花园'</span><span class="token punctuation">;</span>     <span class="token punctuation">}</span><span class="token punctuation">}</span></code></pre><h3 id="声明文件"><a href="#声明文件" class="headerlink" title="声明文件"></a>声明文件</h3><blockquote><p>何时使用声明文件?</p><ul><li>引入第三方模块时，第三方模块不是用ts写的</li><li>cdn引入，声明全局变量</li><li>给内置类原型扩展属性方法时</li></ul></blockquote><blockquote><p>一般第三方模块的ts声明文件都会在@types/xxx 的包中维护</p></blockquote><pre class=" language-typescript"><code class="language-typescript"><span class="token keyword">declare</span> <span class="token keyword">let</span> a<span class="token punctuation">:</span><span class="token keyword">string</span><span class="token punctuation">;</span><span class="token keyword">declare</span> <span class="token keyword">function</span> <span class="token function">fn</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">:</span><span class="token keyword">void</span><span class="token punctuation">;</span><span class="token keyword">declare</span> namespace A <span class="token punctuation">{</span>      <span class="token keyword">const</span> a<span class="token punctuation">:</span><span class="token keyword">string</span> <span class="token comment" spellcheck="true">// declare中的内容 不需要默认导出,也不用declare了</span><span class="token punctuation">}</span><span class="token comment" spellcheck="true">// 声明模块</span><span class="token keyword">declare</span> <span class="token keyword">module</span> <span class="token string">'*.vue'</span> <span class="token punctuation">{</span>    <span class="token keyword">const</span> component<span class="token punctuation">:</span>object<span class="token punctuation">;</span>    <span class="token keyword">export</span> <span class="token keyword">default</span> component<span class="token punctuation">}</span><span class="token keyword">declare</span> <span class="token keyword">module</span> <span class="token string">'*.jpg'</span><span class="token punctuation">{</span><span class="token punctuation">}</span></code></pre><blockquote><p>声明命名可能会冲突</p><ul><li>接口同名默认会合并</li><li>命名空间也能合并</li><li>函数和命名空间能合并</li></ul></blockquote>]]></content>
      
      
      <categories>
          
          <category> 前端 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> typescript </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>Vuex</title>
      <link href="/2020/01/03/Vuex/"/>
      <url>/2020/01/03/Vuex/</url>
      
        <content type="html"><![CDATA[<blockquote><p>vuex 借助了vue的响应式，因此只能在vue中使用</p></blockquote><h3 id="store属性挂载"><a href="#store属性挂载" class="headerlink" title="$store属性挂载"></a>$store属性挂载</h3><blockquote><p>Vue.use(vuex), 会给每个组件挂载上$store属性，便于store取值和方法的调用</p><ul><li>利用全局的mixin中的beforeCreate声明周期，在每个组件挂载实例前，先挂载$store属性</li><li>Vue渲染页面时，先渲染父组件，遇到子组件才会渲染子组件</li><li>如果new Vue 传入了store属性，说明是需要给子组件挂载$store属性，如果没有，则不会挂载</li><li>判断是否有options.store , 如果有，先给根实例挂载$store, 然后渲染子组件时，在将父组件的store挂载到当前组件的实例上</li></ul></blockquote><pre class=" language-javascript"><code class="language-javascript"><span class="token keyword">export</span> <span class="token keyword">let</span> Vue<span class="token punctuation">;</span><span class="token keyword">function</span> <span class="token function">install</span><span class="token punctuation">(</span>_Vue<span class="token punctuation">)</span> <span class="token punctuation">{</span>    Vue <span class="token operator">=</span> _Vue<span class="token punctuation">;</span>    Vue<span class="token punctuation">.</span><span class="token function">mixin</span><span class="token punctuation">(</span><span class="token punctuation">{</span>        <span class="token function">beforeCreate</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">{</span> <span class="token comment" spellcheck="true">//this代表的是每个组件实例</span>            <span class="token comment" spellcheck="true">// 获取根组件上的store 将他共享给每个组件</span>            <span class="token comment" spellcheck="true">// 每个组件中都应该有$store</span>            <span class="token keyword">let</span> options<span class="token operator">=</span> <span class="token keyword">this</span><span class="token punctuation">.</span>$options<span class="token punctuation">;</span>            <span class="token keyword">if</span><span class="token punctuation">(</span>options<span class="token punctuation">.</span>store<span class="token punctuation">)</span><span class="token punctuation">{</span>                <span class="token comment" spellcheck="true">// 根</span>                <span class="token comment" spellcheck="true">// console.log('根',options.name)</span>                <span class="token keyword">this</span><span class="token punctuation">.</span>$store <span class="token operator">=</span> options<span class="token punctuation">.</span>store            <span class="token punctuation">}</span><span class="token keyword">else</span><span class="token punctuation">{</span>                <span class="token comment" spellcheck="true">// 先保证他是一个子组件，并且父亲上有$store</span>                <span class="token keyword">if</span><span class="token punctuation">(</span><span class="token keyword">this</span><span class="token punctuation">.</span>$parent <span class="token operator">&amp;&amp;</span> <span class="token keyword">this</span><span class="token punctuation">.</span>$parent<span class="token punctuation">.</span>$store<span class="token punctuation">)</span><span class="token punctuation">{</span>                    <span class="token keyword">this</span><span class="token punctuation">.</span>$store <span class="token operator">=</span> <span class="token keyword">this</span><span class="token punctuation">.</span>$parent<span class="token punctuation">.</span>$store                <span class="token punctuation">}</span>            <span class="token punctuation">}</span>        <span class="token punctuation">}</span>    <span class="token punctuation">}</span><span class="token punctuation">)</span><span class="token punctuation">}</span> <span class="token comment" spellcheck="true">// 父  this.$store -》 子 this.$store -》孙子 this.$store</span><span class="token keyword">export</span> <span class="token keyword">default</span> install</code></pre><h3 id="简单实现"><a href="#简单实现" class="headerlink" title="简单实现"></a>简单实现</h3><blockquote><p>借助Vue响应式和依赖收集的特性，简单实现</p><ul><li>state: 将state挂载到data中，当访问state属性时,代理到data中的state,进行依赖收集，修改state，通知更新(如果data中的属性以$开头，将不会把此属性代理到当前vue实例上，只能通过vm._data访问，因为我们的state建议只通过mutation更改，所以尽量少一层代理，减少用户直接更改的可能性)</li><li>getters: 借助了Vue组件中的computed选项，遍历所有的getters，重写方法，将state传入，然后挂载Vue options中的computed属性上，每次访问getters的属性，代理到computed中，实现计算属性的作用(缓存，根据state计算)</li><li>mutations: 遍历对象中的方法，将方法重写，改变this，传入state和payload</li><li>actions: 遍历对象中的方法，将方法重写，this改成当前store，传入store和payload</li></ul></blockquote><pre class=" language-javascript"><code class="language-javascript"><span class="token keyword">class</span> <span class="token class-name">Store</span> <span class="token punctuation">{</span> <span class="token comment" spellcheck="true">// new Vue.Store 缠身一个实例</span>    <span class="token function">constructor</span><span class="token punctuation">(</span>options<span class="token punctuation">)</span> <span class="token punctuation">{</span>        <span class="token comment" spellcheck="true">// 以下这些变量都是用户传递的</span>        <span class="token keyword">let</span> <span class="token punctuation">{</span> state<span class="token punctuation">,</span> getters<span class="token punctuation">,</span> mutations<span class="token punctuation">,</span> actions<span class="token punctuation">,</span> module<span class="token punctuation">,</span> strict <span class="token punctuation">}</span> <span class="token operator">=</span> options<span class="token punctuation">;</span>        <span class="token keyword">this</span><span class="token punctuation">.</span>getters <span class="token operator">=</span> <span class="token punctuation">{</span><span class="token punctuation">}</span><span class="token punctuation">;</span> <span class="token comment" spellcheck="true">// 我再取getters属性的时候 把他代理到计算属性上</span>        <span class="token keyword">const</span> computed <span class="token operator">=</span> <span class="token punctuation">{</span><span class="token punctuation">}</span><span class="token punctuation">;</span>        <span class="token function">forEach</span><span class="token punctuation">(</span>getters<span class="token punctuation">,</span> <span class="token punctuation">(</span>fn<span class="token punctuation">,</span> key<span class="token punctuation">)</span> <span class="token operator">=</span><span class="token operator">></span> <span class="token punctuation">{</span>            computed<span class="token punctuation">[</span>key<span class="token punctuation">]</span> <span class="token operator">=</span> <span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">=</span><span class="token operator">></span> <span class="token punctuation">{</span>                <span class="token keyword">return</span> <span class="token function">fn</span><span class="token punctuation">(</span><span class="token keyword">this</span><span class="token punctuation">.</span>state<span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment" spellcheck="true">// 为了保证参数是state</span>            <span class="token punctuation">}</span>            <span class="token comment" spellcheck="true">// 当我们去getters上取值 需要对computed取值</span>            Object<span class="token punctuation">.</span><span class="token function">defineProperty</span><span class="token punctuation">(</span><span class="token keyword">this</span><span class="token punctuation">.</span>getters<span class="token punctuation">,</span> key<span class="token punctuation">,</span> <span class="token punctuation">{</span>                <span class="token keyword">get</span><span class="token punctuation">:</span> <span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">=</span><span class="token operator">></span> <span class="token keyword">this</span><span class="token punctuation">.</span>_vm<span class="token punctuation">[</span>key<span class="token punctuation">]</span> <span class="token comment" spellcheck="true">// 具备了缓存的功能</span>            <span class="token punctuation">}</span><span class="token punctuation">)</span>        <span class="token punctuation">}</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token comment" spellcheck="true">// ----------</span>        <span class="token keyword">this</span><span class="token punctuation">.</span>mutations <span class="token operator">=</span> <span class="token punctuation">{</span><span class="token punctuation">}</span><span class="token punctuation">;</span>        <span class="token function">forEach</span><span class="token punctuation">(</span>mutations<span class="token punctuation">,</span> <span class="token punctuation">(</span>fn<span class="token punctuation">,</span> key<span class="token punctuation">)</span> <span class="token operator">=</span><span class="token operator">></span> <span class="token punctuation">{</span>            <span class="token keyword">this</span><span class="token punctuation">.</span>mutations<span class="token punctuation">[</span>key<span class="token punctuation">]</span> <span class="token operator">=</span> <span class="token punctuation">(</span>payload<span class="token punctuation">)</span> <span class="token operator">=</span><span class="token operator">></span> fn<span class="token punctuation">.</span><span class="token function">call</span><span class="token punctuation">(</span><span class="token keyword">this</span><span class="token punctuation">,</span> <span class="token keyword">this</span><span class="token punctuation">.</span>state<span class="token punctuation">,</span> payload<span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token punctuation">}</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token comment" spellcheck="true">// ------dispatch中派发的是动作，里面可以有异步逻辑，更改状态都要通过mutation，mutation是同步更改的-------</span>        <span class="token keyword">this</span><span class="token punctuation">.</span>actions <span class="token operator">=</span> <span class="token punctuation">{</span><span class="token punctuation">}</span>        <span class="token function">forEach</span><span class="token punctuation">(</span>actions<span class="token punctuation">,</span> <span class="token punctuation">(</span>fn<span class="token punctuation">,</span> key<span class="token punctuation">)</span> <span class="token operator">=</span><span class="token operator">></span> <span class="token punctuation">{</span>            <span class="token keyword">this</span><span class="token punctuation">.</span>actions<span class="token punctuation">[</span>key<span class="token punctuation">]</span> <span class="token operator">=</span> <span class="token punctuation">(</span>payload<span class="token punctuation">)</span> <span class="token operator">=</span><span class="token operator">></span> fn<span class="token punctuation">.</span><span class="token function">call</span><span class="token punctuation">(</span><span class="token keyword">this</span><span class="token punctuation">,</span> <span class="token keyword">this</span><span class="token punctuation">,</span> payload<span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token punctuation">}</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token comment" spellcheck="true">// 这个状态在页面渲染时需要收集对应的渲染watcher，这样状态更新才会更新视图</span>        <span class="token keyword">this</span><span class="token punctuation">.</span>_vm <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">Vue</span><span class="token punctuation">(</span><span class="token punctuation">{</span>            data<span class="token punctuation">:</span> <span class="token punctuation">{</span> <span class="token comment" spellcheck="true">// $符号开头的数据不会被挂载到实例上,但是会挂载到当前的_data上，减少了一次代理</span>                $$state<span class="token punctuation">:</span> state <span class="token comment" spellcheck="true">// 状态在哪里取值，就会收集对应的依赖</span>            <span class="token punctuation">}</span><span class="token punctuation">,</span>            computed        <span class="token punctuation">}</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token comment" spellcheck="true">// 用户组件中使用的$store = this</span>    <span class="token punctuation">}</span>    <span class="token comment" spellcheck="true">// 类的属性访问器</span>    <span class="token keyword">get</span> <span class="token function">state</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span> <span class="token comment" spellcheck="true">// this.$store.state => defineProperty中的get</span>        <span class="token comment" spellcheck="true">// 依赖于 vue的响应式原理</span>        <span class="token keyword">return</span> <span class="token keyword">this</span><span class="token punctuation">.</span>_vm<span class="token punctuation">.</span>_data<span class="token punctuation">.</span>$$state    <span class="token punctuation">}</span>    dispatch <span class="token operator">=</span> <span class="token punctuation">(</span>type<span class="token punctuation">,</span> payload<span class="token punctuation">)</span> <span class="token operator">=</span><span class="token operator">></span> <span class="token punctuation">{</span> <span class="token comment" spellcheck="true">// 根据commit还是dispatch 找对应的存储结果</span>        <span class="token keyword">this</span><span class="token punctuation">.</span>actions<span class="token punctuation">[</span>type<span class="token punctuation">]</span><span class="token punctuation">(</span>payload<span class="token punctuation">)</span>    <span class="token punctuation">}</span>    commit <span class="token operator">=</span> <span class="token punctuation">(</span>type<span class="token punctuation">,</span> payload<span class="token punctuation">)</span> <span class="token operator">=</span><span class="token operator">></span> <span class="token punctuation">{</span>        <span class="token keyword">this</span><span class="token punctuation">.</span>mutations<span class="token punctuation">[</span>type<span class="token punctuation">]</span><span class="token punctuation">(</span>payload<span class="token punctuation">)</span>    <span class="token punctuation">}</span><span class="token punctuation">}</span></code></pre><h3 id="modules-模块"><a href="#modules-模块" class="headerlink" title="modules 模块"></a>modules 模块</h3><ul><li>将传入的options格式化成父子结构（注册）</li><li>给带有namespaced = true选项的选项单独存储到一个对象中</li><li>定义成响应式</li><li>如果有插件，遍历传入的方法并执行，将Store实例传入</li><li>严格模式: 只能内置方法修改state或者用户通过mutations修改state，否则报错(_withCommittting，利用高阶函数，修改state前将_committing表示修改为true,执行完成修改成false)</li></ul><pre class=" language-javascript"><code class="language-javascript"><span class="token keyword">import</span> <span class="token punctuation">{</span> Vue <span class="token punctuation">}</span> <span class="token keyword">from</span> <span class="token string">'./install'</span><span class="token keyword">import</span> ModuleCollection <span class="token keyword">from</span> <span class="token string">'./module/module-collection'</span><span class="token punctuation">;</span><span class="token keyword">import</span> <span class="token punctuation">{</span> forEach <span class="token punctuation">}</span> <span class="token keyword">from</span> <span class="token string">'./util'</span><span class="token punctuation">;</span><span class="token keyword">function</span> <span class="token function">getNewState</span><span class="token punctuation">(</span>store<span class="token punctuation">,</span> path<span class="token punctuation">)</span> <span class="token punctuation">{</span>    <span class="token keyword">return</span> path<span class="token punctuation">.</span><span class="token function">reduce</span><span class="token punctuation">(</span><span class="token punctuation">(</span>memo<span class="token punctuation">,</span> current<span class="token punctuation">)</span> <span class="token operator">=</span><span class="token operator">></span> <span class="token punctuation">{</span>        <span class="token keyword">return</span> memo<span class="token punctuation">[</span>current<span class="token punctuation">]</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span><span class="token punctuation">,</span> store<span class="token punctuation">.</span>state<span class="token punctuation">)</span><span class="token punctuation">}</span><span class="token keyword">function</span> <span class="token function">installModule</span><span class="token punctuation">(</span>store<span class="token punctuation">,</span> rootState<span class="token punctuation">,</span> path<span class="token punctuation">,</span> module<span class="token punctuation">)</span> <span class="token punctuation">{</span> <span class="token comment" spellcheck="true">//  a/b/c/d</span>    <span class="token comment" spellcheck="true">// 需要循环当前模块的</span>    <span class="token comment" spellcheck="true">// 获取moduleCollection类的实例</span>    <span class="token keyword">let</span> ns <span class="token operator">=</span> store<span class="token punctuation">.</span>_modules<span class="token punctuation">.</span><span class="token function">getNamespace</span><span class="token punctuation">(</span>path<span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token comment" spellcheck="true">// module.state => 放到rootState对应的儿子里</span>    <span class="token keyword">if</span> <span class="token punctuation">(</span>path<span class="token punctuation">.</span>length <span class="token operator">></span> <span class="token number">0</span><span class="token punctuation">)</span> <span class="token punctuation">{</span> <span class="token comment" spellcheck="true">// 儿子模块 </span>        <span class="token comment" spellcheck="true">// 需要找到对应父模块，将状态声明上去</span>        <span class="token comment" spellcheck="true">// {name:'zf',age:'12',a:aState}</span>        <span class="token keyword">let</span> parent <span class="token operator">=</span> path<span class="token punctuation">.</span><span class="token function">slice</span><span class="token punctuation">(</span><span class="token number">0</span><span class="token punctuation">,</span> <span class="token operator">-</span><span class="token number">1</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">reduce</span><span class="token punctuation">(</span><span class="token punctuation">(</span>memo<span class="token punctuation">,</span> current<span class="token punctuation">)</span> <span class="token operator">=</span><span class="token operator">></span> <span class="token punctuation">{</span>            <span class="token keyword">return</span> memo<span class="token punctuation">[</span>current<span class="token punctuation">]</span><span class="token punctuation">;</span>        <span class="token punctuation">}</span><span class="token punctuation">,</span> rootState<span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token comment" spellcheck="true">// 对象新增属性不能导致重新更新视图</span>        store<span class="token punctuation">.</span><span class="token function">_withCommittting</span><span class="token punctuation">(</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">=</span><span class="token operator">></span> <span class="token punctuation">{</span>            Vue<span class="token punctuation">.</span><span class="token keyword">set</span><span class="token punctuation">(</span>parent<span class="token punctuation">,</span> path<span class="token punctuation">[</span>path<span class="token punctuation">.</span>length <span class="token operator">-</span> <span class="token number">1</span><span class="token punctuation">]</span><span class="token punctuation">,</span> module<span class="token punctuation">.</span>state<span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token punctuation">}</span><span class="token punctuation">)</span>    <span class="token punctuation">}</span>    module<span class="token punctuation">.</span><span class="token function">forEachGetter</span><span class="token punctuation">(</span><span class="token punctuation">(</span>fn<span class="token punctuation">,</span> key<span class="token punctuation">)</span> <span class="token operator">=</span><span class="token operator">></span> <span class="token punctuation">{</span>        store<span class="token punctuation">.</span>wrapperGetters<span class="token punctuation">[</span>ns <span class="token operator">+</span> key<span class="token punctuation">]</span> <span class="token operator">=</span> <span class="token keyword">function</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>            <span class="token keyword">return</span> fn<span class="token punctuation">.</span><span class="token function">call</span><span class="token punctuation">(</span>store<span class="token punctuation">,</span> <span class="token function">getNewState</span><span class="token punctuation">(</span>store<span class="token punctuation">,</span> path<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token punctuation">}</span>    <span class="token punctuation">}</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    module<span class="token punctuation">.</span><span class="token function">forEachMutation</span><span class="token punctuation">(</span><span class="token punctuation">(</span>fn<span class="token punctuation">,</span> key<span class="token punctuation">)</span> <span class="token operator">=</span><span class="token operator">></span> <span class="token punctuation">{</span> <span class="token comment" spellcheck="true">// {myAge:[fn,fn]}</span>        store<span class="token punctuation">.</span>mutations<span class="token punctuation">[</span>ns <span class="token operator">+</span> key<span class="token punctuation">]</span> <span class="token operator">=</span> store<span class="token punctuation">.</span>mutations<span class="token punctuation">[</span>ns <span class="token operator">+</span> key<span class="token punctuation">]</span> <span class="token operator">||</span> <span class="token punctuation">[</span><span class="token punctuation">]</span><span class="token punctuation">;</span>        store<span class="token punctuation">.</span>mutations<span class="token punctuation">[</span>ns <span class="token operator">+</span> key<span class="token punctuation">]</span><span class="token punctuation">.</span><span class="token function">push</span><span class="token punctuation">(</span><span class="token punctuation">(</span>payload<span class="token punctuation">)</span> <span class="token operator">=</span><span class="token operator">></span> <span class="token punctuation">{</span>            store<span class="token punctuation">.</span><span class="token function">_withCommittting</span><span class="token punctuation">(</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">=</span><span class="token operator">></span> <span class="token punctuation">{</span>                fn<span class="token punctuation">.</span><span class="token function">call</span><span class="token punctuation">(</span>store<span class="token punctuation">,</span> <span class="token function">getNewState</span><span class="token punctuation">(</span>store<span class="token punctuation">,</span> path<span class="token punctuation">)</span><span class="token punctuation">,</span> payload<span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment" spellcheck="true">// 先调用mutation 在执行subscirbe</span>            <span class="token punctuation">}</span><span class="token punctuation">)</span>            store<span class="token punctuation">.</span>_subscribes<span class="token punctuation">.</span><span class="token function">forEach</span><span class="token punctuation">(</span>fn <span class="token operator">=</span><span class="token operator">></span> <span class="token function">fn</span><span class="token punctuation">(</span><span class="token punctuation">{</span> type<span class="token punctuation">:</span> ns <span class="token operator">+</span> key<span class="token punctuation">,</span> payload <span class="token punctuation">}</span><span class="token punctuation">,</span> store<span class="token punctuation">.</span>state<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token punctuation">}</span><span class="token punctuation">)</span>    <span class="token punctuation">}</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    module<span class="token punctuation">.</span><span class="token function">forEachAction</span><span class="token punctuation">(</span><span class="token punctuation">(</span>fn<span class="token punctuation">,</span> key<span class="token punctuation">)</span> <span class="token operator">=</span><span class="token operator">></span> <span class="token punctuation">{</span>        store<span class="token punctuation">.</span>actions<span class="token punctuation">[</span>ns <span class="token operator">+</span> key<span class="token punctuation">]</span> <span class="token operator">=</span> store<span class="token punctuation">.</span>actions<span class="token punctuation">[</span>ns <span class="token operator">+</span> key<span class="token punctuation">]</span> <span class="token operator">||</span> <span class="token punctuation">[</span><span class="token punctuation">]</span><span class="token punctuation">;</span>        store<span class="token punctuation">.</span>actions<span class="token punctuation">[</span>ns <span class="token operator">+</span> key<span class="token punctuation">]</span><span class="token punctuation">.</span><span class="token function">push</span><span class="token punctuation">(</span><span class="token punctuation">(</span>payload<span class="token punctuation">)</span> <span class="token operator">=</span><span class="token operator">></span> <span class="token punctuation">{</span>            <span class="token keyword">return</span> fn<span class="token punctuation">.</span><span class="token function">call</span><span class="token punctuation">(</span>store<span class="token punctuation">,</span> store<span class="token punctuation">,</span> payload<span class="token punctuation">)</span>        <span class="token punctuation">}</span><span class="token punctuation">)</span>    <span class="token punctuation">}</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    module<span class="token punctuation">.</span><span class="token function">forEachChildren</span><span class="token punctuation">(</span><span class="token punctuation">(</span>child<span class="token punctuation">,</span> key<span class="token punctuation">)</span> <span class="token operator">=</span><span class="token operator">></span> <span class="token punctuation">{</span>        <span class="token function">installModule</span><span class="token punctuation">(</span>store<span class="token punctuation">,</span> rootState<span class="token punctuation">,</span> path<span class="token punctuation">.</span><span class="token function">concat</span><span class="token punctuation">(</span>key<span class="token punctuation">)</span><span class="token punctuation">,</span> child<span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token punctuation">}</span><span class="token keyword">function</span> <span class="token function">resetVM</span><span class="token punctuation">(</span>store<span class="token punctuation">,</span> state<span class="token punctuation">)</span> <span class="token punctuation">{</span>    <span class="token keyword">let</span> oldVm <span class="token operator">=</span> store<span class="token punctuation">.</span>_vm<span class="token punctuation">;</span>    store<span class="token punctuation">.</span>getters <span class="token operator">=</span> <span class="token punctuation">{</span><span class="token punctuation">}</span><span class="token punctuation">;</span>    <span class="token keyword">const</span> computed <span class="token operator">=</span> <span class="token punctuation">{</span><span class="token punctuation">}</span><span class="token punctuation">;</span>    <span class="token function">forEach</span><span class="token punctuation">(</span>store<span class="token punctuation">.</span>wrapperGetters<span class="token punctuation">,</span> <span class="token punctuation">(</span>getter<span class="token punctuation">,</span> key<span class="token punctuation">)</span> <span class="token operator">=</span><span class="token operator">></span> <span class="token punctuation">{</span>        computed<span class="token punctuation">[</span>key<span class="token punctuation">]</span> <span class="token operator">=</span> getter<span class="token punctuation">;</span>        Object<span class="token punctuation">.</span><span class="token function">defineProperty</span><span class="token punctuation">(</span>store<span class="token punctuation">.</span>getters<span class="token punctuation">,</span> key<span class="token punctuation">,</span> <span class="token punctuation">{</span>            <span class="token keyword">get</span><span class="token punctuation">:</span> <span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">=</span><span class="token operator">></span> store<span class="token punctuation">.</span>_vm<span class="token punctuation">[</span>key<span class="token punctuation">]</span>        <span class="token punctuation">}</span><span class="token punctuation">)</span>    <span class="token punctuation">}</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    store<span class="token punctuation">.</span>_vm <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">Vue</span><span class="token punctuation">(</span><span class="token punctuation">{</span>        data<span class="token punctuation">:</span> <span class="token punctuation">{</span>            $$state<span class="token punctuation">:</span> state        <span class="token punctuation">}</span><span class="token punctuation">,</span>        computed    <span class="token punctuation">}</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token keyword">if</span> <span class="token punctuation">(</span>store<span class="token punctuation">.</span>strict<span class="token punctuation">)</span> <span class="token punctuation">{</span> <span class="token comment" spellcheck="true">// 说明是严格模式我要监控状态</span>        store<span class="token punctuation">.</span>_vm<span class="token punctuation">.</span><span class="token function">$watch</span><span class="token punctuation">(</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">=</span><span class="token operator">></span> store<span class="token punctuation">.</span>_vm<span class="token punctuation">.</span>_data<span class="token punctuation">.</span>$$state<span class="token punctuation">,</span> <span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">=</span><span class="token operator">></span> <span class="token punctuation">{</span>            <span class="token comment" spellcheck="true">// 我希望状态变化后 直接就能监控到，watcher都是异步的？ 状态变化会立即执行，不是异步watcher</span>            console<span class="token punctuation">.</span><span class="token function">assert</span><span class="token punctuation">(</span>store<span class="token punctuation">.</span>_committing<span class="token punctuation">,</span> <span class="token string">'no mutate in mutation handler outside'</span><span class="token punctuation">)</span>        <span class="token punctuation">}</span><span class="token punctuation">,</span> <span class="token punctuation">{</span> deep<span class="token punctuation">:</span> <span class="token boolean">true</span><span class="token punctuation">,</span> sync<span class="token punctuation">:</span> <span class="token boolean">true</span> <span class="token punctuation">}</span><span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment" spellcheck="true">// 内部会遍历所有的属性</span>    <span class="token punctuation">}</span>    <span class="token keyword">if</span> <span class="token punctuation">(</span>oldVm<span class="token punctuation">)</span> <span class="token punctuation">{</span> <span class="token comment" spellcheck="true">// 重新创建实例后，需要将老的实例卸载掉</span>        Vue<span class="token punctuation">.</span><span class="token function">nextTick</span><span class="token punctuation">(</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">=</span><span class="token operator">></span> oldVm<span class="token punctuation">.</span><span class="token function">$destroy</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span>    <span class="token punctuation">}</span><span class="token punctuation">}</span><span class="token keyword">class</span> <span class="token class-name">Store</span> <span class="token punctuation">{</span>    <span class="token function">constructor</span><span class="token punctuation">(</span>options<span class="token punctuation">)</span> <span class="token punctuation">{</span>        <span class="token comment" spellcheck="true">// 对用户的模块进行整合 </span>        <span class="token comment" spellcheck="true">// 当前格式化完毕的数据 放到了this._modules里</span>        <span class="token keyword">this</span><span class="token punctuation">.</span>_modules <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">ModuleCollection</span><span class="token punctuation">(</span>options<span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment" spellcheck="true">// 对用户的参数进行格式化操作</span>        <span class="token keyword">this</span><span class="token punctuation">.</span>wrapperGetters <span class="token operator">=</span> <span class="token punctuation">{</span><span class="token punctuation">}</span>        <span class="token comment" spellcheck="true">// 我需要将模块中的所有的getters，mutations,actions进行收集</span>        <span class="token keyword">this</span><span class="token punctuation">.</span>mutations <span class="token operator">=</span> <span class="token punctuation">{</span><span class="token punctuation">}</span><span class="token punctuation">;</span>        <span class="token keyword">this</span><span class="token punctuation">.</span>actions <span class="token operator">=</span> <span class="token punctuation">{</span><span class="token punctuation">}</span><span class="token punctuation">;</span>        <span class="token keyword">this</span><span class="token punctuation">.</span>_subscribes <span class="token operator">=</span> <span class="token punctuation">[</span><span class="token punctuation">]</span><span class="token punctuation">;</span>        <span class="token keyword">this</span><span class="token punctuation">.</span>_committing <span class="token operator">=</span> <span class="token boolean">false</span><span class="token punctuation">;</span> <span class="token comment" spellcheck="true">// 默认不是在mutation中更改的</span>        <span class="token keyword">this</span><span class="token punctuation">.</span>strict <span class="token operator">=</span> options<span class="token punctuation">.</span>strict<span class="token punctuation">;</span>        <span class="token comment" spellcheck="true">// 没有namespace的时候 getters都放在根上 ,actions,mutations 会被合并数组</span>        <span class="token keyword">let</span> state <span class="token operator">=</span> options<span class="token punctuation">.</span>state<span class="token punctuation">;</span>        <span class="token function">installModule</span><span class="token punctuation">(</span><span class="token keyword">this</span><span class="token punctuation">,</span> state<span class="token punctuation">,</span> <span class="token punctuation">[</span><span class="token punctuation">]</span><span class="token punctuation">,</span> <span class="token keyword">this</span><span class="token punctuation">.</span>_modules<span class="token punctuation">.</span>root<span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token function">resetVM</span><span class="token punctuation">(</span><span class="token keyword">this</span><span class="token punctuation">,</span> state<span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token keyword">if</span> <span class="token punctuation">(</span>options<span class="token punctuation">.</span>plugins<span class="token punctuation">)</span> <span class="token punctuation">{</span> <span class="token comment" spellcheck="true">// 说明用户使用了插件</span>            options<span class="token punctuation">.</span>plugins<span class="token punctuation">.</span><span class="token function">forEach</span><span class="token punctuation">(</span>plugin <span class="token operator">=</span><span class="token operator">></span> <span class="token function">plugin</span><span class="token punctuation">(</span><span class="token keyword">this</span><span class="token punctuation">)</span><span class="token punctuation">)</span>        <span class="token punctuation">}</span>    <span class="token punctuation">}</span>    <span class="token function">_withCommittting</span><span class="token punctuation">(</span>fn<span class="token punctuation">)</span> <span class="token punctuation">{</span>        <span class="token keyword">this</span><span class="token punctuation">.</span>_committing <span class="token operator">=</span> <span class="token boolean">true</span><span class="token punctuation">;</span> <span class="token comment" spellcheck="true">// 如果true</span>        <span class="token function">fn</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment" spellcheck="true">// 函数是同步的 获取_commiting 就是true,如果是异步的那么就会变成false 就会打印日志</span>        <span class="token keyword">this</span><span class="token punctuation">.</span>_committing <span class="token operator">=</span> <span class="token boolean">false</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span>    <span class="token function">subscribe</span><span class="token punctuation">(</span>fn<span class="token punctuation">)</span> <span class="token punctuation">{</span>        <span class="token keyword">this</span><span class="token punctuation">.</span>_subscribes<span class="token punctuation">.</span><span class="token function">push</span><span class="token punctuation">(</span>fn<span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span>    <span class="token function">replaceState</span><span class="token punctuation">(</span>newState<span class="token punctuation">)</span> <span class="token punctuation">{</span> <span class="token comment" spellcheck="true">// 需要替换的状态</span>        <span class="token keyword">this</span><span class="token punctuation">.</span><span class="token function">_withCommittting</span><span class="token punctuation">(</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">=</span><span class="token operator">></span> <span class="token punctuation">{</span>            <span class="token keyword">this</span><span class="token punctuation">.</span>_vm<span class="token punctuation">.</span>_data<span class="token punctuation">.</span>$$state <span class="token operator">=</span> newState<span class="token punctuation">;</span> <span class="token comment" spellcheck="true">// 替换最新的状态， 赋予对象类型会被重新劫持</span>        <span class="token punctuation">}</span><span class="token punctuation">)</span>        <span class="token comment" spellcheck="true">// 虽然替换了状态，但是mutation getter中的state在初始化的时候 已经被绑定死了老的状态</span>    <span class="token punctuation">}</span>    <span class="token keyword">get</span> <span class="token function">state</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>        <span class="token keyword">return</span> <span class="token keyword">this</span><span class="token punctuation">.</span>_vm<span class="token punctuation">.</span>_data<span class="token punctuation">.</span>$$state    <span class="token punctuation">}</span>    commit <span class="token operator">=</span> <span class="token punctuation">(</span>mutationName<span class="token punctuation">,</span> payload<span class="token punctuation">)</span> <span class="token operator">=</span><span class="token operator">></span> <span class="token punctuation">{</span> <span class="token comment" spellcheck="true">// 发布</span>        <span class="token keyword">this</span><span class="token punctuation">.</span>mutations<span class="token punctuation">[</span>mutationName<span class="token punctuation">]</span> <span class="token operator">&amp;&amp;</span> <span class="token keyword">this</span><span class="token punctuation">.</span>mutations<span class="token punctuation">[</span>mutationName<span class="token punctuation">]</span><span class="token punctuation">.</span><span class="token function">forEach</span><span class="token punctuation">(</span>fn <span class="token operator">=</span><span class="token operator">></span> <span class="token function">fn</span><span class="token punctuation">(</span>payload<span class="token punctuation">)</span><span class="token punctuation">)</span>    <span class="token punctuation">}</span>    dispatch <span class="token operator">=</span> <span class="token punctuation">(</span>actionName<span class="token punctuation">,</span> payload<span class="token punctuation">)</span> <span class="token operator">=</span><span class="token operator">></span> <span class="token punctuation">{</span>        <span class="token keyword">this</span><span class="token punctuation">.</span>actions<span class="token punctuation">[</span>actionName<span class="token punctuation">]</span> <span class="token operator">&amp;&amp;</span> <span class="token keyword">this</span><span class="token punctuation">.</span>actions<span class="token punctuation">[</span>actionName<span class="token punctuation">]</span><span class="token punctuation">.</span><span class="token function">forEach</span><span class="token punctuation">(</span>fn <span class="token operator">=</span><span class="token operator">></span> <span class="token function">fn</span><span class="token punctuation">(</span>payload<span class="token punctuation">)</span><span class="token punctuation">)</span>    <span class="token punctuation">}</span>    <span class="token function">registerModule</span><span class="token punctuation">(</span>path<span class="token punctuation">,</span> module<span class="token punctuation">)</span> <span class="token punctuation">{</span> <span class="token comment" spellcheck="true">// 最终都转换成数组  register(['a','c'])</span>        <span class="token keyword">if</span> <span class="token punctuation">(</span><span class="token keyword">typeof</span> path <span class="token operator">==</span> <span class="token string">'string'</span><span class="token punctuation">)</span> path <span class="token operator">=</span> <span class="token punctuation">[</span>path<span class="token punctuation">]</span><span class="token punctuation">;</span>        <span class="token comment" spellcheck="true">// module 是用户直接写的</span>        <span class="token keyword">this</span><span class="token punctuation">.</span>_modules<span class="token punctuation">.</span><span class="token function">register</span><span class="token punctuation">(</span>path<span class="token punctuation">,</span> module<span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment" spellcheck="true">// 模块的注册, 将用户给的数据放到树中</span>        <span class="token comment" spellcheck="true">// 注册完毕后 ，在进行安装</span>        <span class="token comment" spellcheck="true">// 将用户的module 重新安装</span>        <span class="token function">installModule</span><span class="token punctuation">(</span><span class="token keyword">this</span><span class="token punctuation">,</span> <span class="token keyword">this</span><span class="token punctuation">.</span>state<span class="token punctuation">,</span> path<span class="token punctuation">,</span> module<span class="token punctuation">.</span>newModule<span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token comment" spellcheck="true">// vuex内部重新注册的话 会重新生成实例， 虽然重新安装了 ，只解决了状态的问题，但是computed就丢失了</span>        <span class="token function">resetVM</span><span class="token punctuation">(</span><span class="token keyword">this</span><span class="token punctuation">,</span> <span class="token keyword">this</span><span class="token punctuation">.</span>state<span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment" spellcheck="true">// 销毁重来</span>    <span class="token punctuation">}</span><span class="token punctuation">}</span><span class="token comment" spellcheck="true">// state getters action mutation  （modules 分层)</span><span class="token keyword">export</span> <span class="token keyword">default</span> Store<span class="token punctuation">;</span></code></pre><h3 id="动态注册mudules"><a href="#动态注册mudules" class="headerlink" title="动态注册mudules"></a>动态注册mudules</h3><blockquote><p>store.registerModule</p></blockquote><pre class=" language-javascript"><code class="language-javascript"><span class="token function">registerModule</span><span class="token punctuation">(</span>path<span class="token punctuation">,</span> module<span class="token punctuation">)</span> <span class="token punctuation">{</span> <span class="token comment" spellcheck="true">// 最终都转换成数组  register(['a','c'])</span>        <span class="token keyword">if</span> <span class="token punctuation">(</span><span class="token keyword">typeof</span> path <span class="token operator">==</span> <span class="token string">'string'</span><span class="token punctuation">)</span> path <span class="token operator">=</span> <span class="token punctuation">[</span>path<span class="token punctuation">]</span><span class="token punctuation">;</span>        <span class="token comment" spellcheck="true">// module 是用户直接写的</span>        <span class="token keyword">this</span><span class="token punctuation">.</span>_modules<span class="token punctuation">.</span><span class="token function">register</span><span class="token punctuation">(</span>path<span class="token punctuation">,</span> module<span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment" spellcheck="true">// 模块的注册, 将用户给的数据放到树中</span>        <span class="token comment" spellcheck="true">// 注册完毕后 ，在进行安装</span>        <span class="token comment" spellcheck="true">// 将用户的module 重新安装</span>        <span class="token function">installModule</span><span class="token punctuation">(</span><span class="token keyword">this</span><span class="token punctuation">,</span> <span class="token keyword">this</span><span class="token punctuation">.</span>state<span class="token punctuation">,</span> path<span class="token punctuation">,</span> module<span class="token punctuation">.</span>newModule<span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token comment" spellcheck="true">// vuex内部重新注册的话 会重新生成实例， 虽然重新安装了 ，只解决了状态的问题，但是computed就丢失了</span>        <span class="token function">resetVM</span><span class="token punctuation">(</span><span class="token keyword">this</span><span class="token punctuation">,</span> <span class="token keyword">this</span><span class="token punctuation">.</span>state<span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment" spellcheck="true">// 销毁重来</span>    <span class="token punctuation">}</span></code></pre><h3 id="map方法"><a href="#map方法" class="headerlink" title="map方法"></a>map方法</h3><pre class=" language-javascript"><code class="language-javascript"><span class="token keyword">function</span> <span class="token function">mapState</span><span class="token punctuation">(</span>stateList<span class="token punctuation">)</span> <span class="token punctuation">{</span>    <span class="token keyword">let</span> obj <span class="token operator">=</span> <span class="token punctuation">{</span><span class="token punctuation">}</span><span class="token punctuation">;</span>    <span class="token keyword">for</span> <span class="token punctuation">(</span><span class="token keyword">let</span> i <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span> i <span class="token operator">&lt;</span> stateList<span class="token punctuation">.</span>length<span class="token punctuation">;</span> i<span class="token operator">++</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>      <span class="token keyword">let</span> stateName <span class="token operator">=</span> stateList<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">;</span>      obj<span class="token punctuation">[</span>stateName<span class="token punctuation">]</span> <span class="token operator">=</span> <span class="token keyword">function</span> <span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>        <span class="token keyword">return</span> <span class="token keyword">this</span><span class="token punctuation">.</span>$store<span class="token punctuation">.</span>state<span class="token punctuation">[</span>stateName<span class="token punctuation">]</span><span class="token punctuation">;</span>      <span class="token punctuation">}</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span>    <span class="token keyword">return</span> obj<span class="token punctuation">;</span>  <span class="token punctuation">}</span>  <span class="token keyword">function</span> <span class="token function">mapGetters</span><span class="token punctuation">(</span>gettersList<span class="token punctuation">)</span> <span class="token punctuation">{</span>    <span class="token keyword">let</span> obj <span class="token operator">=</span> <span class="token punctuation">{</span><span class="token punctuation">}</span><span class="token punctuation">;</span>    <span class="token keyword">for</span> <span class="token punctuation">(</span><span class="token keyword">let</span> i <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span> i <span class="token operator">&lt;</span> gettersList<span class="token punctuation">.</span>length<span class="token punctuation">;</span> i<span class="token operator">++</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>      <span class="token keyword">let</span> getterName <span class="token operator">=</span> gettersList<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">;</span>      obj<span class="token punctuation">[</span>getterName<span class="token punctuation">]</span> <span class="token operator">=</span> <span class="token keyword">function</span> <span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>        <span class="token keyword">return</span> <span class="token keyword">this</span><span class="token punctuation">.</span>$store<span class="token punctuation">.</span>getters<span class="token punctuation">[</span>getterName<span class="token punctuation">]</span><span class="token punctuation">;</span>      <span class="token punctuation">}</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span>    <span class="token keyword">return</span> obj<span class="token punctuation">;</span>  <span class="token punctuation">}</span>  <span class="token keyword">function</span> <span class="token function">mapMutations</span><span class="token punctuation">(</span>mutationList<span class="token punctuation">)</span> <span class="token punctuation">{</span>    <span class="token keyword">let</span> obj <span class="token operator">=</span> <span class="token punctuation">{</span><span class="token punctuation">}</span><span class="token punctuation">;</span>    <span class="token keyword">for</span> <span class="token punctuation">(</span><span class="token keyword">let</span> i <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span> i <span class="token operator">&lt;</span> mutationList<span class="token punctuation">.</span>length<span class="token punctuation">;</span> i<span class="token operator">++</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>      obj<span class="token punctuation">[</span>mutationList<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">]</span> <span class="token operator">=</span> <span class="token keyword">function</span> <span class="token punctuation">(</span>payload<span class="token punctuation">)</span> <span class="token punctuation">{</span>        <span class="token keyword">this</span><span class="token punctuation">.</span>$store<span class="token punctuation">.</span><span class="token function">commit</span><span class="token punctuation">(</span>mutationList<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">,</span> payload<span class="token punctuation">)</span><span class="token punctuation">;</span>      <span class="token punctuation">}</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span>    <span class="token keyword">return</span> obj<span class="token punctuation">;</span>  <span class="token punctuation">}</span>  <span class="token keyword">function</span> <span class="token function">mapActions</span><span class="token punctuation">(</span>actionList<span class="token punctuation">)</span> <span class="token punctuation">{</span>    <span class="token keyword">let</span> obj <span class="token operator">=</span> <span class="token punctuation">{</span><span class="token punctuation">}</span><span class="token punctuation">;</span>    <span class="token keyword">for</span> <span class="token punctuation">(</span><span class="token keyword">let</span> i <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span> i <span class="token operator">&lt;</span> actionList<span class="token punctuation">.</span>length<span class="token punctuation">;</span> i<span class="token operator">++</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>      obj<span class="token punctuation">[</span>actionList<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">]</span> <span class="token operator">=</span> <span class="token keyword">function</span> <span class="token punctuation">(</span>payload<span class="token punctuation">)</span> <span class="token punctuation">{</span>        <span class="token keyword">this</span><span class="token punctuation">.</span>$store<span class="token punctuation">.</span><span class="token function">dispatch</span><span class="token punctuation">(</span>actionList<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">,</span> payload<span class="token punctuation">)</span><span class="token punctuation">;</span>      <span class="token punctuation">}</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span>    <span class="token keyword">return</span> obj<span class="token punctuation">;</span>  <span class="token punctuation">}</span></code></pre><h3 id="vuex-plugins"><a href="#vuex-plugins" class="headerlink" title="vuex plugins"></a>vuex plugins</h3><blockquote><p>插件实现原理:</p><ul><li>new Store会ch查看是否有plugins选项，如果有，遍历执行所有插件并传入store</li><li>在编写plugins可以通过store.subscribe(fn)</li><li>在每次mutations执行完毕后会遍历_subscribes执行内部订阅的所有方法</li><li>每个fn内部回把store，修改后的state,payload传入fn中并且执行</li></ul></blockquote><pre class=" language-javascript"><code class="language-javascript"><span class="token comment" spellcheck="true">// 编写plugin</span><span class="token keyword">function</span> <span class="token function">logger</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>    <span class="token keyword">return</span> <span class="token keyword">function</span><span class="token punctuation">(</span>store<span class="token punctuation">)</span> <span class="token punctuation">{</span>        <span class="token keyword">let</span> prevState <span class="token operator">=</span> JSON<span class="token punctuation">.</span><span class="token function">stringify</span><span class="token punctuation">(</span>store<span class="token punctuation">.</span>state<span class="token punctuation">)</span><span class="token punctuation">;</span>        store<span class="token punctuation">.</span><span class="token function">subscribe</span><span class="token punctuation">(</span><span class="token punctuation">(</span>mutation<span class="token punctuation">,</span> state<span class="token punctuation">)</span> <span class="token operator">=</span><span class="token operator">></span> <span class="token punctuation">{</span> <span class="token comment" spellcheck="true">// 所有的更新操作都基于mutation （状态变化都是通过mutation的）</span>            <span class="token comment" spellcheck="true">// 如果直接手动的更改状态 此scbscribe是不会执行  commit()</span>            console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span><span class="token string">'prevState:'</span> <span class="token operator">+</span> prevState<span class="token punctuation">)</span><span class="token punctuation">;</span>            console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span><span class="token string">'mutation:'</span> <span class="token operator">+</span> JSON<span class="token punctuation">.</span><span class="token function">stringify</span><span class="token punctuation">(</span>mutation<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>            console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span><span class="token string">'currentState:'</span> <span class="token operator">+</span> JSON<span class="token punctuation">.</span><span class="token function">stringify</span><span class="token punctuation">(</span>state<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>            prevState <span class="token operator">=</span> JSON<span class="token punctuation">.</span><span class="token function">stringify</span><span class="token punctuation">(</span>state<span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token punctuation">}</span><span class="token punctuation">)</span>    <span class="token punctuation">}</span><span class="token punctuation">}</span><span class="token comment" spellcheck="true">// 调用plugin</span><span class="token keyword">if</span> <span class="token punctuation">(</span>options<span class="token punctuation">.</span>plugins<span class="token punctuation">)</span> <span class="token punctuation">{</span> <span class="token comment" spellcheck="true">// 说明用户使用了插件</span>    options<span class="token punctuation">.</span>plugins<span class="token punctuation">.</span><span class="token function">forEach</span><span class="token punctuation">(</span>plugin <span class="token operator">=</span><span class="token operator">></span> <span class="token function">plugin</span><span class="token punctuation">(</span><span class="token keyword">this</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">}</span><span class="token comment" spellcheck="true">// 执行mutations后执行执行订阅方法(发布)</span>store<span class="token punctuation">.</span>mutations<span class="token punctuation">[</span>ns <span class="token operator">+</span> key<span class="token punctuation">]</span> <span class="token operator">=</span> store<span class="token punctuation">.</span>mutations<span class="token punctuation">[</span>ns <span class="token operator">+</span> key<span class="token punctuation">]</span> <span class="token operator">||</span> <span class="token punctuation">[</span><span class="token punctuation">]</span><span class="token punctuation">;</span>store<span class="token punctuation">.</span>mutations<span class="token punctuation">[</span>ns <span class="token operator">+</span> key<span class="token punctuation">]</span><span class="token punctuation">.</span><span class="token function">push</span><span class="token punctuation">(</span><span class="token punctuation">(</span>payload<span class="token punctuation">)</span> <span class="token operator">=</span><span class="token operator">></span> <span class="token punctuation">{</span>    store<span class="token punctuation">.</span><span class="token function">_withCommittting</span><span class="token punctuation">(</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">=</span><span class="token operator">></span> <span class="token punctuation">{</span>        fn<span class="token punctuation">.</span><span class="token function">call</span><span class="token punctuation">(</span>store<span class="token punctuation">,</span> <span class="token function">getNewState</span><span class="token punctuation">(</span>store<span class="token punctuation">,</span> path<span class="token punctuation">)</span><span class="token punctuation">,</span> payload<span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment" spellcheck="true">// 先调用mutation 在执行subscirbe</span>    <span class="token punctuation">}</span><span class="token punctuation">)</span>    store<span class="token punctuation">.</span>_subscribes<span class="token punctuation">.</span><span class="token function">forEach</span><span class="token punctuation">(</span>fn <span class="token operator">=</span><span class="token operator">></span> <span class="token function">fn</span><span class="token punctuation">(</span><span class="token punctuation">{</span> type<span class="token punctuation">:</span> ns <span class="token operator">+</span> key<span class="token punctuation">,</span> payload <span class="token punctuation">}</span><span class="token punctuation">,</span> store<span class="token punctuation">.</span>state<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token punctuation">}</span><span class="token punctuation">)</span></code></pre>]]></content>
      
      
      <categories>
          
          <category> 前端 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> Vue </tag>
            
            <tag> Vuex </tag>
            
            <tag> 源码 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>vue源码理解</title>
      <link href="/2019/12/21/vueSource/"/>
      <url>/2019/12/21/vueSource/</url>
      
        <content type="html"><![CDATA[<blockquote><p>使用Vue也大概有一年多了，觉得Vue使用起来非常的简单，轻量，出于好奇，在github上将代码拉下来剖解分析。</p></blockquote><h3 id="0-源码目录结构"><a href="#0-源码目录结构" class="headerlink" title="0. 源码目录结构"></a>0. 源码目录结构</h3><ul><li>.circleci 持续集成</li><li>benchmarks 性能评测</li><li>dist 输出目录</li><li>examples 案例</li><li>flow flow声明文件</li><li>packages vue中的包</li><li>scripts 工程化</li><li>src 源码目录</li><li>test 测试相关</li><li>types ts声明文件</li></ul><blockquote><p>为了直观的查看目录我们可以通过tree命令来查看src目录下的文件夹。先大概对源码的结构有一个大体的认识。</p><pre class=" language-javascript"><code class="language-javascript"></code></pre></blockquote><p>├─compiler       # 编译的相关逻辑<br>│  ├─codegen<br>│  ├─directives<br>│  └─parser<br>├─core           # vue核心代码<br>│  ├─components  # vue中的内置组件 keep-alive<br>│  ├─global-api  # vue中的全局api<br>│  ├─instance    # vue中的核心逻辑<br>│  ├─observer    # vue中的响应式原理<br>│  ├─util<br>│  └─vdom        # vue中的虚拟dom模块<br>├─platforms      # 平台代码<br>│  ├─web         # web逻辑 - vue<br>│  │  ├─compiler<br>│  │  ├─runtime<br>│  │  ├─server<br>│  │  └─util<br>│  └─weex        # weex逻辑 - app<br>│      ├─compiler<br>│      ├─runtime<br>│      └─util<br>├─server         # 服务端渲染模块<br>├─sfc            # 用于编译.vue文件<br>└─shared         # 共享的方法和常量</p><pre><code>&gt; 通过package.json中scripts查看代码是如何运行的```json&quot;build&quot;: &quot;node scripts/build.js&quot;,  &quot;build:ssr&quot;: &quot;npm run build -- web-runtime-cjs,web-server-renderer&quot;,&quot;build:weex&quot;: &quot;npm run build -- weex&quot;,</code></pre><blockquote><p>核心是使用node执行 scripts/build.js,通过传递参数来实现不同的打包结果，这里的–代表后面的内容是参数。</p><pre class=" language-javascript"><code class="language-javascript"><span class="token comment" spellcheck="true">// ------ build.js</span><span class="token comment" spellcheck="true">// 1.获取不同的打包的配置 </span><span class="token keyword">let</span> builds <span class="token operator">=</span> <span class="token function">require</span><span class="token punctuation">(</span><span class="token string">'./config'</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">getAllBuilds</span><span class="token punctuation">(</span><span class="token punctuation">)</span></code></pre></blockquote><p>// 2.根据执行打包时的参数进行过滤<br>if (process.argv[2]) {<br>  const filters = process.argv[2].split(‘,’)<br>  builds = builds.filter(b =&gt; {<br>    return filters.some(f =&gt; b.output.file.indexOf(f) &gt; -1 || b._name.indexOf(f) &gt; -1)<br>  })<br>} else {<br>  // 默认不打包weex相关代码<br>  builds = builds.filter(b =&gt; {<br>    return b.output.file.indexOf(‘weex’) === -1<br>  })<br>}<br>// 3.进行打包<br>build(builds)</p><pre><code>&gt; 打包入口: 我们可以通过打包的配置找到我们需要的入口，这两个区别在于是否涵盖compiler逻辑，我们在开发时一般使用的是entry-runtime,可以减小vue的体积，但是同样在开发时也不能再使用template,.vue文件中的template是通过vue-loader来进行编译的，和我们所说的compiler无关。```javascriptsrc/platforms/web/entry-runtime.jssrc/platforms/web/entry-runtime-with-compiler.js</code></pre><h4 id="源码调试"><a href="#源码调试" class="headerlink" title="源码调试"></a>源码调试</h4><blockquote><p>通过vue编写源码方式调试</p><ul><li>下载源代码</li><li>查看package.json scripts打包命令</li><li>npm run dev</li><li>编写代码debugger</li><li>可以在打包命令后面加–sourcemap 调试源代码</li></ul></blockquote><blockquote><p>通过cli项目调试</p><ul><li>vue inspect 查看vue打包后的js文件(vue.runtime.esm.js)</li><li>在文件中找到需要调试的方法debugger</li></ul></blockquote><h3 id="1-初始化"><a href="#1-初始化" class="headerlink" title="1. 初始化"></a>1. 初始化</h3><blockquote><p>initState: 将挂载的data、watch、computed等数据进行劫持</p><pre class=" language-javascript"><code class="language-javascript"><span class="token keyword">let</span> observe <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">Observe</span><span class="token punctuation">(</span>data<span class="token punctuation">)</span><span class="token punctuation">;</span></code></pre><ul><li>如果data是数组类型, 重写data原型方法(对能改变原数组的方法进行重写，Object.create(Array.prototype)) <ul><li>observeArray 遍历数组，调用observe</li><li>如果调用数组新增的方法，对新增的数据进行劫持</li></ul></li><li>如果是对象<ul><li>this.walk(data), 遍历对象调用defineReactive(data, key, data[key])方法(Object.defineProperty 数据劫持)</li><li>如果 set 值是对象，observe 重新对这个对象进行数据劫持</li></ul></li></ul></blockquote><h3 id="2-响应式原理"><a href="#2-响应式原理" class="headerlink" title="2. 响应式原理"></a>2. 响应式原理</h3><blockquote><p>响应式原理: 每个属性会对应一个Dep实例，get当前属性值，对应的dep会收集渲染watcher，set值时，会通知收集的watcher调用渲染方法，重新渲染页面。如果是数组的话，会给数组增加dep属性，存储Dep实例，并收集watcher，当调用数组特殊方法时，通知dep内的watcher调用渲染方法，重新渲染页面.</p></blockquote><pre class=" language-javascript"><code class="language-javascript"><span class="token comment" spellcheck="true">//  Watch类</span><span class="token keyword">import</span> <span class="token punctuation">{</span> popTarget<span class="token punctuation">,</span> pushTarget <span class="token punctuation">}</span> <span class="token keyword">from</span> <span class="token string">"./dep"</span><span class="token punctuation">;</span><span class="token keyword">import</span> <span class="token punctuation">{</span> queueWatcher <span class="token punctuation">}</span> <span class="token keyword">from</span> <span class="token string">"./scheduler"</span><span class="token punctuation">;</span><span class="token keyword">let</span> id <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span><span class="token keyword">class</span> <span class="token class-name">Watcher</span> <span class="token punctuation">{</span>    <span class="token function">constructor</span><span class="token punctuation">(</span>vm<span class="token punctuation">,</span>exprOrFn<span class="token punctuation">,</span>cb<span class="token punctuation">,</span>options<span class="token punctuation">)</span><span class="token punctuation">{</span>        <span class="token keyword">this</span><span class="token punctuation">.</span>vm <span class="token operator">=</span> vm<span class="token punctuation">;</span>        <span class="token keyword">this</span><span class="token punctuation">.</span>exprOrFn <span class="token operator">=</span> exprOrFn<span class="token punctuation">;</span>        <span class="token keyword">this</span><span class="token punctuation">.</span>cb <span class="token operator">=</span> cb<span class="token punctuation">;</span>        <span class="token keyword">this</span><span class="token punctuation">.</span>options <span class="token operator">=</span> options<span class="token punctuation">;</span>        <span class="token keyword">this</span><span class="token punctuation">.</span>id <span class="token operator">=</span> id<span class="token operator">++</span><span class="token punctuation">;</span>        <span class="token keyword">this</span><span class="token punctuation">.</span>getter <span class="token operator">=</span> exprOrFn<span class="token punctuation">;</span>         <span class="token keyword">this</span><span class="token punctuation">.</span>deps <span class="token operator">=</span> <span class="token punctuation">[</span><span class="token punctuation">]</span><span class="token punctuation">;</span>         <span class="token keyword">this</span><span class="token punctuation">.</span>depsId <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">Set</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token keyword">this</span><span class="token punctuation">.</span><span class="token keyword">get</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment" spellcheck="true">// 默认初始化 要取值</span>    <span class="token punctuation">}</span>    <span class="token keyword">get</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">{</span>        <span class="token function">pushTarget</span><span class="token punctuation">(</span><span class="token keyword">this</span><span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment" spellcheck="true">// Dep.target = watcher</span>        <span class="token keyword">this</span><span class="token punctuation">.</span><span class="token function">getter</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>         <span class="token function">popTarget</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>     <span class="token punctuation">}</span>    <span class="token function">update</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">{</span>       <span class="token function">queueWatcher</span><span class="token punctuation">(</span><span class="token keyword">this</span><span class="token punctuation">)</span><span class="token punctuation">;</span>     <span class="token punctuation">}</span>    <span class="token function">run</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">{</span>        <span class="token keyword">this</span><span class="token punctuation">.</span><span class="token keyword">get</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span>    <span class="token function">addDep</span><span class="token punctuation">(</span>dep<span class="token punctuation">)</span><span class="token punctuation">{</span>        <span class="token keyword">let</span> id <span class="token operator">=</span> dep<span class="token punctuation">.</span>id<span class="token punctuation">;</span>        <span class="token keyword">if</span><span class="token punctuation">(</span><span class="token operator">!</span><span class="token keyword">this</span><span class="token punctuation">.</span>depsId<span class="token punctuation">.</span><span class="token function">has</span><span class="token punctuation">(</span>id<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">{</span>            <span class="token keyword">this</span><span class="token punctuation">.</span>depsId<span class="token punctuation">.</span><span class="token function">add</span><span class="token punctuation">(</span>id<span class="token punctuation">)</span><span class="token punctuation">;</span>            <span class="token keyword">this</span><span class="token punctuation">.</span>deps<span class="token punctuation">.</span><span class="token function">push</span><span class="token punctuation">(</span>dep<span class="token punctuation">)</span><span class="token punctuation">;</span>            dep<span class="token punctuation">.</span><span class="token function">addSub</span><span class="token punctuation">(</span><span class="token keyword">this</span><span class="token punctuation">)</span>        <span class="token punctuation">}</span>    <span class="token punctuation">}</span><span class="token punctuation">}</span><span class="token keyword">export</span> <span class="token keyword">default</span> Watcher</code></pre><pre class=" language-javascript"><code class="language-javascript"><span class="token comment" spellcheck="true">// Dep类</span><span class="token keyword">let</span> id <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span><span class="token keyword">class</span> <span class="token class-name">Dep</span><span class="token punctuation">{</span> <span class="token comment" spellcheck="true">// 每个属性我都给他分配一个dep，dep可以来存放watcher， watcher中还要存放这个dep</span>    <span class="token function">constructor</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">{</span>        <span class="token keyword">this</span><span class="token punctuation">.</span>id <span class="token operator">=</span> id<span class="token operator">++</span><span class="token punctuation">;</span>        <span class="token keyword">this</span><span class="token punctuation">.</span>subs <span class="token operator">=</span> <span class="token punctuation">[</span><span class="token punctuation">]</span><span class="token punctuation">;</span> <span class="token comment" spellcheck="true">// 用来存放watcher的</span>    <span class="token punctuation">}</span>    <span class="token function">depend</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">{</span>        <span class="token keyword">if</span><span class="token punctuation">(</span>Dep<span class="token punctuation">.</span>target<span class="token punctuation">)</span><span class="token punctuation">{</span>            Dep<span class="token punctuation">.</span>target<span class="token punctuation">.</span><span class="token function">addDep</span><span class="token punctuation">(</span><span class="token keyword">this</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token punctuation">}</span>    <span class="token punctuation">}</span>    <span class="token function">addSub</span><span class="token punctuation">(</span>watcher<span class="token punctuation">)</span><span class="token punctuation">{</span>        <span class="token keyword">this</span><span class="token punctuation">.</span>subs<span class="token punctuation">.</span><span class="token function">push</span><span class="token punctuation">(</span>watcher<span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span>    <span class="token function">notify</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">{</span>        <span class="token keyword">this</span><span class="token punctuation">.</span>subs<span class="token punctuation">.</span><span class="token function">forEach</span><span class="token punctuation">(</span>watcher<span class="token operator">=</span><span class="token operator">></span>watcher<span class="token punctuation">.</span><span class="token function">update</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span><span class="token punctuation">}</span>Dep<span class="token punctuation">.</span>target <span class="token operator">=</span> <span class="token keyword">null</span><span class="token punctuation">;</span> <span class="token comment" spellcheck="true">// 一份</span><span class="token keyword">export</span> <span class="token keyword">function</span> <span class="token function">pushTarget</span><span class="token punctuation">(</span>watcher<span class="token punctuation">)</span> <span class="token punctuation">{</span>    Dep<span class="token punctuation">.</span>target <span class="token operator">=</span> watcher<span class="token punctuation">;</span><span class="token punctuation">}</span><span class="token keyword">export</span> <span class="token keyword">function</span> <span class="token function">popTarget</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">{</span>    Dep<span class="token punctuation">.</span>target <span class="token operator">=</span> <span class="token keyword">null</span><span class="token punctuation">}</span><span class="token keyword">export</span> <span class="token keyword">default</span> Dep</code></pre><pre class=" language-javascript"><code class="language-javascript"><span class="token keyword">import</span> <span class="token punctuation">{</span> isObject <span class="token punctuation">}</span> <span class="token keyword">from</span> <span class="token string">"../utils"</span><span class="token punctuation">;</span><span class="token keyword">import</span> <span class="token punctuation">{</span> arrayMethods <span class="token punctuation">}</span> <span class="token keyword">from</span> <span class="token string">"./array"</span><span class="token punctuation">;</span><span class="token keyword">import</span> Dep <span class="token keyword">from</span> <span class="token string">'./dep'</span><span class="token comment" spellcheck="true">// 1.如果数据是对象 会将对象不停的递归 进行劫持</span><span class="token comment" spellcheck="true">// 2.如果是数组，会劫持数组的方法，并对数组中不是基本数据类型的进行检测</span><span class="token comment" spellcheck="true">// 检测数据变化 类有类型 ， 对象无类型</span><span class="token comment" spellcheck="true">// 如果给对象新增一个属性不会触发视图更新  (给对象本身也增加一个dep，dep中存watcher，如果增加一个属性后，我就手动的触发watcher的更新)</span><span class="token keyword">class</span> <span class="token class-name">Observer</span> <span class="token punctuation">{</span>     <span class="token function">constructor</span><span class="token punctuation">(</span>data<span class="token punctuation">)</span> <span class="token punctuation">{</span> <span class="token comment" spellcheck="true">// 对对象中的所有属性 进行劫持</span>        <span class="token keyword">this</span><span class="token punctuation">.</span>dep <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">Dep</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment" spellcheck="true">// 数据可能是数组或者对象</span>        Object<span class="token punctuation">.</span><span class="token function">defineProperty</span><span class="token punctuation">(</span>data<span class="token punctuation">,</span><span class="token string">'__ob__'</span><span class="token punctuation">,</span><span class="token punctuation">{</span>            value<span class="token punctuation">:</span><span class="token keyword">this</span><span class="token punctuation">,</span>            enumerable<span class="token punctuation">:</span><span class="token boolean">false</span> <span class="token comment" spellcheck="true">// 不可枚举的</span>        <span class="token punctuation">}</span><span class="token punctuation">)</span>        <span class="token comment" spellcheck="true">// data.__ob__ = this; // 所有被劫持过的属性都有__ob__ </span>        <span class="token keyword">if</span><span class="token punctuation">(</span>Array<span class="token punctuation">.</span><span class="token function">isArray</span><span class="token punctuation">(</span>data<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">{</span>  <span class="token comment" spellcheck="true">// 我希望数组的变化可以触发视图更新？</span>            <span class="token comment" spellcheck="true">// 数组劫持的逻辑</span>            <span class="token comment" spellcheck="true">// 对数组原来的方法进行改写， 切片编程  高阶函数</span>            data<span class="token punctuation">.</span>__proto__ <span class="token operator">=</span> arrayMethods<span class="token punctuation">;</span>            <span class="token comment" spellcheck="true">// 如果数组中的数据是对象类型，需要监控对象的变化</span>            <span class="token keyword">this</span><span class="token punctuation">.</span><span class="token function">observeArray</span><span class="token punctuation">(</span>data<span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token punctuation">}</span><span class="token keyword">else</span><span class="token punctuation">{</span>            <span class="token keyword">this</span><span class="token punctuation">.</span><span class="token function">walk</span><span class="token punctuation">(</span>data<span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment" spellcheck="true">//对象劫持的逻辑 </span>        <span class="token punctuation">}</span>    <span class="token punctuation">}</span>    <span class="token function">observeArray</span><span class="token punctuation">(</span>data<span class="token punctuation">)</span><span class="token punctuation">{</span> <span class="token comment" spellcheck="true">// 对我们数组的数组 和 数组中的对象再次劫持 递归了</span>        <span class="token comment" spellcheck="true">// [{a:1},{b:2}]</span>        <span class="token comment" spellcheck="true">// 如果数组里放的是对象类型，也做了观测，JSON.stringify() 也做了收集一来了</span>        data<span class="token punctuation">.</span><span class="token function">forEach</span><span class="token punctuation">(</span>item<span class="token operator">=</span><span class="token operator">></span><span class="token function">observe</span><span class="token punctuation">(</span>item<span class="token punctuation">)</span><span class="token punctuation">)</span>    <span class="token punctuation">}</span>    <span class="token function">walk</span><span class="token punctuation">(</span>data<span class="token punctuation">)</span> <span class="token punctuation">{</span> <span class="token comment" spellcheck="true">// 对象</span>        Object<span class="token punctuation">.</span><span class="token function">keys</span><span class="token punctuation">(</span>data<span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">forEach</span><span class="token punctuation">(</span>key <span class="token operator">=</span><span class="token operator">></span> <span class="token punctuation">{</span>            <span class="token function">defineReactive</span><span class="token punctuation">(</span>data<span class="token punctuation">,</span> key<span class="token punctuation">,</span> data<span class="token punctuation">[</span>key<span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token punctuation">}</span><span class="token punctuation">)</span>    <span class="token punctuation">}</span><span class="token punctuation">}</span><span class="token keyword">function</span> <span class="token function">dependArray</span><span class="token punctuation">(</span>value<span class="token punctuation">)</span><span class="token punctuation">{</span>    <span class="token keyword">for</span><span class="token punctuation">(</span><span class="token keyword">let</span> i <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span> i <span class="token operator">&lt;</span> value<span class="token punctuation">.</span>length<span class="token punctuation">;</span>i<span class="token operator">++</span><span class="token punctuation">)</span><span class="token punctuation">{</span>        <span class="token keyword">let</span> current <span class="token operator">=</span> value<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">;</span> <span class="token comment" spellcheck="true">// current是数组里面的数组 [[[[[]]]]]</span>        current<span class="token punctuation">.</span>__ob__ <span class="token operator">&amp;&amp;</span>  current<span class="token punctuation">.</span>__ob__<span class="token punctuation">.</span>dep<span class="token punctuation">.</span><span class="token function">depend</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token keyword">if</span><span class="token punctuation">(</span>Array<span class="token punctuation">.</span><span class="token function">isArray</span><span class="token punctuation">(</span>current<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">{</span>            <span class="token function">dependArray</span><span class="token punctuation">(</span>current<span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token punctuation">}</span>    <span class="token punctuation">}</span><span class="token punctuation">}</span><span class="token keyword">function</span> <span class="token function">defineReactive</span><span class="token punctuation">(</span>data<span class="token punctuation">,</span>key<span class="token punctuation">,</span>value<span class="token punctuation">)</span><span class="token punctuation">{</span> <span class="token comment" spellcheck="true">// value有可能是对象</span>    <span class="token keyword">let</span> childOb <span class="token operator">=</span> <span class="token function">observe</span><span class="token punctuation">(</span>value<span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment" spellcheck="true">// 本身用户默认值是对象套对象 需要递归处理 （性能差）</span>    <span class="token keyword">let</span> dep <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">Dep</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment" spellcheck="true">// 每个属性都有一个dep属性</span>   <span class="token comment" spellcheck="true">// 获取到了数组对应ob</span>    Object<span class="token punctuation">.</span><span class="token function">defineProperty</span><span class="token punctuation">(</span>data<span class="token punctuation">,</span>key<span class="token punctuation">,</span><span class="token punctuation">{</span>        <span class="token keyword">get</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">{</span>            <span class="token comment" spellcheck="true">// 取值时我希望将watcher和dep 对应起来</span>            <span class="token keyword">if</span><span class="token punctuation">(</span>Dep<span class="token punctuation">.</span>target<span class="token punctuation">)</span><span class="token punctuation">{</span> <span class="token comment" spellcheck="true">// 此值是在模板中取值的</span>                dep<span class="token punctuation">.</span><span class="token function">depend</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token comment" spellcheck="true">// 让dep记住watcher</span>                <span class="token keyword">if</span><span class="token punctuation">(</span>childOb<span class="token punctuation">)</span><span class="token punctuation">{</span> <span class="token comment" spellcheck="true">// 可能是数组 可能是对象，对象也要收集依赖，后续写$set方法时需要触发他自己的更新操作</span>                    childOb<span class="token punctuation">.</span>dep<span class="token punctuation">.</span><span class="token function">depend</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment" spellcheck="true">// 就是让数组和对象也记录watcher</span>                    <span class="token keyword">if</span><span class="token punctuation">(</span>Array<span class="token punctuation">.</span><span class="token function">isArray</span><span class="token punctuation">(</span>value<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">{</span> <span class="token comment" spellcheck="true">//取外层数组要将数组里面的也进行依赖收集</span>                        <span class="token function">dependArray</span><span class="token punctuation">(</span>value<span class="token punctuation">)</span><span class="token punctuation">;</span>                    <span class="token punctuation">}</span>                <span class="token punctuation">}</span>            <span class="token punctuation">}</span>            <span class="token keyword">return</span> value        <span class="token punctuation">}</span><span class="token punctuation">,</span>        <span class="token keyword">set</span><span class="token punctuation">(</span>newV<span class="token punctuation">)</span><span class="token punctuation">{</span>             <span class="token comment" spellcheck="true">// 更新视图</span>            <span class="token keyword">if</span><span class="token punctuation">(</span>newV <span class="token operator">!==</span> value<span class="token punctuation">)</span><span class="token punctuation">{</span>                <span class="token function">observe</span><span class="token punctuation">(</span>newV<span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment" spellcheck="true">// 如果用户赋值一个新对象 ，需要将这个对象进行劫持</span>                value <span class="token operator">=</span> newV<span class="token punctuation">;</span>                dep<span class="token punctuation">.</span><span class="token function">notify</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment" spellcheck="true">// 告诉当前的属性存放的watcher执行</span>            <span class="token punctuation">}</span>        <span class="token punctuation">}</span>    <span class="token punctuation">}</span><span class="token punctuation">)</span><span class="token punctuation">}</span><span class="token keyword">export</span> <span class="token keyword">function</span> <span class="token function">observe</span><span class="token punctuation">(</span>data<span class="token punctuation">)</span> <span class="token punctuation">{</span>    <span class="token comment" spellcheck="true">// 如果是对象才观测</span>    <span class="token keyword">if</span> <span class="token punctuation">(</span><span class="token operator">!</span><span class="token function">isObject</span><span class="token punctuation">(</span>data<span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>        <span class="token keyword">return</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span>    <span class="token keyword">if</span><span class="token punctuation">(</span>data<span class="token punctuation">.</span>__ob__<span class="token punctuation">)</span><span class="token punctuation">{</span>        <span class="token keyword">return</span> data<span class="token punctuation">.</span>__ob__<span class="token punctuation">;</span>    <span class="token punctuation">}</span>    <span class="token comment" spellcheck="true">// 默认最外层的data必须是一个对象</span>    <span class="token keyword">return</span> <span class="token keyword">new</span> <span class="token class-name">Observer</span><span class="token punctuation">(</span>data<span class="token punctuation">)</span><span class="token punctuation">}</span></code></pre><ul><li>无论对象嵌套多深，我们的对象取值的时候都会通过调用render方法_v的时候调用了JSON.stringify遍历了对象的每一个属性，所以对象内的每个属性会有有对应的dep，也会自动的收集对应的watcher</li><li>多层数组嵌套，我们需要递归给数组添加dep属性,所以避免写多维数组，尽量的扁平化，减少递归就是提高性能</li></ul><h3 id="nextTick异步更新数据原理"><a href="#nextTick异步更新数据原理" class="headerlink" title="nextTick异步更新数据原理"></a>nextTick异步更新数据原理</h3><blockquote><p>多次调用watcher的更新方法update,我们可以先将其缓存到一个栈中，等同步代码执行完，在异步更新渲染页面.</p><ul><li>每次update调用nextTik方法，延迟到同步代码运行的后面执行，否则每次修改属性都去重新渲染页面，性能及其的差</li></ul></blockquote><pre class=" language-javascript"><code class="language-javascript"><span class="token keyword">const</span> callbacks <span class="token operator">=</span> <span class="token punctuation">[</span><span class="token punctuation">]</span><span class="token punctuation">;</span><span class="token keyword">function</span> <span class="token function">flushCallbacks</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>    callbacks<span class="token punctuation">.</span><span class="token function">forEach</span><span class="token punctuation">(</span>cb <span class="token operator">=</span><span class="token operator">></span> <span class="token function">cb</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    waiting <span class="token operator">=</span> <span class="token boolean">false</span><span class="token punctuation">}</span><span class="token keyword">let</span> waiting <span class="token operator">=</span> <span class="token boolean">false</span><span class="token punctuation">;</span><span class="token keyword">function</span> <span class="token function">timer</span><span class="token punctuation">(</span>flushCallbacks<span class="token punctuation">)</span> <span class="token punctuation">{</span>    <span class="token keyword">let</span> timerFn <span class="token operator">=</span> <span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">=</span><span class="token operator">></span> <span class="token punctuation">{</span><span class="token punctuation">}</span>    <span class="token keyword">if</span> <span class="token punctuation">(</span>Promise<span class="token punctuation">)</span> <span class="token punctuation">{</span>        timerFn <span class="token operator">=</span> <span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">=</span><span class="token operator">></span> <span class="token punctuation">{</span>            Promise<span class="token punctuation">.</span><span class="token function">resolve</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">then</span><span class="token punctuation">(</span>flushCallbacks<span class="token punctuation">)</span>        <span class="token punctuation">}</span>    <span class="token punctuation">}</span> <span class="token keyword">else</span> <span class="token keyword">if</span> <span class="token punctuation">(</span>MutationObserver<span class="token punctuation">)</span> <span class="token punctuation">{</span>        <span class="token keyword">let</span> textNode <span class="token operator">=</span> document<span class="token punctuation">.</span><span class="token function">createTextNode</span><span class="token punctuation">(</span><span class="token number">1</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token keyword">let</span> observe <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">MutationObserver</span><span class="token punctuation">(</span>flushCallbacks<span class="token punctuation">)</span><span class="token punctuation">;</span>        observe<span class="token punctuation">.</span><span class="token function">observe</span><span class="token punctuation">(</span>textNode<span class="token punctuation">,</span> <span class="token punctuation">{</span>            characterData<span class="token punctuation">:</span> <span class="token boolean">true</span>        <span class="token punctuation">}</span><span class="token punctuation">)</span>        timerFn <span class="token operator">=</span> <span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">=</span><span class="token operator">></span> <span class="token punctuation">{</span>            textNode<span class="token punctuation">.</span>textContent <span class="token operator">=</span> <span class="token number">3</span><span class="token punctuation">;</span>        <span class="token punctuation">}</span>        <span class="token comment" spellcheck="true">// 微任务</span>    <span class="token punctuation">}</span> <span class="token keyword">else</span> <span class="token keyword">if</span> <span class="token punctuation">(</span>setImmediate<span class="token punctuation">)</span> <span class="token punctuation">{</span>        timerFn <span class="token operator">=</span> <span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">=</span><span class="token operator">></span> <span class="token punctuation">{</span>            <span class="token function">setImmediate</span><span class="token punctuation">(</span>flushCallbacks<span class="token punctuation">)</span>        <span class="token punctuation">}</span>    <span class="token punctuation">}</span> <span class="token keyword">else</span> <span class="token punctuation">{</span>        timerFn <span class="token operator">=</span> <span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">=</span><span class="token operator">></span> <span class="token punctuation">{</span>            <span class="token function">setTimeout</span><span class="token punctuation">(</span>flushCallbacks<span class="token punctuation">)</span>        <span class="token punctuation">}</span>    <span class="token punctuation">}</span>    <span class="token function">timerFn</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token punctuation">}</span><span class="token comment" spellcheck="true">// 微任务是在页面渲染前执行 我取的是内存中的dom，不关心你渲染完毕没有</span><span class="token keyword">export</span> <span class="token keyword">function</span> <span class="token function">nextTick</span><span class="token punctuation">(</span>cb<span class="token punctuation">)</span> <span class="token punctuation">{</span>    callbacks<span class="token punctuation">.</span><span class="token function">push</span><span class="token punctuation">(</span>cb<span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment" spellcheck="true">// flushSchedulerQueue / userCallback</span>    <span class="token keyword">if</span> <span class="token punctuation">(</span><span class="token operator">!</span>waiting<span class="token punctuation">)</span> <span class="token punctuation">{</span>        <span class="token function">timer</span><span class="token punctuation">(</span>flushCallbacks<span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment" spellcheck="true">// vue2 中考虑了兼容性问题 vue3 里面不在考虑兼容性问题</span>        waiting <span class="token operator">=</span> <span class="token boolean">true</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span><span class="token punctuation">}</span></code></pre><h3 id="3-watch-amp-amp-computed"><a href="#3-watch-amp-amp-computed" class="headerlink" title="3. watch &amp;&amp; computed"></a>3. watch &amp;&amp; computed</h3><blockquote><p>watch</p><ul><li>watch可能是个数组，也可能是个函数，也可能是个对象</li><li>new Watcher 传入标识，标识是用户watch对应的watcher</li><li>重写getter方法，get watch属性的值，让对应属性收集到我们的watch watcher</li><li>当监听属性值改变，调用set方法，如果我们的标识是 watch watcher 就执行watch监听的方法，并传入Vue实例 vm，并将新值和旧值传入参数</li></ul></blockquote><pre class=" language-javascript"><code class="language-javascript"><span class="token keyword">function</span> <span class="token function">initWatch</span><span class="token punctuation">(</span>vm<span class="token punctuation">,</span> watch<span class="token punctuation">)</span> <span class="token punctuation">{</span> <span class="token comment" spellcheck="true">// Object.keys</span>    <span class="token keyword">for</span> <span class="token punctuation">(</span><span class="token keyword">let</span> key <span class="token keyword">in</span> watch<span class="token punctuation">)</span> <span class="token punctuation">{</span>        <span class="token keyword">let</span> handler <span class="token operator">=</span> watch<span class="token punctuation">[</span>key<span class="token punctuation">]</span><span class="token punctuation">;</span>        <span class="token keyword">if</span> <span class="token punctuation">(</span>Array<span class="token punctuation">.</span><span class="token function">isArray</span><span class="token punctuation">(</span>handler<span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>            <span class="token keyword">for</span> <span class="token punctuation">(</span><span class="token keyword">let</span> i <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span> i <span class="token operator">&lt;</span> handler<span class="token punctuation">.</span>length<span class="token punctuation">;</span> i<span class="token operator">++</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>                vm<span class="token punctuation">.</span><span class="token function">$watch</span><span class="token punctuation">(</span>key<span class="token punctuation">,</span> handler<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">)</span>            <span class="token punctuation">}</span>        <span class="token punctuation">}</span> <span class="token keyword">else</span> <span class="token punctuation">{</span>            vm<span class="token punctuation">.</span><span class="token function">$watch</span><span class="token punctuation">(</span>key<span class="token punctuation">,</span> handler<span class="token punctuation">)</span>        <span class="token punctuation">}</span>    <span class="token punctuation">}</span><span class="token punctuation">}</span><span class="token keyword">function</span> <span class="token function">stateMixin</span><span class="token punctuation">(</span>Vue<span class="token punctuation">)</span> <span class="token punctuation">{</span>    Vue<span class="token punctuation">.</span>prototype<span class="token punctuation">.</span>$watch <span class="token operator">=</span> <span class="token keyword">function</span><span class="token punctuation">(</span>key<span class="token punctuation">,</span> handler<span class="token punctuation">,</span> options <span class="token operator">=</span> <span class="token punctuation">{</span><span class="token punctuation">}</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>        options<span class="token punctuation">.</span>user <span class="token operator">=</span> <span class="token boolean">true</span><span class="token punctuation">;</span>        <span class="token keyword">new</span> <span class="token class-name">Watcher</span><span class="token punctuation">(</span><span class="token keyword">this</span><span class="token punctuation">,</span> key<span class="token punctuation">,</span> handler<span class="token punctuation">,</span> options<span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span><span class="token punctuation">}</span></code></pre><blockquote><p>computed</p><ul><li>兼容写法,可能是一个函数，也可能是一个函数get和set方法的对象</li><li>遍历所有计算属性，用Object.defineProperty代理getter，setter</li><li>创建watchers和每一个计算属性做一个映射，一个计算属性对应一个wathcer</li><li>new Watcher 默认不执行，传入标识，标识是computed watcher</li><li>get拦击属性是，做一个高阶函数 createComputedGetter，最终返回计算结果</li><li>为了不是每次取值都调用watcher的更新方法，增加了脏值检测，通过dirty判断是否是脏值，如果是true，我们需要重新计算值，就重新调用watcher的更新方法</li><li>计算属性内用到的属性，不能只是有computed watcher，还要有对应的渲染watcher，将Dep.target改成栈形结构，先存入渲染watcher，当遇到计算属性取值时，记录计算属性watcher，当我们计算完值后，当前计算watcher出栈，Dep.target始终是栈中最后一个，如果还有我们去mapping 的watcher反向记录，因为watcher和dep是多对多的关系，将mapping的watcher对应的所有dep添加上渲染watcher，这样每次修改计算属性内用到的属性时，就会重新计算值，并渲染页面(调用了计算watcher和渲染watcher)</li><li>当页面重新渲染是，又会重新走watcher的更新方法(run())，脏值(dirty)检测修改为true，重新计算，后面重复取值，脏值为false，不再计算</li></ul></blockquote><pre class=" language-javascript"><code class="language-javascript"><span class="token keyword">function</span> <span class="token function">initComputed</span><span class="token punctuation">(</span>vm<span class="token punctuation">,</span> computed<span class="token punctuation">)</span> <span class="token punctuation">{</span>    <span class="token keyword">const</span> watchers <span class="token operator">=</span> vm<span class="token punctuation">.</span>_computedWatchers <span class="token operator">=</span> <span class="token punctuation">{</span><span class="token punctuation">}</span>    <span class="token keyword">for</span> <span class="token punctuation">(</span><span class="token keyword">let</span> key <span class="token keyword">in</span> computed<span class="token punctuation">)</span> <span class="token punctuation">{</span>        <span class="token comment" spellcheck="true">// 校验 </span>        <span class="token keyword">const</span> userDef <span class="token operator">=</span> computed<span class="token punctuation">[</span>key<span class="token punctuation">]</span><span class="token punctuation">;</span>        <span class="token comment" spellcheck="true">// 依赖的属性变化就重新取值 get</span>        <span class="token keyword">let</span> getter <span class="token operator">=</span> <span class="token keyword">typeof</span> userDef <span class="token operator">==</span> <span class="token string">'function'</span> <span class="token operator">?</span> userDef <span class="token punctuation">:</span> userDef<span class="token punctuation">.</span><span class="token keyword">get</span><span class="token punctuation">;</span>        <span class="token comment" spellcheck="true">// 每个就算属性本质就是watcher   </span>        <span class="token comment" spellcheck="true">// 将watcher和 属性 做一个映射</span>        watchers<span class="token punctuation">[</span>key<span class="token punctuation">]</span> <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">Watcher</span><span class="token punctuation">(</span>vm<span class="token punctuation">,</span> getter<span class="token punctuation">,</span> <span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">=</span><span class="token operator">></span> <span class="token punctuation">{</span><span class="token punctuation">}</span><span class="token punctuation">,</span> <span class="token punctuation">{</span> lazy<span class="token punctuation">:</span> <span class="token boolean">true</span> <span class="token punctuation">}</span><span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment" spellcheck="true">// 默认不执行</span>        <span class="token comment" spellcheck="true">// 将key 定义在vm上</span>        <span class="token function">defineComputed</span><span class="token punctuation">(</span>vm<span class="token punctuation">,</span> key<span class="token punctuation">,</span> userDef<span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span><span class="token punctuation">}</span><span class="token keyword">function</span> <span class="token function">defineComputed</span><span class="token punctuation">(</span>vm<span class="token punctuation">,</span> key<span class="token punctuation">,</span> userDef<span class="token punctuation">)</span> <span class="token punctuation">{</span>    <span class="token keyword">let</span> sharedProperty <span class="token operator">=</span> <span class="token punctuation">{</span><span class="token punctuation">}</span><span class="token punctuation">;</span>    <span class="token keyword">if</span> <span class="token punctuation">(</span><span class="token keyword">typeof</span> userDef <span class="token operator">==</span> <span class="token string">'function'</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>        sharedProperty<span class="token punctuation">.</span><span class="token keyword">get</span> <span class="token operator">=</span> userDef<span class="token punctuation">;</span>    <span class="token punctuation">}</span> <span class="token keyword">else</span> <span class="token punctuation">{</span>        sharedProperty<span class="token punctuation">.</span><span class="token keyword">get</span> <span class="token operator">=</span> <span class="token function">createComputedGetter</span><span class="token punctuation">(</span>key<span class="token punctuation">)</span><span class="token punctuation">;</span>        sharedProperty<span class="token punctuation">.</span><span class="token keyword">set</span> <span class="token operator">=</span> userDef<span class="token punctuation">.</span><span class="token keyword">set</span> <span class="token punctuation">;</span>    <span class="token punctuation">}</span>    Object<span class="token punctuation">.</span><span class="token function">defineProperty</span><span class="token punctuation">(</span>vm<span class="token punctuation">,</span> key<span class="token punctuation">,</span> sharedProperty<span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment" spellcheck="true">// computed就是一个defineProperty</span><span class="token punctuation">}</span><span class="token keyword">function</span> <span class="token function">createComputedGetter</span><span class="token punctuation">(</span>key<span class="token punctuation">)</span> <span class="token punctuation">{</span>    <span class="token keyword">return</span> <span class="token keyword">function</span> <span class="token function">computedGetter</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span> <span class="token comment" spellcheck="true">// 取计算属性的值 走的是这个函数</span>        <span class="token comment" spellcheck="true">// this._computedWatchers 包含着所有的计算属性</span>        <span class="token comment" spellcheck="true">// 通过key 可以拿到对应watcher，这个watcher中包含了getter</span>        <span class="token keyword">let</span> watcher <span class="token operator">=</span> <span class="token keyword">this</span><span class="token punctuation">.</span>_computedWatchers<span class="token punctuation">[</span>key<span class="token punctuation">]</span>        <span class="token comment" spellcheck="true">// 脏就是 要调用用户的getter  不脏就是不要调用getter</span>        <span class="token keyword">if</span><span class="token punctuation">(</span>watcher<span class="token punctuation">.</span>dirty<span class="token punctuation">)</span><span class="token punctuation">{</span> <span class="token comment" spellcheck="true">// 根据dirty属性 来判断是否需要重新求职</span>            watcher<span class="token punctuation">.</span><span class="token function">evaluate</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token comment" spellcheck="true">// this.get()</span>        <span class="token punctuation">}</span>        <span class="token comment" spellcheck="true">// 如果当前取完值后 Dep.target还有值  需要继续向上收集</span>        <span class="token keyword">if</span><span class="token punctuation">(</span>Dep<span class="token punctuation">.</span>target<span class="token punctuation">)</span><span class="token punctuation">{</span>            <span class="token comment" spellcheck="true">// 计算属性watcher 内部 有两个dep  firstName,lastName</span>            watcher<span class="token punctuation">.</span><span class="token function">depend</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment" spellcheck="true">// watcher 里 对应了 多个dep</span>        <span class="token punctuation">}</span>        <span class="token keyword">return</span> watcher<span class="token punctuation">.</span>value    <span class="token punctuation">}</span><span class="token punctuation">}</span></code></pre><blockquote><p> watcher 类修改</p></blockquote><pre class=" language-javascript"><code class="language-javascript"><span class="token comment" spellcheck="true">// Watcher</span><span class="token keyword">import</span> <span class="token punctuation">{</span> popTarget<span class="token punctuation">,</span> pushTarget <span class="token punctuation">}</span> <span class="token keyword">from</span> <span class="token string">"./dep"</span><span class="token punctuation">;</span><span class="token keyword">import</span> <span class="token punctuation">{</span> queueWatcher <span class="token punctuation">}</span> <span class="token keyword">from</span> <span class="token string">"./scheduler"</span><span class="token punctuation">;</span><span class="token keyword">let</span> id <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span><span class="token keyword">class</span> <span class="token class-name">Watcher</span> <span class="token punctuation">{</span>    <span class="token comment" spellcheck="true">// vm,updateComponent,()=>{ console.log('更新视图了')},true</span>    <span class="token function">constructor</span><span class="token punctuation">(</span>vm<span class="token punctuation">,</span> exprOrFn<span class="token punctuation">,</span> cb<span class="token punctuation">,</span> options<span class="token punctuation">)</span> <span class="token punctuation">{</span>        <span class="token comment" spellcheck="true">// exporOfFn</span>        <span class="token keyword">this</span><span class="token punctuation">.</span>vm <span class="token operator">=</span> vm<span class="token punctuation">;</span>        <span class="token keyword">this</span><span class="token punctuation">.</span>exprOrFn <span class="token operator">=</span> exprOrFn<span class="token punctuation">;</span>        <span class="token keyword">this</span><span class="token punctuation">.</span>user <span class="token operator">=</span> <span class="token operator">!</span><span class="token operator">!</span>options<span class="token punctuation">.</span>user<span class="token punctuation">;</span> <span class="token comment" spellcheck="true">// 是不是用户watcher</span>        <span class="token keyword">this</span><span class="token punctuation">.</span>lazy <span class="token operator">=</span> <span class="token operator">!</span><span class="token operator">!</span>options<span class="token punctuation">.</span>lazy<span class="token punctuation">;</span>        <span class="token keyword">this</span><span class="token punctuation">.</span>dirty <span class="token operator">=</span> options<span class="token punctuation">.</span>lazy<span class="token punctuation">;</span> <span class="token comment" spellcheck="true">// 如果是计算属性，那么默认值lazy:true, dirty:true</span>        <span class="token keyword">this</span><span class="token punctuation">.</span>cb <span class="token operator">=</span> cb<span class="token punctuation">;</span>        <span class="token keyword">this</span><span class="token punctuation">.</span>options <span class="token operator">=</span> options<span class="token punctuation">;</span>        <span class="token keyword">this</span><span class="token punctuation">.</span>id <span class="token operator">=</span> id<span class="token operator">++</span><span class="token punctuation">;</span>        <span class="token comment" spellcheck="true">// 默认应该让exprOrFn执行  exprOrFn 方法做了什么是？ render （去vm上了取值）</span>        <span class="token keyword">if</span> <span class="token punctuation">(</span><span class="token keyword">typeof</span> exprOrFn <span class="token operator">==</span> <span class="token string">'string'</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>            <span class="token keyword">this</span><span class="token punctuation">.</span>getter <span class="token operator">=</span> <span class="token keyword">function</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span> <span class="token comment" spellcheck="true">// 需要将表达式转化成函数</span>                <span class="token comment" spellcheck="true">// 当我数据取值时 ， 会进行依赖收集</span>                <span class="token comment" spellcheck="true">// age.n  vm['age.n']  =》 vm['age']['n']</span>                <span class="token keyword">let</span> path <span class="token operator">=</span> exprOrFn<span class="token punctuation">.</span><span class="token function">split</span><span class="token punctuation">(</span><span class="token string">'.'</span><span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment" spellcheck="true">// [age,n]</span>                <span class="token keyword">let</span> obj <span class="token operator">=</span> vm<span class="token punctuation">;</span>                <span class="token keyword">for</span> <span class="token punctuation">(</span><span class="token keyword">let</span> i <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span> i <span class="token operator">&lt;</span> path<span class="token punctuation">.</span>length<span class="token punctuation">;</span> i<span class="token operator">++</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>                    obj <span class="token operator">=</span> obj<span class="token punctuation">[</span>path<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">]</span>                <span class="token punctuation">}</span>                <span class="token keyword">return</span> obj<span class="token punctuation">;</span> <span class="token comment" spellcheck="true">// getter方法</span>            <span class="token punctuation">}</span>        <span class="token punctuation">}</span> <span class="token keyword">else</span> <span class="token punctuation">{</span>            <span class="token keyword">this</span><span class="token punctuation">.</span>getter <span class="token operator">=</span> exprOrFn<span class="token punctuation">;</span> <span class="token comment" spellcheck="true">// updateComponent</span>        <span class="token punctuation">}</span>        <span class="token keyword">this</span><span class="token punctuation">.</span>deps <span class="token operator">=</span> <span class="token punctuation">[</span><span class="token punctuation">]</span><span class="token punctuation">;</span>        <span class="token keyword">this</span><span class="token punctuation">.</span>depsId <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">Set</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token comment" spellcheck="true">// 第一次的value</span>        <span class="token keyword">this</span><span class="token punctuation">.</span>value <span class="token operator">=</span> <span class="token keyword">this</span><span class="token punctuation">.</span>lazy <span class="token operator">?</span> undefined <span class="token punctuation">:</span> <span class="token keyword">this</span><span class="token punctuation">.</span><span class="token keyword">get</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment" spellcheck="true">// 默认初始化 要取值</span>    <span class="token punctuation">}</span>    <span class="token keyword">get</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span> <span class="token comment" spellcheck="true">// 稍后用户更新 时 可以重新调用getter方法</span>        <span class="token comment" spellcheck="true">// defineProperty.get, 每个属性都可以收集自己的watcher</span>        <span class="token comment" spellcheck="true">// 我希望一个属性可以对应多个watcher，同时一个watcher可以对应多个属性</span>        <span class="token function">pushTarget</span><span class="token punctuation">(</span><span class="token keyword">this</span><span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment" spellcheck="true">// Dep.target = watcher</span>        <span class="token keyword">const</span> value <span class="token operator">=</span> <span class="token keyword">this</span><span class="token punctuation">.</span>getter<span class="token punctuation">.</span><span class="token function">call</span><span class="token punctuation">(</span><span class="token keyword">this</span><span class="token punctuation">.</span>vm<span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment" spellcheck="true">// render() 方法会去vm上取值 vm._update(vm._render)</span>        <span class="token function">popTarget</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment" spellcheck="true">// Dep.target = null; 如果Dep.target有值说明这个变量在模板中使用了</span>        <span class="token keyword">return</span> value    <span class="token punctuation">}</span>    <span class="token function">update</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span> <span class="token comment" spellcheck="true">// vue中的更新操作是异步的</span>        <span class="token comment" spellcheck="true">// 每次更新时 this</span>        <span class="token keyword">if</span><span class="token punctuation">(</span><span class="token keyword">this</span><span class="token punctuation">.</span>lazy<span class="token punctuation">)</span><span class="token punctuation">{</span>            <span class="token keyword">this</span><span class="token punctuation">.</span>dirty <span class="token operator">=</span> <span class="token boolean">true</span><span class="token punctuation">;</span>        <span class="token punctuation">}</span><span class="token keyword">else</span><span class="token punctuation">{</span>            <span class="token function">queueWatcher</span><span class="token punctuation">(</span><span class="token keyword">this</span><span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment" spellcheck="true">// 多次调用update 我希望先将watcher缓存下来，等一会一起更新</span>        <span class="token punctuation">}</span>    <span class="token punctuation">}</span>    <span class="token function">run</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span> <span class="token comment" spellcheck="true">// 后续要有其他功能</span>        <span class="token keyword">let</span> newValue <span class="token operator">=</span> <span class="token keyword">this</span><span class="token punctuation">.</span><span class="token keyword">get</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token keyword">let</span> oldValue <span class="token operator">=</span> <span class="token keyword">this</span><span class="token punctuation">.</span>value        <span class="token keyword">this</span><span class="token punctuation">.</span>value <span class="token operator">=</span> newValue<span class="token punctuation">;</span> <span class="token comment" spellcheck="true">// 为了保证下一次更新时 上一次的最新值是下一次的老值</span>        <span class="token keyword">if</span> <span class="token punctuation">(</span><span class="token keyword">this</span><span class="token punctuation">.</span>user<span class="token punctuation">)</span> <span class="token punctuation">{</span>            <span class="token keyword">this</span><span class="token punctuation">.</span>cb<span class="token punctuation">.</span><span class="token function">call</span><span class="token punctuation">(</span><span class="token keyword">this</span><span class="token punctuation">.</span>vm<span class="token punctuation">,</span> newValue<span class="token punctuation">,</span> oldValue<span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token punctuation">}</span>    <span class="token punctuation">}</span>    <span class="token function">addDep</span><span class="token punctuation">(</span>dep<span class="token punctuation">)</span> <span class="token punctuation">{</span>        <span class="token keyword">let</span> id <span class="token operator">=</span> dep<span class="token punctuation">.</span>id<span class="token punctuation">;</span>        <span class="token keyword">if</span> <span class="token punctuation">(</span><span class="token operator">!</span><span class="token keyword">this</span><span class="token punctuation">.</span>depsId<span class="token punctuation">.</span><span class="token function">has</span><span class="token punctuation">(</span>id<span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>            <span class="token keyword">this</span><span class="token punctuation">.</span>depsId<span class="token punctuation">.</span><span class="token function">add</span><span class="token punctuation">(</span>id<span class="token punctuation">)</span><span class="token punctuation">;</span>            <span class="token keyword">this</span><span class="token punctuation">.</span>deps<span class="token punctuation">.</span><span class="token function">push</span><span class="token punctuation">(</span>dep<span class="token punctuation">)</span><span class="token punctuation">;</span>            dep<span class="token punctuation">.</span><span class="token function">addSub</span><span class="token punctuation">(</span><span class="token keyword">this</span><span class="token punctuation">)</span>        <span class="token punctuation">}</span>    <span class="token punctuation">}</span>    <span class="token function">evaluate</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">{</span>        <span class="token keyword">this</span><span class="token punctuation">.</span>dirty <span class="token operator">=</span> <span class="token boolean">false</span><span class="token punctuation">;</span> <span class="token comment" spellcheck="true">// 为false表示取过值了</span>        <span class="token keyword">this</span><span class="token punctuation">.</span>value <span class="token operator">=</span> <span class="token keyword">this</span><span class="token punctuation">.</span><span class="token keyword">get</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment" spellcheck="true">// 用户的getter执行</span>    <span class="token punctuation">}</span>    <span class="token function">depend</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">{</span>        <span class="token keyword">let</span> i <span class="token operator">=</span> <span class="token keyword">this</span><span class="token punctuation">.</span>deps<span class="token punctuation">.</span>length<span class="token punctuation">;</span>        <span class="token keyword">while</span><span class="token punctuation">(</span>i<span class="token operator">--</span><span class="token punctuation">)</span><span class="token punctuation">{</span>            <span class="token keyword">this</span><span class="token punctuation">.</span>deps<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">.</span><span class="token function">depend</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment" spellcheck="true">//lastName,firstName 收集渲染watcher</span>        <span class="token punctuation">}</span>    <span class="token punctuation">}</span><span class="token punctuation">}</span><span class="token comment" spellcheck="true">// watcher 和 dep</span><span class="token comment" spellcheck="true">// 我们将更新的功能封装了一个watcher</span><span class="token comment" spellcheck="true">// 渲染页面前，会将当前watcher放到Dep类上</span><span class="token comment" spellcheck="true">// 在vue中页面渲染时使用的属性，需要进行依赖收集 ，收集对象的渲染watcher</span><span class="token comment" spellcheck="true">// 取值时，给每个属性都加了个dep属性，用于存储这个渲染watcher （同一个watcher会对应多个dep）</span><span class="token comment" spellcheck="true">// 每个属性可能对应多个视图（多个视图肯定是多个watcher） 一个属性要对应多个watcher</span><span class="token comment" spellcheck="true">// dep.depend() => 通知dep存放watcher => Dep.target.addDep() => 通知watcher存放dep</span><span class="token comment" spellcheck="true">// 双向存储</span><span class="token keyword">export</span> <span class="token keyword">default</span> Watcher</code></pre><h3 id="4-组件-amp-amp-生命周期"><a href="#4-组件-amp-amp-生命周期" class="headerlink" title="4. 组件 &amp;&amp; 生命周期"></a>4. 组件 &amp;&amp; 生命周期</h3><h4 id="mergeOptions-合并传入的选项-–-合并策略"><a href="#mergeOptions-合并传入的选项-–-合并策略" class="headerlink" title="mergeOptions, 合并传入的选项 – 合并策略"></a>mergeOptions, 合并传入的选项 – 合并策略</h4><blockquote><ul><li>Vue.mixin(options): 其中的钩子函数会合并成一个数组，其他属性和方法会覆盖传入的相同内容,并挂在掉vm.$options上</li><li>Vue.component(id, options) 组件合并策略: 后面传入的组件通过Object.create()方法，链式查找对应的components，不能直接覆盖options内组件，同名全局组件会遭到污染.</li></ul></blockquote><pre class=" language-javascript"><code class="language-javascript">vm<span class="token punctuation">.</span>$options <span class="token operator">=</span> <span class="token function">mergeOptions</span><span class="token punctuation">(</span>vm<span class="token punctuation">.</span>constructor<span class="token punctuation">.</span>options<span class="token punctuation">,</span> options<span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token keyword">let</span> strats <span class="token operator">=</span> <span class="token punctuation">{</span><span class="token punctuation">}</span><span class="token punctuation">;</span> <span class="token comment" spellcheck="true">// 存放各种策略</span><span class="token comment" spellcheck="true">// 钩子函数合并策略</span><span class="token keyword">function</span> <span class="token function">mergeHook</span><span class="token punctuation">(</span>parentVal<span class="token punctuation">,</span> childVal<span class="token punctuation">)</span> <span class="token punctuation">{</span>    <span class="token keyword">if</span> <span class="token punctuation">(</span>childVal<span class="token punctuation">)</span> <span class="token punctuation">{</span>        <span class="token keyword">if</span> <span class="token punctuation">(</span>parentVal<span class="token punctuation">)</span> <span class="token punctuation">{</span>            <span class="token keyword">return</span> parentVal<span class="token punctuation">.</span><span class="token function">concat</span><span class="token punctuation">(</span>childVal<span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment" spellcheck="true">// 后续</span>        <span class="token punctuation">}</span> <span class="token keyword">else</span> <span class="token punctuation">{</span>            <span class="token keyword">return</span> <span class="token punctuation">[</span>childVal<span class="token punctuation">]</span><span class="token punctuation">;</span> <span class="token comment" spellcheck="true">// 第一次</span>        <span class="token punctuation">}</span>    <span class="token punctuation">}</span> <span class="token keyword">else</span> <span class="token punctuation">{</span>        <span class="token keyword">return</span> parentVal    <span class="token punctuation">}</span><span class="token punctuation">}</span><span class="token comment" spellcheck="true">// 组件合并策略</span>strats<span class="token punctuation">.</span>components <span class="token operator">=</span> <span class="token keyword">function</span><span class="token punctuation">(</span>parentVal<span class="token punctuation">,</span> childVal<span class="token punctuation">)</span> <span class="token punctuation">{</span>    <span class="token comment" spellcheck="true">// Vue.options.components</span>    <span class="token keyword">let</span> options <span class="token operator">=</span> Object<span class="token punctuation">.</span><span class="token function">create</span><span class="token punctuation">(</span>parentVal<span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment" spellcheck="true">// 根据父对象构造一个新对象 options.__proto__= parentVal</span>    <span class="token keyword">if</span> <span class="token punctuation">(</span>childVal<span class="token punctuation">)</span> <span class="token punctuation">{</span>        <span class="token keyword">for</span> <span class="token punctuation">(</span><span class="token keyword">let</span> key <span class="token keyword">in</span> childVal<span class="token punctuation">)</span> <span class="token punctuation">{</span>            options<span class="token punctuation">[</span>key<span class="token punctuation">]</span> <span class="token operator">=</span> childVal<span class="token punctuation">[</span>key<span class="token punctuation">]</span><span class="token punctuation">;</span>        <span class="token punctuation">}</span>    <span class="token punctuation">}</span>    <span class="token keyword">return</span> options<span class="token punctuation">}</span><span class="token keyword">function</span> <span class="token function">mergeOptions</span><span class="token punctuation">(</span>parent<span class="token punctuation">,</span> child<span class="token punctuation">)</span> <span class="token punctuation">{</span>    <span class="token keyword">const</span> options <span class="token operator">=</span> <span class="token punctuation">{</span><span class="token punctuation">}</span><span class="token punctuation">;</span> <span class="token comment" spellcheck="true">// 合并后的结果</span>    <span class="token keyword">for</span> <span class="token punctuation">(</span><span class="token keyword">let</span> key <span class="token keyword">in</span> parent<span class="token punctuation">)</span> <span class="token punctuation">{</span>        <span class="token function">mergeField</span><span class="token punctuation">(</span>key<span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span>    <span class="token keyword">for</span> <span class="token punctuation">(</span><span class="token keyword">let</span> key <span class="token keyword">in</span> child<span class="token punctuation">)</span> <span class="token punctuation">{</span>        <span class="token keyword">if</span> <span class="token punctuation">(</span>parent<span class="token punctuation">.</span><span class="token function">hasOwnProperty</span><span class="token punctuation">(</span>key<span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>            <span class="token keyword">continue</span><span class="token punctuation">;</span>        <span class="token punctuation">}</span>        <span class="token function">mergeField</span><span class="token punctuation">(</span>key<span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span>    <span class="token keyword">function</span> <span class="token function">mergeField</span><span class="token punctuation">(</span>key<span class="token punctuation">)</span> <span class="token punctuation">{</span>        <span class="token keyword">let</span> parentVal <span class="token operator">=</span> parent<span class="token punctuation">[</span>key<span class="token punctuation">]</span><span class="token punctuation">;</span>        <span class="token keyword">let</span> childVal <span class="token operator">=</span> child<span class="token punctuation">[</span>key<span class="token punctuation">]</span><span class="token punctuation">;</span>        <span class="token comment" spellcheck="true">// 策略模式</span>        <span class="token keyword">if</span> <span class="token punctuation">(</span>strats<span class="token punctuation">[</span>key<span class="token punctuation">]</span><span class="token punctuation">)</span> <span class="token punctuation">{</span> <span class="token comment" spellcheck="true">// 如果有对应的策略就调用对应的策略即可</span>            options<span class="token punctuation">[</span>key<span class="token punctuation">]</span> <span class="token operator">=</span> strats<span class="token punctuation">[</span>key<span class="token punctuation">]</span><span class="token punctuation">(</span>parentVal<span class="token punctuation">,</span> childVal<span class="token punctuation">)</span>        <span class="token punctuation">}</span> <span class="token keyword">else</span> <span class="token punctuation">{</span>            <span class="token keyword">if</span> <span class="token punctuation">(</span><span class="token function">isObject</span><span class="token punctuation">(</span>parentVal<span class="token punctuation">)</span> <span class="token operator">&amp;&amp;</span> <span class="token function">isObject</span><span class="token punctuation">(</span>childVal<span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>                options<span class="token punctuation">[</span>key<span class="token punctuation">]</span> <span class="token operator">=</span> <span class="token punctuation">{</span> <span class="token operator">...</span>parentVal<span class="token punctuation">,</span> <span class="token operator">...</span>childVal <span class="token punctuation">}</span>            <span class="token punctuation">}</span> <span class="token keyword">else</span> <span class="token punctuation">{</span>                options<span class="token punctuation">[</span>key<span class="token punctuation">]</span> <span class="token operator">=</span> child<span class="token punctuation">[</span>key<span class="token punctuation">]</span> <span class="token operator">||</span> parent<span class="token punctuation">[</span>key<span class="token punctuation">]</span><span class="token punctuation">;</span>            <span class="token punctuation">}</span>        <span class="token punctuation">}</span>    <span class="token punctuation">}</span>    <span class="token keyword">return</span> options<span class="token punctuation">}</span></code></pre><h4 id="Vue-extend"><a href="#Vue-extend" class="headerlink" title="Vue.extend"></a>Vue.extend</h4><blockquote><ul><li>通过传入的选项生成一个类，并继承父类</li></ul></blockquote><pre class=" language-javascript"><code class="language-javascript"><span class="token comment" spellcheck="true">// 给个对象返回类</span>Vue<span class="token punctuation">.</span>extend <span class="token operator">=</span> <span class="token keyword">function</span> <span class="token punctuation">(</span>opts<span class="token punctuation">)</span> <span class="token punctuation">{</span> <span class="token comment" spellcheck="true">// extend方法就是产生一个继承于Vue的类</span>    <span class="token comment" spellcheck="true">// 并且身上应该有父类的所有功能 </span>    <span class="token keyword">const</span> Super <span class="token operator">=</span> <span class="token keyword">this</span>    <span class="token keyword">const</span> Sub <span class="token operator">=</span> <span class="token keyword">function</span> <span class="token function">VueComponent</span><span class="token punctuation">(</span>options<span class="token punctuation">)</span><span class="token punctuation">{</span>        <span class="token keyword">this</span><span class="token punctuation">.</span><span class="token function">_init</span><span class="token punctuation">(</span>options<span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span>    <span class="token comment" spellcheck="true">// 原型继承</span>    Sub<span class="token punctuation">.</span>prototype <span class="token operator">=</span> Object<span class="token punctuation">.</span><span class="token function">create</span><span class="token punctuation">(</span>Super<span class="token punctuation">.</span>prototype<span class="token punctuation">)</span><span class="token punctuation">;</span>    Sub<span class="token punctuation">.</span>prototype<span class="token punctuation">.</span>constructor <span class="token operator">=</span> Sub<span class="token punctuation">;</span>    Sub<span class="token punctuation">.</span>options <span class="token operator">=</span> <span class="token function">mergeOptions</span><span class="token punctuation">(</span>Super<span class="token punctuation">.</span>options<span class="token punctuation">,</span>opts<span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token comment" spellcheck="true">// 只和Vue.options合并</span>    <span class="token keyword">return</span> Sub<span class="token punctuation">;</span><span class="token punctuation">}</span></code></pre><h4 id="组件渲染"><a href="#组件渲染" class="headerlink" title="组件渲染"></a>组件渲染</h4><blockquote><p>全局组件: Vue.component(id, options) 会调用Sub = Vue.extend(option), 然后对options进行映射 options[id] = Sub</p><ol><li>创建真实DOM时，判断当前标签是不是原生标签，如果不是在判断是不是组件</li><li>如果是组件，给其data属性上挂载hook对象，并加上init方法。</li><li>init用于初始化组件(因为组件无el元素，手动调用组件的$mounte方法并做到兼容无el元素返回真实DOM)，将组件内的模板解析成真是DOM挂载到$el上</li><li>最后将$el替换定义的组件标签，加载真实DOM</li></ol></blockquote><pre class=" language-javascript"><code class="language-javascript"><span class="token comment" spellcheck="true">// 如果tag是组件 应该渲染一个组件的vnode isReservedTag定义了所有原生标签</span><span class="token keyword">if</span> <span class="token punctuation">(</span><span class="token function">isReservedTag</span><span class="token punctuation">(</span>tag<span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>    <span class="token keyword">return</span> <span class="token function">vnode</span><span class="token punctuation">(</span>vm<span class="token punctuation">,</span> tag<span class="token punctuation">,</span> data<span class="token punctuation">,</span> data<span class="token punctuation">.</span>key<span class="token punctuation">,</span> children<span class="token punctuation">,</span> undefined<span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token punctuation">}</span> <span class="token keyword">else</span> <span class="token punctuation">{</span>    <span class="token keyword">const</span> Ctor <span class="token operator">=</span> vm<span class="token punctuation">.</span>$options<span class="token punctuation">.</span>components<span class="token punctuation">[</span>tag<span class="token punctuation">]</span>    <span class="token keyword">return</span> <span class="token function">createComponent</span><span class="token punctuation">(</span>vm<span class="token punctuation">,</span> tag<span class="token punctuation">,</span> data<span class="token punctuation">,</span> data<span class="token punctuation">.</span>key<span class="token punctuation">,</span> children<span class="token punctuation">,</span> Ctor<span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token punctuation">}</span><span class="token comment" spellcheck="true">// 创建组件的虚拟节点, 为了区分组件和元素  data.hook  /  componentOptions</span><span class="token keyword">function</span> <span class="token function">createComponent</span><span class="token punctuation">(</span>vm<span class="token punctuation">,</span> tag<span class="token punctuation">,</span> data<span class="token punctuation">,</span> key<span class="token punctuation">,</span> children<span class="token punctuation">,</span> Ctor<span class="token punctuation">)</span> <span class="token punctuation">{</span>    <span class="token comment" spellcheck="true">// 组件的构造函数</span>    <span class="token keyword">if</span><span class="token punctuation">(</span><span class="token function">isObject</span><span class="token punctuation">(</span>Ctor<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">{</span>        Ctor <span class="token operator">=</span> vm<span class="token punctuation">.</span>$options<span class="token punctuation">.</span>_base<span class="token punctuation">.</span><span class="token function">extend</span><span class="token punctuation">(</span>Ctor<span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment" spellcheck="true">// Vue.extend </span>    <span class="token punctuation">}</span>    data<span class="token punctuation">.</span>hook <span class="token operator">=</span> <span class="token punctuation">{</span> <span class="token comment" spellcheck="true">// 等会渲染组件时 需要调用此初始化方法</span>        <span class="token function">init</span><span class="token punctuation">(</span>vnode<span class="token punctuation">)</span><span class="token punctuation">{</span>           <span class="token keyword">let</span> vm <span class="token operator">=</span> vnode<span class="token punctuation">.</span>componentInstance <span class="token operator">=</span>  <span class="token keyword">new</span> <span class="token class-name">Ctor</span><span class="token punctuation">(</span><span class="token punctuation">{</span>_isComponent<span class="token punctuation">:</span><span class="token boolean">true</span><span class="token punctuation">}</span><span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment" spellcheck="true">// new Sub 会用此选项和组件的配置进行合并</span>           vm<span class="token punctuation">.</span><span class="token function">$mount</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment" spellcheck="true">// 组件挂载完成后 会在 vnode.componentInstance.$el => &lt;button></span>        <span class="token punctuation">}</span>    <span class="token punctuation">}</span>    <span class="token keyword">return</span> <span class="token function">vnode</span><span class="token punctuation">(</span>vm<span class="token punctuation">,</span><span class="token template-string"><span class="token string">`vue-component-</span><span class="token interpolation"><span class="token interpolation-punctuation punctuation">${</span>tag<span class="token interpolation-punctuation punctuation">}</span></span><span class="token string">`</span></span><span class="token punctuation">,</span>data<span class="token punctuation">,</span>key<span class="token punctuation">,</span>undefined<span class="token punctuation">,</span>undefined<span class="token punctuation">,</span><span class="token punctuation">{</span>Ctor<span class="token punctuation">,</span>children<span class="token punctuation">}</span><span class="token punctuation">)</span><span class="token punctuation">}</span><span class="token comment" spellcheck="true">// patch 方法生成DOM元素  createElm方法</span><span class="token keyword">if</span> <span class="token punctuation">(</span><span class="token function">createComponent</span><span class="token punctuation">(</span>vnode<span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>    <span class="token comment" spellcheck="true">// 返回组件对应的真实节点</span>    <span class="token keyword">return</span> vnode<span class="token punctuation">.</span>componentInstance<span class="token punctuation">.</span>$el<span class="token punctuation">;</span><span class="token punctuation">}</span><span class="token keyword">function</span> <span class="token function">createComponent</span><span class="token punctuation">(</span>vnode<span class="token punctuation">)</span> <span class="token punctuation">{</span>    <span class="token keyword">let</span> i <span class="token operator">=</span> vnode<span class="token punctuation">.</span>data<span class="token punctuation">;</span> <span class="token comment" spellcheck="true">//  vnode.data.hook.init</span>    <span class="token keyword">if</span> <span class="token punctuation">(</span><span class="token punctuation">(</span>i <span class="token operator">=</span> i<span class="token punctuation">.</span>hook<span class="token punctuation">)</span> <span class="token operator">&amp;&amp;</span> <span class="token punctuation">(</span>i <span class="token operator">=</span> i<span class="token punctuation">.</span>init<span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>        <span class="token function">i</span><span class="token punctuation">(</span>vnode<span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment" spellcheck="true">// 调用init方法</span>    <span class="token punctuation">}</span>    <span class="token keyword">if</span><span class="token punctuation">(</span>vnode<span class="token punctuation">.</span>componentInstance<span class="token punctuation">)</span><span class="token punctuation">{</span> <span class="token comment" spellcheck="true">// 有属性说明子组件new完毕了，并且组件对应的真实DOM挂载到了componentInstance.$el</span>        <span class="token keyword">return</span> <span class="token boolean">true</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span><span class="token punctuation">}</span></code></pre><h3 id="5-DOM-DIFF"><a href="#5-DOM-DIFF" class="headerlink" title="5. DOM DIFF"></a>5. DOM DIFF</h3><blockquote><p>每次watcher调度更新dom都是全量更新，消耗比较大，所以需要在patch的时候，最大程序的复用原先的DOM，最小程序的更新DOM。</p><ol><li>对比标签: 在diff过程中会先比较标签是否一致，如果标签不一致用新的标签替换掉老的标签</li><li>对比文本: 如果标签一致，有可能都是文本节点，那就比较文本的内容即可</li><li>对比属性: 标签一直，将新属性赋值给老DOM并删除老DOM多余的属性，不需重新生成DOM，style和class做了特殊处理，因为在vNode中，style是一个对象，需要遍历给el.style设置属性，class不用setAttribute, 直接el.class 赋值即可</li><li>比对子元素</li></ol></blockquote><pre class=" language-javascript"><code class="language-javascript"><span class="token comment" spellcheck="true">// 比较孩子节点</span><span class="token keyword">let</span> oldChildren <span class="token operator">=</span> oldVnode<span class="token punctuation">.</span>children <span class="token operator">||</span> <span class="token punctuation">[</span><span class="token punctuation">]</span><span class="token punctuation">;</span><span class="token keyword">let</span> newChildren <span class="token operator">=</span> vnode<span class="token punctuation">.</span>children <span class="token operator">||</span> <span class="token punctuation">[</span><span class="token punctuation">]</span><span class="token punctuation">;</span><span class="token comment" spellcheck="true">// 新老都有需要比对儿子</span><span class="token keyword">if</span><span class="token punctuation">(</span>oldChildren<span class="token punctuation">.</span>length <span class="token operator">></span> <span class="token number">0</span> <span class="token operator">&amp;&amp;</span> newChildren<span class="token punctuation">.</span>length <span class="token operator">></span> <span class="token number">0</span><span class="token punctuation">)</span><span class="token punctuation">{</span>    <span class="token function">updateChildren</span><span class="token punctuation">(</span>el<span class="token punctuation">,</span> oldChildren<span class="token punctuation">,</span> newChildren<span class="token punctuation">)</span><span class="token comment" spellcheck="true">// 老的有儿子新的没有清空即可</span><span class="token punctuation">}</span><span class="token keyword">else</span> <span class="token keyword">if</span><span class="token punctuation">(</span>oldChildren<span class="token punctuation">.</span>length <span class="token operator">></span> <span class="token number">0</span> <span class="token punctuation">)</span><span class="token punctuation">{</span>    el<span class="token punctuation">.</span>innerHTML <span class="token operator">=</span> <span class="token string">''</span><span class="token punctuation">;</span><span class="token comment" spellcheck="true">// 新的有儿子</span><span class="token punctuation">}</span><span class="token keyword">else</span> <span class="token keyword">if</span><span class="token punctuation">(</span>newChildren<span class="token punctuation">.</span>length <span class="token operator">></span> <span class="token number">0</span><span class="token punctuation">)</span><span class="token punctuation">{</span>    <span class="token keyword">for</span><span class="token punctuation">(</span><span class="token keyword">let</span> i <span class="token operator">=</span> <span class="token number">0</span> <span class="token punctuation">;</span> i <span class="token operator">&lt;</span> newChildren<span class="token punctuation">.</span>length <span class="token punctuation">;</span>i<span class="token operator">++</span><span class="token punctuation">)</span><span class="token punctuation">{</span>        <span class="token keyword">let</span> child <span class="token operator">=</span> newChildren<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">;</span>        el<span class="token punctuation">.</span><span class="token function">appendChild</span><span class="token punctuation">(</span><span class="token function">createElm</span><span class="token punctuation">(</span>child<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span><span class="token punctuation">}</span></code></pre><blockquote><p>vue中子节点比较采用了双指针的思想</p><ul><li>头头比较 =&gt; 尾尾比较 =&gt; 头尾比较 =&gt; 尾头比较</li><li>如果比对相同，则头指针后移，尾指针前移</li><li>在比对过程中，可能出现空值情况则直接跳过</li><li>当头尾指针重合，比对结束</li><li>结束后，如果新node子节点多，appendChile</li><li>如果老node子节点多，removeChild</li></ul></blockquote><pre class=" language-javascript"><code class="language-javascript"><span class="token comment" spellcheck="true">// 1.在开头和结尾新增元素</span><span class="token keyword">function</span> <span class="token function">isSameVnode</span><span class="token punctuation">(</span>oldVnode<span class="token punctuation">,</span>newVnode<span class="token punctuation">)</span><span class="token punctuation">{</span>    <span class="token comment" spellcheck="true">// 如果两个人的标签和key 一样我认为是同一个节点 虚拟节点一样我就可以复用真实节点了</span>    <span class="token keyword">return</span> <span class="token punctuation">(</span>oldVnode<span class="token punctuation">.</span>tag <span class="token operator">===</span> newVnode<span class="token punctuation">.</span>tag<span class="token punctuation">)</span> <span class="token operator">&amp;&amp;</span> <span class="token punctuation">(</span>oldVnode<span class="token punctuation">.</span>key <span class="token operator">===</span> newVnode<span class="token punctuation">.</span>key<span class="token punctuation">)</span><span class="token punctuation">}</span><span class="token keyword">function</span> <span class="token function">updateChildren</span><span class="token punctuation">(</span>parent<span class="token punctuation">,</span> oldChildren<span class="token punctuation">,</span> newChildren<span class="token punctuation">)</span> <span class="token punctuation">{</span>    <span class="token keyword">let</span> oldStartIndex <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span>    <span class="token keyword">let</span> oldStartVnode <span class="token operator">=</span> oldChildren<span class="token punctuation">[</span><span class="token number">0</span><span class="token punctuation">]</span><span class="token punctuation">;</span>    <span class="token keyword">let</span> oldEndIndex <span class="token operator">=</span> oldChildren<span class="token punctuation">.</span>length <span class="token operator">-</span> <span class="token number">1</span><span class="token punctuation">;</span>    <span class="token keyword">let</span> oldEndVnode <span class="token operator">=</span> oldChildren<span class="token punctuation">[</span>oldEndIndex<span class="token punctuation">]</span><span class="token punctuation">;</span>    <span class="token keyword">let</span> newStartIndex <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span>    <span class="token keyword">let</span> newStartVnode <span class="token operator">=</span> newChildren<span class="token punctuation">[</span><span class="token number">0</span><span class="token punctuation">]</span><span class="token punctuation">;</span>    <span class="token keyword">let</span> newEndIndex <span class="token operator">=</span> newChildren<span class="token punctuation">.</span>length <span class="token operator">-</span> <span class="token number">1</span><span class="token punctuation">;</span>    <span class="token keyword">let</span> newEndVnode <span class="token operator">=</span> newChildren<span class="token punctuation">[</span>newEndIndex<span class="token punctuation">]</span><span class="token punctuation">;</span>    <span class="token keyword">while</span> <span class="token punctuation">(</span>oldStartIndex <span class="token operator">&lt;=</span> oldEndIndex <span class="token operator">&amp;&amp;</span> newStartIndex <span class="token operator">&lt;=</span> newEndIndex<span class="token punctuation">)</span> <span class="token punctuation">{</span>        <span class="token comment" spellcheck="true">// 优化向后追加逻辑</span>        <span class="token keyword">if</span><span class="token punctuation">(</span><span class="token function">isSameVnode</span><span class="token punctuation">(</span>oldStartVnode<span class="token punctuation">,</span>newStartVnode<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">{</span>            <span class="token function">patch</span><span class="token punctuation">(</span>oldStartVnode<span class="token punctuation">,</span>newStartVnode<span class="token punctuation">)</span><span class="token punctuation">;</span>            oldStartVnode <span class="token operator">=</span> oldChildren<span class="token punctuation">[</span><span class="token operator">++</span>oldStartIndex<span class="token punctuation">]</span><span class="token punctuation">;</span>            newStartVnode <span class="token operator">=</span> newChildren<span class="token punctuation">[</span><span class="token operator">++</span>newStartIndex<span class="token punctuation">]</span><span class="token punctuation">;</span>        <span class="token comment" spellcheck="true">// 优化向前追加逻辑</span>        <span class="token punctuation">}</span><span class="token keyword">else</span> <span class="token keyword">if</span><span class="token punctuation">(</span><span class="token function">isSameVnode</span><span class="token punctuation">(</span>oldEndVnode<span class="token punctuation">,</span>newEndVnode<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">{</span>             <span class="token function">patch</span><span class="token punctuation">(</span>oldEndVnode<span class="token punctuation">,</span>newEndVnode<span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment" spellcheck="true">// 比较孩子 </span>            oldEndVnode <span class="token operator">=</span> oldChildren<span class="token punctuation">[</span><span class="token operator">--</span>oldEndIndex<span class="token punctuation">]</span><span class="token punctuation">;</span>            newEndVnode <span class="token operator">=</span> newChildren<span class="token punctuation">[</span><span class="token operator">--</span>newEndIndex<span class="token punctuation">]</span><span class="token punctuation">;</span>        <span class="token punctuation">}</span>    <span class="token punctuation">}</span>    <span class="token keyword">if</span><span class="token punctuation">(</span>newStartIndex <span class="token operator">&lt;=</span> newEndIndex<span class="token punctuation">)</span><span class="token punctuation">{</span>        <span class="token keyword">for</span><span class="token punctuation">(</span><span class="token keyword">let</span> i <span class="token operator">=</span> newStartIndex <span class="token punctuation">;</span> i<span class="token operator">&lt;=</span>newEndIndex <span class="token punctuation">;</span>i<span class="token operator">++</span><span class="token punctuation">)</span><span class="token punctuation">{</span>            <span class="token keyword">let</span> ele <span class="token operator">=</span> newChildren<span class="token punctuation">[</span>newEndIndex<span class="token operator">+</span><span class="token number">1</span><span class="token punctuation">]</span> <span class="token operator">==</span> <span class="token keyword">null</span><span class="token operator">?</span> <span class="token keyword">null</span><span class="token punctuation">:</span>newChildren<span class="token punctuation">[</span>newEndIndex<span class="token operator">+</span><span class="token number">1</span><span class="token punctuation">]</span><span class="token punctuation">.</span>el<span class="token punctuation">;</span>            parent<span class="token punctuation">.</span><span class="token function">insertBefore</span><span class="token punctuation">(</span><span class="token function">createElm</span><span class="token punctuation">(</span>newChildren<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token punctuation">,</span>ele<span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token punctuation">}</span>    <span class="token punctuation">}</span><span class="token punctuation">}</span><span class="token comment" spellcheck="true">// 头移动到尾部</span><span class="token keyword">else</span> <span class="token keyword">if</span><span class="token punctuation">(</span><span class="token function">isSameVnode</span><span class="token punctuation">(</span>oldStartVnode<span class="token punctuation">,</span>newEndVnode<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">{</span>    <span class="token function">patch</span><span class="token punctuation">(</span>oldStartVnode<span class="token punctuation">,</span>newEndVnode<span class="token punctuation">)</span><span class="token punctuation">;</span>    parent<span class="token punctuation">.</span><span class="token function">insertBefore</span><span class="token punctuation">(</span>oldStartVnode<span class="token punctuation">.</span>el<span class="token punctuation">,</span>oldEndVnode<span class="token punctuation">.</span>el<span class="token punctuation">.</span>nextSibling<span class="token punctuation">)</span><span class="token punctuation">;</span>    oldStartVnode <span class="token operator">=</span> oldChildren<span class="token punctuation">[</span><span class="token operator">++</span>oldStartIndex<span class="token punctuation">]</span><span class="token punctuation">;</span>    newEndVnode <span class="token operator">=</span> newChildren<span class="token punctuation">[</span><span class="token operator">--</span>newEndIndex<span class="token punctuation">]</span><span class="token comment" spellcheck="true">// 尾部移动到头部</span><span class="token punctuation">}</span><span class="token keyword">else</span> <span class="token keyword">if</span><span class="token punctuation">(</span><span class="token function">isSameVnode</span><span class="token punctuation">(</span>oldEndVnode<span class="token punctuation">,</span>newStartVnode<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">{</span>    <span class="token function">patch</span><span class="token punctuation">(</span>oldEndVnode<span class="token punctuation">,</span>newStartVnode<span class="token punctuation">)</span><span class="token punctuation">;</span>    parent<span class="token punctuation">.</span><span class="token function">insertBefore</span><span class="token punctuation">(</span>oldEndVnode<span class="token punctuation">.</span>el<span class="token punctuation">,</span>oldStartVnode<span class="token punctuation">.</span>el<span class="token punctuation">)</span><span class="token punctuation">;</span>    oldEndVnode <span class="token operator">=</span> oldChildren<span class="token punctuation">[</span><span class="token operator">--</span>oldEndIndex<span class="token punctuation">]</span><span class="token punctuation">;</span>    newStartVnode <span class="token operator">=</span> newChildren<span class="token punctuation">[</span><span class="token operator">++</span>newStartIndex<span class="token punctuation">]</span><span class="token punctuation">}</span></code></pre><blockquote><p>暴力比对</p></blockquote><pre class=" language-javascript"><code class="language-javascript"><span class="token keyword">function</span> <span class="token function">makeIndexByKey</span><span class="token punctuation">(</span>children<span class="token punctuation">)</span> <span class="token punctuation">{</span>    <span class="token keyword">let</span> map <span class="token operator">=</span> <span class="token punctuation">{</span><span class="token punctuation">}</span><span class="token punctuation">;</span>    children<span class="token punctuation">.</span><span class="token function">forEach</span><span class="token punctuation">(</span><span class="token punctuation">(</span>item<span class="token punctuation">,</span> index<span class="token punctuation">)</span> <span class="token operator">=</span><span class="token operator">></span> <span class="token punctuation">{</span>        map<span class="token punctuation">[</span>item<span class="token punctuation">.</span>key<span class="token punctuation">]</span> <span class="token operator">=</span> index    <span class="token punctuation">}</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token keyword">return</span> map<span class="token punctuation">;</span> <span class="token punctuation">}</span><span class="token keyword">let</span> map <span class="token operator">=</span> <span class="token function">makeIndexByKey</span><span class="token punctuation">(</span>oldChildren<span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token comment" spellcheck="true">// 给所有的孩子进行编号</span><span class="token keyword">let</span> moveIndex <span class="token operator">=</span> map<span class="token punctuation">[</span>newStartVnode<span class="token punctuation">.</span>key<span class="token punctuation">]</span><span class="token punctuation">;</span><span class="token keyword">if</span> <span class="token punctuation">(</span>moveIndex <span class="token operator">==</span> undefined<span class="token punctuation">)</span> <span class="token punctuation">{</span> <span class="token comment" spellcheck="true">// 老的中没有将新元素插入</span>    parent<span class="token punctuation">.</span><span class="token function">insertBefore</span><span class="token punctuation">(</span><span class="token function">createElm</span><span class="token punctuation">(</span>newStartVnode<span class="token punctuation">)</span><span class="token punctuation">,</span> oldStartVnode<span class="token punctuation">.</span>el<span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token punctuation">}</span> <span class="token keyword">else</span> <span class="token punctuation">{</span> <span class="token comment" spellcheck="true">// 有的话做移动操作</span>    <span class="token keyword">let</span> moveVnode <span class="token operator">=</span> oldChildren<span class="token punctuation">[</span>moveIndex<span class="token punctuation">]</span><span class="token punctuation">;</span>     oldChildren<span class="token punctuation">[</span>moveIndex<span class="token punctuation">]</span> <span class="token operator">=</span> undefined<span class="token punctuation">;</span>    parent<span class="token punctuation">.</span><span class="token function">insertBefore</span><span class="token punctuation">(</span>moveVnode<span class="token punctuation">.</span>el<span class="token punctuation">,</span> oldStartVnode<span class="token punctuation">.</span>el<span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token function">patch</span><span class="token punctuation">(</span>moveVnode<span class="token punctuation">,</span> newStartVnode<span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token punctuation">}</span>newStartVnode <span class="token operator">=</span> newChildren<span class="token punctuation">[</span><span class="token operator">++</span>newStartIndex<span class="token punctuation">]</span><span class="token comment" spellcheck="true">// 用新的元素去老的中进行查找，如果找到则移动，找不到则直接插入</span><span class="token keyword">if</span><span class="token punctuation">(</span>oldStartIndex <span class="token operator">&lt;=</span> oldEndIndex<span class="token punctuation">)</span><span class="token punctuation">{</span>    <span class="token keyword">for</span><span class="token punctuation">(</span><span class="token keyword">let</span> i <span class="token operator">=</span> oldStartIndex<span class="token punctuation">;</span> i<span class="token operator">&lt;=</span>oldEndIndex<span class="token punctuation">;</span>i<span class="token operator">++</span><span class="token punctuation">)</span><span class="token punctuation">{</span>        <span class="token keyword">let</span> child <span class="token operator">=</span> oldChildren<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">;</span>        <span class="token keyword">if</span><span class="token punctuation">(</span>child <span class="token operator">!=</span> undefined<span class="token punctuation">)</span><span class="token punctuation">{</span>            parent<span class="token punctuation">.</span><span class="token function">removeChild</span><span class="token punctuation">(</span>child<span class="token punctuation">.</span>el<span class="token punctuation">)</span>        <span class="token punctuation">}</span>    <span class="token punctuation">}</span><span class="token punctuation">}</span><span class="token comment" spellcheck="true">// 如果有剩余则直接删除</span><span class="token keyword">if</span><span class="token punctuation">(</span><span class="token operator">!</span>oldStartVnode<span class="token punctuation">)</span><span class="token punctuation">{</span>    oldStartVnode <span class="token operator">=</span> oldChildren<span class="token punctuation">[</span><span class="token operator">++</span>oldStartIndex<span class="token punctuation">]</span><span class="token punctuation">;</span><span class="token punctuation">}</span><span class="token keyword">else</span> <span class="token keyword">if</span><span class="token punctuation">(</span><span class="token operator">!</span>oldEndVnode<span class="token punctuation">)</span><span class="token punctuation">{</span>    oldEndVnode <span class="token operator">=</span> oldChildren<span class="token punctuation">[</span><span class="token operator">--</span>oldEndIndex<span class="token punctuation">]</span><span class="token punctuation">}</span></code></pre>]]></content>
      
      
      <categories>
          
          <category> 前端 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> Vue </tag>
            
            <tag> 源码 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>Cookie &amp;&amp; Session</title>
      <link href="/2019/11/25/Cookie/"/>
      <url>/2019/11/25/Cookie/</url>
      
        <content type="html"><![CDATA[<h3 id="会话技术-Cookie-amp-amp-Session"><a href="#会话技术-Cookie-amp-amp-Session" class="headerlink" title="会话技术 Cookie &amp;&amp; Session"></a>会话技术 Cookie &amp;&amp; Session</h3><blockquote><p>会话 : 一次会话中包含多次请求和响应。</p></blockquote><ul><li>一次会话 : 浏览器第一次给服务器资源发送请求，会话建立，直到有一方断开为止</li><li>作用 :  再一次会话的范围内的多次请求间，共享数据<ul><li>客户端会话技术 : Cookie</li><li>服务器端会话技术 : Session</li></ul></li></ul><h3 id="Cookie"><a href="#Cookie" class="headerlink" title="Cookie"></a>Cookie</h3><blockquote><p>概念 : 客户端会话技术，将数据保存在客户端</p></blockquote><p>使用步骤 : </p><ul><li>1、创建Cookie对象，绑定数据<ul><li>new Cookie(String name , String value)</li></ul></li><li>2、发送Cookie对象<ul><li>response.addCookie(Cookie cookie)</li></ul></li><li>3、获取Cookie，拿到数据<ul><li>Cookie[] request.getCookies()</li></ul></li></ul><p><code>实现原理 : 基于响应头set-cookie和请求头cookie实现</code></p><pre class=" language-java"><code class="language-java"><span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">Demo1Cookie</span> <span class="token keyword">extends</span> <span class="token class-name">HttpServlet</span> <span class="token punctuation">{</span>    <span class="token keyword">protected</span> <span class="token keyword">void</span> <span class="token function">doPost</span><span class="token punctuation">(</span>HttpServletRequest request<span class="token punctuation">,</span> HttpServletResponse response<span class="token punctuation">)</span> <span class="token keyword">throws</span> ServletException<span class="token punctuation">,</span> IOException <span class="token punctuation">{</span>        <span class="token comment" spellcheck="true">// 创建Cookie对象</span>        Cookie c <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">Cookie</span><span class="token punctuation">(</span><span class="token string">"msg"</span><span class="token punctuation">,</span><span class="token string">"hello"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token comment" spellcheck="true">// 发送Cookie</span>        response<span class="token punctuation">.</span><span class="token function">addCookie</span><span class="token punctuation">(</span>c<span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token comment" spellcheck="true">// 获取Cookies</span>        Cookie<span class="token punctuation">[</span><span class="token punctuation">]</span> cs <span class="token operator">=</span> request<span class="token punctuation">.</span><span class="token function">getCookies</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token keyword">if</span> <span class="token punctuation">(</span>cs <span class="token operator">!=</span> null<span class="token punctuation">)</span><span class="token punctuation">{</span>            <span class="token keyword">for</span> <span class="token punctuation">(</span>Cookie c <span class="token operator">:</span> cs<span class="token punctuation">)</span> <span class="token punctuation">{</span>                System<span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span>c<span class="token punctuation">.</span><span class="token function">getName</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">+</span> <span class="token string">" : "</span> <span class="token operator">+</span> c<span class="token punctuation">.</span><span class="token function">getValue</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>            <span class="token punctuation">}</span>        <span class="token punctuation">}</span>    <span class="token punctuation">}</span>    <span class="token keyword">protected</span> <span class="token keyword">void</span> <span class="token function">doGet</span><span class="token punctuation">(</span>HttpServletRequest request<span class="token punctuation">,</span> HttpServletResponse response<span class="token punctuation">)</span> <span class="token keyword">throws</span> ServletException<span class="token punctuation">,</span> IOException <span class="token punctuation">{</span>        <span class="token keyword">this</span><span class="token punctuation">.</span><span class="token function">doPost</span><span class="token punctuation">(</span>request<span class="token punctuation">,</span> response<span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span><span class="token punctuation">}</span></code></pre><blockquote><p>Cookie细节</p></blockquote><ul><li>一次可不可以发送多个Cookie?<ul><li>可以创建多个Cookie对象，使用response对象调用多次addCookie方法发送cookie即可</li></ul></li><li>cookie在浏览器中保存多长时间?<ul><li>默认情况下，当浏览器关闭后，Cookie数据就被销毁</li><li>持久化存储 : <ul><li>setMaxAge(int seconds)<ul><li>正数 : 将Cookie数据写到硬盘的文件中，持久化存储。cookie存活时间</li><li>负数 : 默认值，浏览器关闭，Cookie就销毁</li><li>零 : 删除cookie信息</li></ul></li></ul></li></ul></li><li>cookie能不能存中文?<ul><li>在tomcat8 之前，cookie中不能直接存储中文数据。<br>  -需要将中文数据转码，一般采用url编码</li><li>在tomcat8之后，cookie是可以直接存储中文数据的</li></ul></li><li>cookie共享问题?<ul><li>假设在个tomcat服务器中，部署了多个web项目，它们之间能不能共享Cookie?<ul><li>默认情况下cookie不能共享</li><li>setPath(String path) : 设置cookie的获取范围。默认情况下，设置当前的虚拟目录</li><li>如果要共享，则可以将path设置为”/“</li></ul></li><li>不同的tomcat服务器间cookie共享问题？<ul><li>调用setDomain(String path) : 如果设置以及域名相同，那么多个服务器之间cookie可以共享<ul><li>setDomain(“.baidu.com”) , 那么tieba.baidu.com 和 news.baodu.com 可以共享</li></ul></li></ul></li></ul></li></ul><blockquote><p>Cookie的特点和作用</p></blockquote><ul><li><p>1、cookie存储数据在客户端浏览器</p></li><li><p>2、浏览器对于单个cookie的大小有限制(4kb)，以及对同一个域名下的总cookie数量也有限制(20个)</p></li><li><p>作用 : </p><ul><li>1、cookie一般用于存储少量的不太敏感的数据</li><li>2、在不登录的情况下，完成服务器对客户端的身份识别</li></ul></li></ul><blockquote><p>小案例 : 使用Cookie存储用户上次访问时间，如果第一次访问，则返回第一次访问提示语</p></blockquote><pre class=" language-java"><code class="language-java"><span class="token annotation punctuation">@WebServlet</span><span class="token punctuation">(</span><span class="token string">"/case1"</span><span class="token punctuation">)</span><span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">Case1</span> <span class="token keyword">extends</span> <span class="token class-name">HttpServlet</span> <span class="token punctuation">{</span>    <span class="token keyword">protected</span> <span class="token keyword">void</span> <span class="token function">doPost</span><span class="token punctuation">(</span>HttpServletRequest request<span class="token punctuation">,</span> HttpServletResponse response<span class="token punctuation">)</span> <span class="token keyword">throws</span> ServletException<span class="token punctuation">,</span> IOException <span class="token punctuation">{</span>        <span class="token comment" spellcheck="true">// 设置响应的消息体数据格式</span>        response<span class="token punctuation">.</span><span class="token function">setContentType</span><span class="token punctuation">(</span><span class="token string">"text/html;charset=utf-8"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token comment" spellcheck="true">// 1. 获取所有的Cookie</span>        Cookie<span class="token punctuation">[</span><span class="token punctuation">]</span> cookies <span class="token operator">=</span> request<span class="token punctuation">.</span><span class="token function">getCookies</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token keyword">boolean</span> flag <span class="token operator">=</span> <span class="token boolean">false</span> <span class="token punctuation">;</span> <span class="token comment" spellcheck="true">// 没有cookie为lastTime</span>        <span class="token keyword">if</span> <span class="token punctuation">(</span>cookies<span class="token operator">!=</span>null <span class="token operator">&amp;&amp;</span> cookies<span class="token punctuation">.</span>length <span class="token operator">></span> <span class="token number">0</span><span class="token punctuation">)</span><span class="token punctuation">{</span>            <span class="token keyword">for</span> <span class="token punctuation">(</span>Cookie cookie <span class="token operator">:</span>                    cookies<span class="token punctuation">)</span> <span class="token punctuation">{</span>                <span class="token comment" spellcheck="true">// 3.获取cookie的名称</span>                String name <span class="token operator">=</span> cookie<span class="token punctuation">.</span><span class="token function">getName</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>                <span class="token comment" spellcheck="true">// 4.判断名称是不是lastTime</span>                <span class="token keyword">if</span> <span class="token punctuation">(</span><span class="token string">"lastTime"</span><span class="token punctuation">.</span><span class="token function">equals</span><span class="token punctuation">(</span>name<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">{</span>                    <span class="token comment" spellcheck="true">// 有cookie，不是第一次访问</span>                    String value <span class="token operator">=</span> cookie<span class="token punctuation">.</span><span class="token function">getValue</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment" spellcheck="true">// 获取上次访问时间</span>                    flag <span class="token operator">=</span> <span class="token boolean">true</span> <span class="token punctuation">;</span>                    <span class="token comment" spellcheck="true">// 设置cookie的value</span>                    <span class="token comment" spellcheck="true">// 获取当前时间的字符串，重新设置cookie的值，重新发送cookie</span>                    Date date <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">Date</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>                    SimpleDateFormat sdf <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">SimpleDateFormat</span><span class="token punctuation">(</span><span class="token string">"yyyy年MM月dd日 HH:mm:ss"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>                    String str_date <span class="token operator">=</span> sdf<span class="token punctuation">.</span><span class="token function">format</span><span class="token punctuation">(</span>date<span class="token punctuation">)</span><span class="token punctuation">;</span>                    <span class="token comment" spellcheck="true">// 编码</span>                    str_date <span class="token operator">=</span> URLEncoder<span class="token punctuation">.</span><span class="token function">encode</span><span class="token punctuation">(</span>str_date<span class="token punctuation">,</span><span class="token string">"utf-8"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>                    cookie<span class="token punctuation">.</span><span class="token function">setValue</span><span class="token punctuation">(</span>str_date<span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment" spellcheck="true">// 设置本次访问时间</span>                    <span class="token comment" spellcheck="true">// 设置cookie的存活时间</span>                    cookie<span class="token punctuation">.</span><span class="token function">setMaxAge</span><span class="token punctuation">(</span><span class="token number">60</span><span class="token operator">*</span><span class="token number">60</span><span class="token operator">*</span><span class="token number">24</span><span class="token operator">*</span><span class="token number">30</span><span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment" spellcheck="true">// 30天</span>                    response<span class="token punctuation">.</span><span class="token function">addCookie</span><span class="token punctuation">(</span>cookie<span class="token punctuation">)</span><span class="token punctuation">;</span>                    <span class="token comment" spellcheck="true">// 响应数据</span>                    <span class="token comment" spellcheck="true">// 获取value</span>                    <span class="token comment" spellcheck="true">// 解码</span>                    value <span class="token operator">=</span> URLDecoder<span class="token punctuation">.</span><span class="token function">decode</span><span class="token punctuation">(</span>value<span class="token punctuation">,</span><span class="token string">"utf-8"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>                    response<span class="token punctuation">.</span><span class="token function">getWriter</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">write</span><span class="token punctuation">(</span><span class="token string">"&lt;h1>欢迎回来，您上次的访问时间为:"</span> <span class="token operator">+</span> value <span class="token operator">+</span><span class="token string">"&lt;/h1>"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>                    <span class="token keyword">break</span><span class="token punctuation">;</span>                <span class="token punctuation">}</span>            <span class="token punctuation">}</span>        <span class="token punctuation">}</span>        <span class="token keyword">if</span> <span class="token punctuation">(</span>cookies<span class="token operator">==</span>null <span class="token operator">||</span> cookies<span class="token punctuation">.</span>length <span class="token operator">==</span> <span class="token number">0</span> <span class="token operator">||</span> <span class="token operator">!</span>flag<span class="token punctuation">)</span><span class="token punctuation">{</span>            <span class="token comment" spellcheck="true">// 设置cookie的value</span>            <span class="token comment" spellcheck="true">// 获取当前时间的字符串，重新设置cookie的值，重新发送cookie</span>            Date date <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">Date</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>            SimpleDateFormat sdf <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">SimpleDateFormat</span><span class="token punctuation">(</span><span class="token string">"yyyy年MM月dd日 HH:mm:ss"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>            String str_date <span class="token operator">=</span> sdf<span class="token punctuation">.</span><span class="token function">format</span><span class="token punctuation">(</span>date<span class="token punctuation">)</span><span class="token punctuation">;</span>            str_date <span class="token operator">=</span> URLEncoder<span class="token punctuation">.</span><span class="token function">encode</span><span class="token punctuation">(</span>str_date<span class="token punctuation">,</span><span class="token string">"utf-8"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>            Cookie cookie <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">Cookie</span><span class="token punctuation">(</span><span class="token string">"lastTime"</span><span class="token punctuation">,</span>str_date<span class="token punctuation">)</span><span class="token punctuation">;</span>            <span class="token comment" spellcheck="true">// 设置cookie的存活时间</span>            cookie<span class="token punctuation">.</span><span class="token function">setMaxAge</span><span class="token punctuation">(</span><span class="token number">60</span><span class="token operator">*</span><span class="token number">60</span><span class="token operator">*</span><span class="token number">24</span><span class="token operator">*</span><span class="token number">30</span><span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment" spellcheck="true">// 30天</span>            response<span class="token punctuation">.</span><span class="token function">addCookie</span><span class="token punctuation">(</span>cookie<span class="token punctuation">)</span><span class="token punctuation">;</span>            response<span class="token punctuation">.</span><span class="token function">getWriter</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">write</span><span class="token punctuation">(</span><span class="token string">"&lt;h1>"</span> <span class="token operator">+</span> <span class="token string">"欢迎您首次访问"</span> <span class="token operator">+</span> <span class="token string">"&lt;/h1>"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token punctuation">}</span>    <span class="token punctuation">}</span>    <span class="token keyword">protected</span> <span class="token keyword">void</span> <span class="token function">doGet</span><span class="token punctuation">(</span>HttpServletRequest request<span class="token punctuation">,</span> HttpServletResponse response<span class="token punctuation">)</span> <span class="token keyword">throws</span> ServletException<span class="token punctuation">,</span> IOException <span class="token punctuation">{</span>        <span class="token keyword">this</span><span class="token punctuation">.</span><span class="token function">doPost</span><span class="token punctuation">(</span>request<span class="token punctuation">,</span> response<span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span><span class="token punctuation">}</span></code></pre><h3 id="Session"><a href="#Session" class="headerlink" title="Session"></a>Session</h3><blockquote><p>概念 : 服务器端会话技术，再一次会话的多次请求间共享数据，将数据保存在服务器端的对象中。HttpSession</p></blockquote><ul><li><p>获取HttpSession</p><ul><li>HttpSession session = request.getSession();</li></ul></li><li><p>使用HttpSession</p><ul><li>Object getAttribute(String name)</li><li>void setAttribute(String name , Object value)</li><li>void removeAttribute(String name)</li></ul></li></ul><p>Session 原理 ：session的实现是依赖于cookie的</p><ul><li>第一次获取session，没有cookie，会在内存中创建一个新的Session对象，有一个id值。</li><li>响应时，会设置响应头set-cookie:JSESSIONID=id </li><li>再次请求时: 会带上请求头cookie: JSESSIONID=id</li><li>获取session时，会在内存中找到对应id值的session</li></ul>]]></content>
      
      
      <categories>
          
          <category> Cookie </category>
          
      </categories>
      
      
        <tags>
            
            <tag> Cookie </tag>
            
            <tag> Session </tag>
            
            <tag> Java </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>Servlet</title>
      <link href="/2019/11/11/Servlet/"/>
      <url>/2019/11/11/Servlet/</url>
      
        <content type="html"><![CDATA[<h3 id="概念-server-applet-执行在服务器端的小程序"><a href="#概念-server-applet-执行在服务器端的小程序" class="headerlink" title="概念 (server applet )  : 执行在服务器端的小程序"></a>概念 (server applet )  : 执行在服务器端的小程序</h3><blockquote><ul><li>就是一个接口，定义类Java类被浏览器访问到(tomcat识别)的规则。</li><li>我们要自定义一个类，实现Servlet接口，复写方法</li></ul></blockquote><h3 id="快速入门"><a href="#快速入门" class="headerlink" title="快速入门"></a>快速入门</h3><blockquote><ul><li>1、创建javaEE项目</li><li>2、定义一个类，实现Servlet接口<ul><li>public class Demo01Servlet implements Servlet</li></ul></li><li>3、实现接口中的抽象方法</li><li>4、配置Servlet(在web.xml中配置s)</li></ul></blockquote><pre class=" language-xml"><code class="language-xml">    <span class="token comment" spellcheck="true">&lt;!--  配置servlet  --></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>servlet</span><span class="token punctuation">></span></span>        <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>servlet-name</span><span class="token punctuation">></span></span>demo1<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>servlet-name</span><span class="token punctuation">></span></span>        <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>servlet-class</span><span class="token punctuation">></span></span>cn.jiatengda.web.servlet.Demo01Servlet<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>servlet-class</span><span class="token punctuation">></span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>servlet</span><span class="token punctuation">></span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>servlet-mapping</span><span class="token punctuation">></span></span>        <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>servlet-name</span><span class="token punctuation">></span></span>demo1<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>servlet-name</span><span class="token punctuation">></span></span>        <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>url-pattern</span><span class="token punctuation">></span></span>/demo1<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>url-pattern</span><span class="token punctuation">></span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>servlet-mapping</span><span class="token punctuation">></span></span></code></pre><h3 id="执行原理"><a href="#执行原理" class="headerlink" title="执行原理"></a>执行原理</h3><blockquote><ul><li>1、当服务器接收到客户端浏览器的请求后，会解析url路径，获取访问的Servlet的资源路径</li><li>2、查找web.xml , 是否有对应的&lt;url-pattern&gt;标签体内容</li><li>3、如果有，则找对应的&lt;servlet-class&gt;类名</li><li>4、 tomcat会将字节码文件加载进内存，并且创建对象</li><li>5、调用其方法</li></ul></blockquote><blockquote><p>Servlet 生命周期</p><ul><li>被创建 : 执行init方法，只执行一次<ul><li>Servlet什么时候被创建?<pre><code>-  默认情况下，第一次访问时，Servlet被创建- 可以配置Servlet创建时期</code></pre></li><li>init只执行一次，说明一个Servlet在内存中只存在一个对象，Servlet是单例的。<ul><li>多个用户同时访问时，可能存在线程安全问题</li><li>解决 : 尽量不要在Servlet中定义成员变量。即使定义了成员变量，也不要对其修改值。</li></ul></li></ul></li></ul></blockquote><pre class=" language-xml"><code class="language-xml"><span class="token comment" spellcheck="true">&lt;!--   执行Servlet创建时机            1. 第一次被访问时创建                值为负数，则第一次被访问时被创建            2. 在服务器启动时创建                值为0或者正整数           --></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>servlet</span><span class="token punctuation">></span></span>        <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>load-on-startup</span><span class="token punctuation">></span></span>-5<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>load-on-startup</span><span class="token punctuation">></span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>servlet</span><span class="token punctuation">></span></span></code></pre><blockquote><ul><li>提供服务 : 执行service方法，执行多次<ul><li>每次访问时都被执行一次</li></ul></li><li>被销毁 : 执行destroy方法 , 执行一次 <ul><li>Servlet被销毁时执行，服务器关闭时，Servlet被销毁</li><li>只有服务器正常关闭时才会执行destroy方法</li><li>一般用于释放资源</li></ul></li></ul></blockquote><pre class=" language-java"><code class="language-java"><span class="token keyword">package</span> cn<span class="token punctuation">.</span>jiatengda<span class="token punctuation">.</span>web<span class="token punctuation">.</span>servlet<span class="token punctuation">;</span><span class="token keyword">import</span> javax<span class="token punctuation">.</span>servlet<span class="token punctuation">.</span>*<span class="token punctuation">;</span><span class="token keyword">import</span> java<span class="token punctuation">.</span>io<span class="token punctuation">.</span>IOException<span class="token punctuation">;</span><span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">Demo02Servlet</span> <span class="token keyword">implements</span> <span class="token class-name">Servlet</span> <span class="token punctuation">{</span>    <span class="token comment" spellcheck="true">/**     * 初始化方法     * 在Servlet创建时被执行，只会执行一次     * @param servletConfig     * @throws ServletException     */</span>    <span class="token annotation punctuation">@Override</span>    <span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">init</span><span class="token punctuation">(</span>ServletConfig servletConfig<span class="token punctuation">)</span> <span class="token keyword">throws</span> ServletException <span class="token punctuation">{</span>        System<span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token string">"init .. "</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span>    <span class="token comment" spellcheck="true">/**     * 获取servletConfig对象 : servlet配置对象     * @return     */</span>    <span class="token annotation punctuation">@Override</span>    <span class="token keyword">public</span> ServletConfig <span class="token function">getServletConfig</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>        System<span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token string">"config .. "</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token keyword">return</span> null<span class="token punctuation">;</span>    <span class="token punctuation">}</span>    <span class="token comment" spellcheck="true">/**     * 提供服务方法     *  每一次Servlet被访问时被执行，执行多次     * @param servletRequest     * @param servletResponse     * @throws ServletException     * @throws IOException     */</span>    <span class="token annotation punctuation">@Override</span>    <span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">service</span><span class="token punctuation">(</span>ServletRequest servletRequest<span class="token punctuation">,</span> ServletResponse servletResponse<span class="token punctuation">)</span> <span class="token keyword">throws</span> ServletException<span class="token punctuation">,</span> IOException <span class="token punctuation">{</span>        System<span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token string">"service .. "</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span>    <span class="token comment" spellcheck="true">/**     * 获取Servlet的一些信息，版本、作者等等...     * @return     */</span>    <span class="token annotation punctuation">@Override</span>    <span class="token keyword">public</span> String <span class="token function">getServletInfo</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>        <span class="token keyword">return</span> null<span class="token punctuation">;</span>    <span class="token punctuation">}</span>    <span class="token comment" spellcheck="true">/**     * 销毁方法     * 在Servlet被杀死时执行，执行一次,服务器关闭时执行     */</span>    <span class="token annotation punctuation">@Override</span>    <span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">destroy</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>        System<span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token string">"destroy .. "</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span><span class="token punctuation">}</span></code></pre><h3 id="Servlet-3-0"><a href="#Servlet-3-0" class="headerlink" title="Servlet 3.0"></a>Servlet 3.0</h3><ul><li>好处 : <ul><li>支持注解配置，不需要web.xml</li></ul></li><li>步骤<ul><li>1、创建JavaEE项目，选择Servlet版本3.0以上，可以不创建web.xml</li><li>2、定义一个类，实现Servlet接口</li><li>3、复写方法</li><li>4、在类上使用@WebServlet注解配置<ul><li>@WebServlet(“/资源路径”)   </li></ul></li></ul></li></ul><h3 id="IDEA与Tomcat相关配置"><a href="#IDEA与Tomcat相关配置" class="headerlink" title="IDEA与Tomcat相关配置"></a>IDEA与Tomcat相关配置</h3><ul><li>IDEA会为每一个tomcat部署的项目单独建立一份配置文件</li><li>工作空间项目  和  tomcat部署的web项目<ul><li>tomcat真正访问的是<code>tomcat部署的web项目</code>,<code>tomcat部署的web项目</code>对应着<code>工作空间项目</code>web目录下的所有资源</li><li>WEB-IINF目录下的资源不能直接被浏览器访问</li><li>断点调试 : 使用<code>小虫子</code>debug 启动</li></ul></li></ul><h3 id="Servlet-体系结构"><a href="#Servlet-体系结构" class="headerlink" title="Servlet 体系结构"></a>Servlet 体系结构</h3><blockquote><p>Servlet 接口</p><ul><li>GenericeServlet  : 抽象类 ， 将Servlet接口中其他方法做了默认的空实现</li><li>HttpServlet  : 抽象类，对http协议的一中封装，简化操作<ul><li>定义类继承HttpServlet</li><li>复写了doGet/doPost 方法</li></ul></li></ul></blockquote><h3 id="Servlet-相关配置"><a href="#Servlet-相关配置" class="headerlink" title="Servlet 相关配置"></a>Servlet 相关配置</h3><ul><li>urlpartten : Servlet 访问路径 : 一个Servlet可以定义多个访问路径 :  @WebServlet({“/d5”,”/demo5”})</li><li>路径定义规则<ul><li>1、/xxx</li><li>2、/xxx/xxx</li><li>3、*.do</li></ul></li></ul><h3 id="HTTP"><a href="#HTTP" class="headerlink" title="HTTP :"></a>HTTP :</h3><blockquote><p>概念 ：Hyper Text Teansfer Protocol  超文本传输协议</p></blockquote><ul><li><p>传输协议 ：定义了客户端和服务器端通信时，发送数据的格式 </p><ul><li>特点:<ul><li>1、基于TCP/IP的高级协议</li><li>2、默认端口号是80</li><li>3、基于请求/响应模型的，一次请求对应一次响应</li><li>4、无状态的: 每次请求之间相互独立，不能交互数据</li></ul></li></ul></li><li><p>历史版本: </p><ul><li>1.0  每一次请求响应都会建立新的连接</li><li>1.1 复用链接</li></ul></li></ul><ul><li>请求消息数据格式<ul><li>请求行<ul><li>请求方式  请求url  请求的协议/版本</li><li>GET login.html  HTTP/1.1</li><li>请求方式 ：<ul><li>HTTP协议有7中请求方式，常用的两种<ul><li>POST </li><li>GET </li></ul></li></ul></li></ul></li><li>请求头 ：客户端浏览器告诉服务器一些信息<ul><li>请求头名称 : 请求头的值</li><li>常见的头<ul><li>1、User-Agent : 浏览器告诉服务器，我访问你使用的浏览器版本信息<ul><li>可以在服务器端获取该头的信息，解决浏览器的兼容性问题</li></ul></li><li>2、Referer : <ul><li>告诉服务器，我(当前请求)从哪里来?<ul><li>作用<ul><li>1、防盗链 : </li><li>2、统计工作 : </li></ul></li></ul></li></ul></li></ul></li></ul></li><li>请求空行<ul><li>空行，用于分割post请求的请求头和请求体的</li></ul></li><li>请求体 (正文)<ul><li>封装post请求消息的请求参数的</li></ul></li></ul></li></ul><ul><li>响应消息数据格式</li></ul><h3 id="Request"><a href="#Request" class="headerlink" title="Request"></a>Request</h3><blockquote><p>request对象和response对象的原理</p><ul><li>两个对象是由服务器创建的，我们来使用他们</li><li>request是来获取请求消息</li><li>response是来设置响应消息</li></ul></blockquote><blockquote><p>request 对象的继承体系结构</p><ul><li>ServerletRequest : 接口</li><li>HttpServerletRequest : 接口，继承ServerletRequest接口</li><li>RequestFacade extends HttpServerletRequest  : 实现类 (tomcat)</li></ul></blockquote><p>request功能  :</p><ul><li>获取请求消息 : <ul><li>获取请求行数据<ul><li>String getMethod() : 获取请求方式(GET)</li><li><code>获取虚拟目录</code> : String getContextPath</li><li>获取Servlet路径 : String getServletPath()</li><li>获取get方式的请求参数: String getQueryString()</li><li><code>获取请求的URI</code> :  String getRequestURI()</li><li>获取请求的URL :  String getRequestURL()</li><li>获取协议版本: String getProtocol()</li><li>获取客户机的IP地址 : String getRemoteAddr()</li></ul></li></ul></li></ul><pre class=" language-java"><code class="language-java"><span class="token keyword">package</span> cn<span class="token punctuation">.</span>jiatengda<span class="token punctuation">.</span>web<span class="token punctuation">.</span>servlet<span class="token punctuation">;</span><span class="token keyword">import</span> javax<span class="token punctuation">.</span>servlet<span class="token punctuation">.</span>ServletException<span class="token punctuation">;</span><span class="token keyword">import</span> javax<span class="token punctuation">.</span>servlet<span class="token punctuation">.</span>annotation<span class="token punctuation">.</span>WebServlet<span class="token punctuation">;</span><span class="token keyword">import</span> javax<span class="token punctuation">.</span>servlet<span class="token punctuation">.</span>http<span class="token punctuation">.</span>HttpServlet<span class="token punctuation">;</span><span class="token keyword">import</span> javax<span class="token punctuation">.</span>servlet<span class="token punctuation">.</span>http<span class="token punctuation">.</span>HttpServletRequest<span class="token punctuation">;</span><span class="token keyword">import</span> javax<span class="token punctuation">.</span>servlet<span class="token punctuation">.</span>http<span class="token punctuation">.</span>HttpServletResponse<span class="token punctuation">;</span><span class="token keyword">import</span> java<span class="token punctuation">.</span>io<span class="token punctuation">.</span>IOException<span class="token punctuation">;</span><span class="token annotation punctuation">@WebServlet</span><span class="token punctuation">(</span><span class="token string">"/demo8"</span><span class="token punctuation">)</span><span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">Demo06Servlet</span> <span class="token keyword">extends</span> <span class="token class-name">HttpServlet</span> <span class="token punctuation">{</span>    <span class="token annotation punctuation">@Override</span>    <span class="token keyword">protected</span> <span class="token keyword">void</span> <span class="token function">doGet</span><span class="token punctuation">(</span>HttpServletRequest req<span class="token punctuation">,</span> HttpServletResponse resp<span class="token punctuation">)</span> <span class="token keyword">throws</span> ServletException<span class="token punctuation">,</span> IOException <span class="token punctuation">{</span>        String method <span class="token operator">=</span> req<span class="token punctuation">.</span><span class="token function">getMethod</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        String contentPath <span class="token operator">=</span> req<span class="token punctuation">.</span><span class="token function">getContextPath</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        String requestURI <span class="token operator">=</span> req<span class="token punctuation">.</span><span class="token function">getRequestURI</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        StringBuffer requestURL <span class="token operator">=</span> req<span class="token punctuation">.</span><span class="token function">getRequestURL</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        System<span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token string">"请求方式: "</span> <span class="token operator">+</span> method<span class="token punctuation">)</span><span class="token punctuation">;</span>        System<span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token string">"虚拟目录: "</span> <span class="token operator">+</span> contentPath<span class="token punctuation">)</span><span class="token punctuation">;</span>        System<span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token string">"请求URI: "</span> <span class="token operator">+</span> requestURI<span class="token punctuation">)</span><span class="token punctuation">;</span>        System<span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token string">"请求URL: "</span> <span class="token operator">+</span> requestURL<span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span>    <span class="token annotation punctuation">@Override</span>    <span class="token keyword">protected</span> <span class="token keyword">void</span> <span class="token function">doPost</span><span class="token punctuation">(</span>HttpServletRequest req<span class="token punctuation">,</span> HttpServletResponse resp<span class="token punctuation">)</span> <span class="token keyword">throws</span> ServletException<span class="token punctuation">,</span> IOException <span class="token punctuation">{</span>        <span class="token keyword">super</span><span class="token punctuation">.</span><span class="token function">doPost</span><span class="token punctuation">(</span>req<span class="token punctuation">,</span> resp<span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span><span class="token punctuation">}</span></code></pre><ul><li><p>获取请求头数据</p><ul><li><code>String getHeader(String name)</code> : 通过请求头的名称获取请求的值</li><li>Enumeation&lt;String&gt; getHeaderNames() : 获取所有请求头名称</li></ul></li><li><p>获取请求体数据</p><ul><li>1、获取对象<ul><li>字节流 :  BufferReader getReader() : 获取字符输入流，只能操作字符数据</li><li>字符流 : ServletInputStream getInputStream() : 获取字节输入流，可以操作所有数据类型</li></ul></li><li>2、再从对象中拿数据 </li></ul></li><li><p>其他功能:  </p><ul><li>1、获取请求参数通用方式 ：不论get还是post请求方式都可以使用下列方法来获取请求参数<ul><li>String getParameter(String name) : 根据参数名称获取参数值</li><li>Srring[] getParameterValues(String name) : 根据参数名称获取参数值的数组</li><li>Enumeation&lt;String&gt; getParameterNames(): 获取所有请求的参数名称</li><li>Map&lt;String , String[]&gt; getParameterMap() : 获取所有参数的Map集合</li></ul></li><li>2、请求转发 : 一种在服务器内部的资源跳转方式 <ul><li>1、通过request对象获取请求转发对象 : RequestDispatcher getRequestDispatcher(String path)</li><li>2、使用 RequestDispatcher对象进行转发: forward(ServletRequest request , ServletResponse response)</li><li>特点: <ul><li>1、浏览器地址栏路径不发生变化</li><li>2、只能转发到当前的服务器内部资源中</li><li>3、转发是一次请求</li></ul></li></ul></li><li>3、共享数据 : <ul><li>域对象 : 一个有作用范围的对象，可以在范围内共享数据</li><li>request域 :  代表一次请求的范围，一般同于请求转发的多个资源中共享数据</li><li>方法: <ul><li>1、void setAttribute(String name , Object obj) : 存储数据</li><li>2、Object getAttriibute(String name) : 获取数据</li><li>3、void removeAttribute(String name) : 通过键移除键值对</li></ul></li></ul></li><li>4、获取ServletContext : <ul><li>ServletContext getServletContext()</li></ul></li></ul></li><li><p>中文乱码问题: </p><ul><li>get方式 : tomcat8 已经将get方式解决了</li><li>post方式: 会乱码<ul><li>解决: 在获取参数前，来设置请求request的编码=&gt;request.setCharsetEncoding(‘utf-8’);</li></ul></li></ul></li></ul><p>BeanUtils工具类，简化数据封装</p><ul><li>用于封装JavaBean的</li><li></li><li>JavaBran : 标准的Java类<ul><li>1、类必须是public修饰</li><li>2、必须提供空参的构造器</li><li>3、成员变量必须使用priivate修饰</li><li>4、提供公共的getter和setter方法</li></ul></li><li>功能: 封装数据</li><li>概念 : <ul><li>成员变量: </li><li>属性 : setter和getter方法截取后的产物<ul><li>例如 getUsername –&gt; Username –&gt; username</li></ul></li></ul></li><li>方法:<ul><li>1、setProperty()</li><li>2、getProperty()</li><li>3、populate(Object obj ,  Map map) : 将map集合的键值对信息，封装到对应的JavaBean对象中</li></ul></li></ul><h3 id="HTTP协议-响应消息"><a href="#HTTP协议-响应消息" class="headerlink" title="HTTP协议 : 响应消息"></a>HTTP协议 : 响应消息</h3><blockquote><p>响应消息 : 服务器端发送给服务端的数据、</p><ul><li>响应状态码 : 服务器告诉客户端浏览器本次请求与和响应的一个状态<ul><li>状态码都是三位数字</li></ul></li><li>响应头 : <ul><li>Content-Type : 服务器告诉客户端响应体数据格式以及编码格式</li><li>Content-disposition : 服务器告诉客户端以什么个是你打开响应体数据<ul><li>in-line : 默认值，在当前页面打开</li><li>attachment;filename=xxx: 以附件形式打开响应体。文件下载</li></ul></li></ul></li><li>响应空行</li><li>响应体 ：传输的数据</li></ul></blockquote><h3 id="Reponse-对象"><a href="#Reponse-对象" class="headerlink" title="Reponse 对象"></a>Reponse 对象</h3><ul><li>设置响应头 : setHeader(String name , String name)</li><li>设置响应体 : <ul><li>获取输出流<ul><li>字符输出流 : PrintWriter getWriter()</li><li>字节输出流 : ServletOutputStream getOutputStream()</li></ul></li><li>使用输出流，将数据输出到客户端浏览器</li></ul></li></ul><p>response方法 </p><ul><li>sendRedirect(String path) : 重定向<ul><li>转发和重定向特点 : <ul><li>转发地址栏路径不变</li><li>转发只能访问当前服务器下的资源</li><li>转发是一次请求</li><li>重定向地址栏发生变化</li><li>重定向可以访问其他服务器的资源</li><li>重定向是两次请求。不能使用request对象共享数据</li></ul></li><li>路径path的写法 : <ul><li>1、路径的分类<ul><li>相对路径 : 通过相对路径不可以确定唯一资源<ul><li>不以斜 / 开头，以点开头的，./index.html</li><li>规则 : 确定访问的当前资源和目标资源之间的相对位置关系<ul><li>./ : 当前目录</li><li>../ : 上级目录</li></ul></li></ul></li><li>绝对路径 : 通过绝对路径可以确定唯一资源<ul><li>以 / 开头的路径  /index.html</li><li>规则: 判断定义的路径给谁用<ul><li>客户端浏览器 : 需要加虚拟路径（项目的访问路径                                                ）       <ul><li>建议虚拟目录动态获取</li><li>重定向，a标签 、、、 </li></ul></li><li>服务器 : 不需要加虚拟路径<ul><li>转发路径</li></ul></li><li>require.getContextPath() : 动态获取虚拟目录，防止以后修改目录名而出错</li></ul></li></ul></li></ul></li></ul></li></ul></li></ul><blockquote><p>服务器输出字符数据到浏览器</p></blockquote><ul><li>步骤 : <ul><li>1、获取字符输出流</li><li>2、输出数据</li></ul></li><li>注意 : 乱码问题<ul><li>原因 : 编解码使用的字符集不一致</li><li>解决 : 在获取流对象前设置 resp.setContentType(“text/html;charset=utf-8”);</li></ul></li></ul><blockquote><p>服务器输出字节数据到浏览器</p></blockquote><ul><li>步骤 : <ul><li>1、获取字节输出流</li><li>2、输出数据</li></ul></li><li>注意 : 乱码问题<ul><li>原因 : 编解码使用的字符集不一致</li><li>解决 : 在获取流对象前设置 resp.setContentType(“text/html;charset=utf-8”);</li></ul></li></ul><pre class=" language-java"><code class="language-java"><span class="token keyword">package</span> cn<span class="token punctuation">.</span>jiatengda<span class="token punctuation">.</span>servlet<span class="token punctuation">.</span>requestDemo<span class="token punctuation">;</span><span class="token keyword">import</span> javax<span class="token punctuation">.</span>servlet<span class="token punctuation">.</span>ServletException<span class="token punctuation">;</span><span class="token keyword">import</span> javax<span class="token punctuation">.</span>servlet<span class="token punctuation">.</span>annotation<span class="token punctuation">.</span>WebServlet<span class="token punctuation">;</span><span class="token keyword">import</span> javax<span class="token punctuation">.</span>servlet<span class="token punctuation">.</span>http<span class="token punctuation">.</span>HttpServlet<span class="token punctuation">;</span><span class="token keyword">import</span> javax<span class="token punctuation">.</span>servlet<span class="token punctuation">.</span>http<span class="token punctuation">.</span>HttpServletRequest<span class="token punctuation">;</span><span class="token keyword">import</span> javax<span class="token punctuation">.</span>servlet<span class="token punctuation">.</span>http<span class="token punctuation">.</span>HttpServletResponse<span class="token punctuation">;</span><span class="token keyword">import</span> java<span class="token punctuation">.</span>io<span class="token punctuation">.</span>IOException<span class="token punctuation">;</span><span class="token keyword">import</span> java<span class="token punctuation">.</span>io<span class="token punctuation">.</span>PrintWriter<span class="token punctuation">;</span><span class="token annotation punctuation">@WebServlet</span><span class="token punctuation">(</span><span class="token string">"/demo1"</span><span class="token punctuation">)</span><span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">Demo01Request</span> <span class="token keyword">extends</span> <span class="token class-name">HttpServlet</span> <span class="token punctuation">{</span>    <span class="token annotation punctuation">@Override</span>    <span class="token keyword">protected</span> <span class="token keyword">void</span> <span class="token function">doGet</span><span class="token punctuation">(</span>HttpServletRequest req<span class="token punctuation">,</span> HttpServletResponse resp<span class="token punctuation">)</span> <span class="token keyword">throws</span> ServletException<span class="token punctuation">,</span> IOException <span class="token punctuation">{</span>        <span class="token comment" spellcheck="true">// 中文乱码原因 : 编解码使用的字符集不一致 , 需要在获取流对象之前设置默认编码格式</span>        <span class="token comment" spellcheck="true">// resp.setCharacterEncoding("utf-8");</span>        <span class="token comment" spellcheck="true">// 告诉浏览器，服务器发送的消息体数据的编码，建议浏览器使用该编码</span>        <span class="token comment" spellcheck="true">// resp.setHeader("content-type","text/html;charset=utf-8");</span>        <span class="token comment" spellcheck="true">// 简单的形式来设置编码</span>        resp<span class="token punctuation">.</span><span class="token function">setContentType</span><span class="token punctuation">(</span><span class="token string">"text/html;charset=utf-8"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        PrintWriter pw <span class="token operator">=</span> resp<span class="token punctuation">.</span><span class="token function">getWriter</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        pw<span class="token punctuation">.</span><span class="token function">write</span><span class="token punctuation">(</span><span class="token string">"&lt;h1>你好啊啊啊啊啊 ， response&lt;/h1>"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span>    <span class="token annotation punctuation">@Override</span>    <span class="token keyword">protected</span> <span class="token keyword">void</span> <span class="token function">doPost</span><span class="token punctuation">(</span>HttpServletRequest req<span class="token punctuation">,</span> HttpServletResponse resp<span class="token punctuation">)</span> <span class="token keyword">throws</span> ServletException<span class="token punctuation">,</span> IOException <span class="token punctuation">{</span>        <span class="token keyword">this</span><span class="token punctuation">.</span><span class="token function">doGet</span><span class="token punctuation">(</span>req<span class="token punctuation">,</span>resp<span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span><span class="token punctuation">}</span></code></pre><blockquote><p>案例 : 验证码</p></blockquote><ul><li>为了防止用户恶意攻击，比如无限注册等</li></ul><pre class=" language-java"><code class="language-java"><span class="token keyword">package</span> cn<span class="token punctuation">.</span>jiatengda<span class="token punctuation">.</span>servlet<span class="token punctuation">.</span>requestDemo<span class="token punctuation">;</span><span class="token keyword">import</span> javax<span class="token punctuation">.</span>imageio<span class="token punctuation">.</span>ImageIO<span class="token punctuation">;</span><span class="token keyword">import</span> javax<span class="token punctuation">.</span>servlet<span class="token punctuation">.</span>ServletException<span class="token punctuation">;</span><span class="token keyword">import</span> javax<span class="token punctuation">.</span>servlet<span class="token punctuation">.</span>ServletOutputStream<span class="token punctuation">;</span><span class="token keyword">import</span> javax<span class="token punctuation">.</span>servlet<span class="token punctuation">.</span>annotation<span class="token punctuation">.</span>WebServlet<span class="token punctuation">;</span><span class="token keyword">import</span> javax<span class="token punctuation">.</span>servlet<span class="token punctuation">.</span>http<span class="token punctuation">.</span>HttpServlet<span class="token punctuation">;</span><span class="token keyword">import</span> javax<span class="token punctuation">.</span>servlet<span class="token punctuation">.</span>http<span class="token punctuation">.</span>HttpServletRequest<span class="token punctuation">;</span><span class="token keyword">import</span> javax<span class="token punctuation">.</span>servlet<span class="token punctuation">.</span>http<span class="token punctuation">.</span>HttpServletResponse<span class="token punctuation">;</span><span class="token keyword">import</span> java<span class="token punctuation">.</span>awt<span class="token punctuation">.</span>*<span class="token punctuation">;</span><span class="token keyword">import</span> java<span class="token punctuation">.</span>awt<span class="token punctuation">.</span>image<span class="token punctuation">.</span>BufferedImage<span class="token punctuation">;</span><span class="token keyword">import</span> java<span class="token punctuation">.</span>io<span class="token punctuation">.</span>IOException<span class="token punctuation">;</span><span class="token keyword">import</span> java<span class="token punctuation">.</span>util<span class="token punctuation">.</span>Random<span class="token punctuation">;</span><span class="token annotation punctuation">@WebServlet</span><span class="token punctuation">(</span><span class="token string">"/demo3"</span><span class="token punctuation">)</span><span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">Demo03RequestCode</span> <span class="token keyword">extends</span> <span class="token class-name">HttpServlet</span> <span class="token punctuation">{</span>    <span class="token annotation punctuation">@Override</span>    <span class="token keyword">protected</span> <span class="token keyword">void</span> <span class="token function">doGet</span><span class="token punctuation">(</span>HttpServletRequest req<span class="token punctuation">,</span> HttpServletResponse resp<span class="token punctuation">)</span> <span class="token keyword">throws</span> ServletException<span class="token punctuation">,</span> IOException <span class="token punctuation">{</span>        <span class="token keyword">int</span> width <span class="token operator">=</span> <span class="token number">100</span><span class="token punctuation">;</span>        <span class="token keyword">int</span> height <span class="token operator">=</span> <span class="token number">50</span><span class="token punctuation">;</span>        <span class="token comment" spellcheck="true">// 1. 创建一个对象 , 在内存中图片(验证码的图片对象)</span>        BufferedImage image <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">BufferedImage</span><span class="token punctuation">(</span>width<span class="token punctuation">,</span>height<span class="token punctuation">,</span>BufferedImage<span class="token punctuation">.</span>TYPE_INT_BGR<span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token comment" spellcheck="true">// 2. 美化图片</span>        <span class="token comment" spellcheck="true">// 2.1 填充背景色</span>        Graphics g <span class="token operator">=</span> image<span class="token punctuation">.</span><span class="token function">getGraphics</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment" spellcheck="true">// 画笔对象</span>        g<span class="token punctuation">.</span><span class="token function">setColor</span><span class="token punctuation">(</span>Color<span class="token punctuation">.</span>PINK<span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment" spellcheck="true">// 设置画笔颜色</span>        g<span class="token punctuation">.</span><span class="token function">fillRect</span><span class="token punctuation">(</span><span class="token number">0</span><span class="token punctuation">,</span><span class="token number">0</span><span class="token punctuation">,</span>width<span class="token punctuation">,</span>height<span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token comment" spellcheck="true">// 2.2 画边框</span>        g<span class="token punctuation">.</span><span class="token function">setColor</span><span class="token punctuation">(</span>Color<span class="token punctuation">.</span>BLUE<span class="token punctuation">)</span><span class="token punctuation">;</span>        g<span class="token punctuation">.</span><span class="token function">drawRect</span><span class="token punctuation">(</span><span class="token number">0</span><span class="token punctuation">,</span><span class="token number">0</span><span class="token punctuation">,</span>width<span class="token operator">-</span><span class="token number">1</span><span class="token punctuation">,</span>height<span class="token operator">-</span><span class="token number">1</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        String str <span class="token operator">=</span> <span class="token string">"AQWERTYUIOPASDFGHJKLZXCVBNMqwertyuiopasdfghjklzxcvbnm1234567890"</span><span class="token punctuation">;</span>        <span class="token comment" spellcheck="true">// 生成随机角标</span>        Random ran <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">Random</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token keyword">for</span> <span class="token punctuation">(</span><span class="token keyword">int</span> i <span class="token operator">=</span> <span class="token number">1</span> <span class="token punctuation">;</span> i <span class="token operator">&lt;=</span> <span class="token number">4</span><span class="token punctuation">;</span> i<span class="token operator">++</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>            <span class="token keyword">int</span> index <span class="token operator">=</span> ran<span class="token punctuation">.</span><span class="token function">nextInt</span><span class="token punctuation">(</span>str<span class="token punctuation">.</span><span class="token function">length</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>            <span class="token comment" spellcheck="true">// 获取字符</span>            <span class="token keyword">char</span> ch <span class="token operator">=</span> str<span class="token punctuation">.</span><span class="token function">charAt</span><span class="token punctuation">(</span>index<span class="token punctuation">)</span><span class="token punctuation">;</span>            <span class="token comment" spellcheck="true">// 2.3 写验证码</span>            g<span class="token punctuation">.</span><span class="token function">drawString</span><span class="token punctuation">(</span>ch <span class="token operator">+</span> <span class="token string">""</span><span class="token punctuation">,</span>width<span class="token operator">/</span><span class="token number">5</span><span class="token operator">*</span>i<span class="token punctuation">,</span>height<span class="token operator">/</span><span class="token number">2</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token punctuation">}</span>        <span class="token comment" spellcheck="true">// 2.4 画干扰线</span>        g<span class="token punctuation">.</span><span class="token function">setColor</span><span class="token punctuation">(</span>Color<span class="token punctuation">.</span>GREEN<span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token keyword">for</span> <span class="token punctuation">(</span><span class="token keyword">int</span> i <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span> i <span class="token operator">&lt;</span> <span class="token number">10</span><span class="token punctuation">;</span> i<span class="token operator">++</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>            <span class="token comment" spellcheck="true">// 随机生成坐标点</span>            <span class="token keyword">int</span> x1 <span class="token operator">=</span> ran<span class="token punctuation">.</span><span class="token function">nextInt</span><span class="token punctuation">(</span>width<span class="token punctuation">)</span><span class="token punctuation">;</span>            <span class="token keyword">int</span> x2 <span class="token operator">=</span> ran<span class="token punctuation">.</span><span class="token function">nextInt</span><span class="token punctuation">(</span>width<span class="token punctuation">)</span><span class="token punctuation">;</span>            <span class="token keyword">int</span> y1 <span class="token operator">=</span> ran<span class="token punctuation">.</span><span class="token function">nextInt</span><span class="token punctuation">(</span>height<span class="token punctuation">)</span><span class="token punctuation">;</span>            <span class="token keyword">int</span> y2 <span class="token operator">=</span> ran<span class="token punctuation">.</span><span class="token function">nextInt</span><span class="token punctuation">(</span>height<span class="token punctuation">)</span><span class="token punctuation">;</span>            g<span class="token punctuation">.</span><span class="token function">drawLine</span><span class="token punctuation">(</span>x1<span class="token punctuation">,</span>y1<span class="token punctuation">,</span>x2<span class="token punctuation">,</span>y2<span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token punctuation">}</span>        <span class="token comment" spellcheck="true">// 3. 将图片输出到页面展示</span>        ImageIO<span class="token punctuation">.</span><span class="token function">write</span><span class="token punctuation">(</span>image<span class="token punctuation">,</span><span class="token string">"jpg"</span><span class="token punctuation">,</span>resp<span class="token punctuation">.</span><span class="token function">getOutputStream</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span>    <span class="token annotation punctuation">@Override</span>    <span class="token keyword">protected</span> <span class="token keyword">void</span> <span class="token function">doPost</span><span class="token punctuation">(</span>HttpServletRequest req<span class="token punctuation">,</span> HttpServletResponse resp<span class="token punctuation">)</span> <span class="token keyword">throws</span> ServletException<span class="token punctuation">,</span> IOException <span class="token punctuation">{</span>        <span class="token keyword">this</span><span class="token punctuation">.</span><span class="token function">doGet</span><span class="token punctuation">(</span>req<span class="token punctuation">,</span>resp<span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span><span class="token punctuation">}</span></code></pre><h3 id="ServletContext对象"><a href="#ServletContext对象" class="headerlink" title="ServletContext对象"></a>ServletContext对象</h3><blockquote><p>概念 : 代表整个web应用，可以和程序的容器(服务器)来通信</p></blockquote><p>获取</p><ul><li>1、通过request对象获取 : request.getServletContext()</li><li>2、通过httpServlet获取 : this.getServletContext()</li><li>两种获取方式获取的对象相等</li></ul><p>功能</p><ul><li>1、获取MIME类型 :<ul><li>MIME类型: 在互联网通信过程中定义的一种文件数据类型<ul><li>格式: 大类型/小类型  text/html  image/jpeg</li></ul></li><li>获取 :String  getMimeType(String file)</li></ul></li><li>2、域对象 : 共享数据<ul><li>setAttribute(String name , Object value)</li><li>getAttribute(String name)</li><li>removeAttribute(String name)</li><li>ServletContext对象范围 : 所有用户所有请求的数据</li></ul></li><li>3、获取文件的真实(服务器)路径<ul><li>方法: String getRealPath(String path)</li></ul></li></ul><pre class=" language-java"><code class="language-java"><span class="token annotation punctuation">@WebServlet</span><span class="token punctuation">(</span><span class="token string">"/context2"</span><span class="token punctuation">)</span><span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">Demo02</span> <span class="token keyword">extends</span> <span class="token class-name">HttpServlet</span> <span class="token punctuation">{</span>    <span class="token annotation punctuation">@Override</span>    <span class="token keyword">protected</span> <span class="token keyword">void</span> <span class="token function">doGet</span><span class="token punctuation">(</span>HttpServletRequest req<span class="token punctuation">,</span> HttpServletResponse resp<span class="token punctuation">)</span> <span class="token keyword">throws</span> ServletException<span class="token punctuation">,</span> IOException <span class="token punctuation">{</span>        <span class="token comment" spellcheck="true">// 通过request对象获取</span>        ServletContext context <span class="token operator">=</span> req<span class="token punctuation">.</span><span class="token function">getServletContext</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token comment" spellcheck="true">// 获取文件的服务器路径</span>        String realPath <span class="token operator">=</span> context<span class="token punctuation">.</span><span class="token function">getRealPath</span><span class="token punctuation">(</span><span class="token string">"/a.txt"</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token comment" spellcheck="true">// web目录下资源访问</span>        System<span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span>realPath<span class="token punctuation">)</span><span class="token punctuation">;</span>        String b <span class="token operator">=</span> context<span class="token punctuation">.</span><span class="token function">getRealPath</span><span class="token punctuation">(</span><span class="token string">"/WEB-INF/b.txt"</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token comment" spellcheck="true">// WEB-INF目录下的资源访问</span>        System<span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span>b<span class="token punctuation">)</span><span class="token punctuation">;</span>        String c <span class="token operator">=</span> context<span class="token punctuation">.</span><span class="token function">getRealPath</span><span class="token punctuation">(</span><span class="token string">"/WEB-INF/classes/c.txt"</span><span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment" spellcheck="true">// 访问src目录下的资源</span>        System<span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span>c<span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span>    <span class="token annotation punctuation">@Override</span>    <span class="token keyword">protected</span> <span class="token keyword">void</span> <span class="token function">doPost</span><span class="token punctuation">(</span>HttpServletRequest req<span class="token punctuation">,</span> HttpServletResponse resp<span class="token punctuation">)</span> <span class="token keyword">throws</span> ServletException<span class="token punctuation">,</span> IOException <span class="token punctuation">{</span>        <span class="token keyword">this</span><span class="token punctuation">.</span><span class="token function">doGet</span><span class="token punctuation">(</span>req<span class="token punctuation">,</span>resp<span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span><span class="token punctuation">}</span></code></pre><h3 id="案例-文件下载"><a href="#案例-文件下载" class="headerlink" title="案例 : 文件下载"></a>案例 : 文件下载</h3><ul><li>页面显示超链接</li><li>点击超链接弹出下载提示框</li><li>完成图片文件下载</li></ul><p>步骤 :</p><ul><li>1、定义页面，编辑超链接href属性，指向Servlet，传递资源名称filename</li><li>2、定义Servlet<ul><li>获取文件名称</li><li>使用字节输入流加载文件进内存</li><li>指定response的响应头 : content-disposition : attachment;filename=xxx</li><li>将数据写出到response输出流</li></ul></li></ul><blockquote><p>问题 ：中文文件名</p></blockquote><ul><li>解决思路 ： <ul><li>获取客户端使用的浏览器版本信息</li><li>根据不同的版本信息，设置不同的编码格式</li></ul></li></ul><pre class=" language-java"><code class="language-java"><span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">ServletDownload</span> <span class="token keyword">extends</span> <span class="token class-name">HttpServlet</span> <span class="token punctuation">{</span>    <span class="token annotation punctuation">@Override</span>    <span class="token keyword">protected</span> <span class="token keyword">void</span> <span class="token function">doGet</span><span class="token punctuation">(</span>HttpServletRequest req<span class="token punctuation">,</span> HttpServletResponse resp<span class="token punctuation">)</span> <span class="token keyword">throws</span> ServletException<span class="token punctuation">,</span> IOException <span class="token punctuation">{</span>        <span class="token comment" spellcheck="true">// 1.获取请求参数，文件名称</span>        String filename <span class="token operator">=</span> req<span class="token punctuation">.</span><span class="token function">getParameter</span><span class="token punctuation">(</span><span class="token string">"filename"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token comment" spellcheck="true">// 2.使用字节输入流加载文件进内存</span>        <span class="token comment" spellcheck="true">// 2.1找到服务器真是路径</span>        ServletContext servletContext <span class="token operator">=</span> <span class="token keyword">this</span><span class="token punctuation">.</span><span class="token function">getServletContext</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        String realPath <span class="token operator">=</span> servletContext<span class="token punctuation">.</span><span class="token function">getRealPath</span><span class="token punctuation">(</span><span class="token string">"/"</span> <span class="token operator">+</span> filename<span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token comment" spellcheck="true">// 2.2 使用字节流关联</span>        FileInputStream fis <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">FileInputStream</span><span class="token punctuation">(</span>realPath<span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token comment" spellcheck="true">// 3. 设置response的响应头</span>        <span class="token comment" spellcheck="true">//3.1 设置类型头</span>        resp<span class="token punctuation">.</span><span class="token function">setContentType</span><span class="token punctuation">(</span>servletContext<span class="token punctuation">.</span><span class="token function">getMimeType</span><span class="token punctuation">(</span>filename<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token comment" spellcheck="true">//3.2 设置打开方式</span>        resp<span class="token punctuation">.</span><span class="token function">setHeader</span><span class="token punctuation">(</span><span class="token string">"content-disposition"</span> <span class="token punctuation">,</span> <span class="token string">"attachment;filename="</span> <span class="token operator">+</span> filename<span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token comment" spellcheck="true">// 4. 将输入流的数据写出到输出流中</span>        ServletOutputStream sos <span class="token operator">=</span> resp<span class="token punctuation">.</span><span class="token function">getOutputStream</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token keyword">byte</span><span class="token punctuation">[</span><span class="token punctuation">]</span> buff <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">byte</span><span class="token punctuation">[</span><span class="token number">1024</span> <span class="token operator">*</span> <span class="token number">8</span><span class="token punctuation">]</span><span class="token punctuation">;</span>        <span class="token keyword">int</span> len <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span>        <span class="token keyword">while</span> <span class="token punctuation">(</span><span class="token punctuation">(</span>len <span class="token operator">=</span> fis<span class="token punctuation">.</span><span class="token function">read</span><span class="token punctuation">(</span>buff<span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token operator">!=</span> <span class="token operator">-</span><span class="token number">1</span><span class="token punctuation">)</span><span class="token punctuation">{</span>            sos<span class="token punctuation">.</span><span class="token function">write</span><span class="token punctuation">(</span>buff<span class="token punctuation">,</span><span class="token number">0</span><span class="token punctuation">,</span>len<span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token punctuation">}</span>    <span class="token punctuation">}</span>    <span class="token annotation punctuation">@Override</span>    <span class="token keyword">protected</span> <span class="token keyword">void</span> <span class="token function">doPost</span><span class="token punctuation">(</span>HttpServletRequest req<span class="token punctuation">,</span> HttpServletResponse resp<span class="token punctuation">)</span> <span class="token keyword">throws</span> ServletException<span class="token punctuation">,</span> IOException <span class="token punctuation">{</span>        <span class="token keyword">this</span><span class="token punctuation">.</span><span class="token function">doGet</span><span class="token punctuation">(</span>req<span class="token punctuation">,</span>resp<span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span><span class="token punctuation">}</span></code></pre>]]></content>
      
      
      <categories>
          
          <category> Servlet </category>
          
      </categories>
      
      
        <tags>
            
            <tag> Java </tag>
            
            <tag> Servlet </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>java基础总结2</title>
      <link href="/2019/10/16/javaBase2/"/>
      <url>/2019/10/16/javaBase2/</url>
      
        <content type="html"><![CDATA[<h3 id="File类"><a href="#File类" class="headerlink" title="File类"></a>File类</h3><blockquote><p>java.io.File类</p><ul><li>作用:文件和目录路径名的抽象表现形式，把电脑中的文件和文件夹封装为了File类，我们可以使用File操作文件和文件夹</li><li>提示:File类是与系统无关的类，任何操作系统都可使用这个类</li></ul></blockquote><p> File类静态成员变量</p><ul><li><p>pathSeparator : 路径分隔符</p></li><li><p>separator : 路径名称分隔符</p><blockquote><p>注意:</p><ul><li><ol><li>操作路径不能写死，用File的静态变量来表示分隔符</li></ol></li><li><ol start="2"><li>路径不区分大写</li></ol></li><li><ol start="3"><li>路径中的文件名称分隔符windows使用反斜杠，反斜杠是转义字符，两个反斜杠表示一个普通反斜杠</li></ol></li></ul></blockquote></li></ul><p>File类构造方法</p><ul><li>1.File(String pathname) : 将指定路径名字符串转换为抽象路径名来创建一个File实例</li><li>2.File(String parent , String child) : 根据父子路径创建File类实例</li><li>3.File(File parent , String child) : 根据parent抽象路径和child路径创建File类实例</li></ul><blockquote><p>常用功能方法</p><ul><li><ol><li>public String getAbsolutePath(): 返回File的绝对路径</li></ol></li><li><ol start="2"><li>public String getPath(): 将File转换为路径名字符创</li></ol></li><li><ol start="3"><li>public String getName(): 返回由此File表示的文件或目录的名称</li></ol></li><li><ol start="4"><li>public long length(): 返回文件的长度(大小，以字节为单位)(toString方法就是调用此方法)</li></ol></li><li><ol start="5"><li>public boolean exists(): 此File表示的文件或者目录是否存在</li></ol></li><li><ol start="6"><li>public boolean isDirector(): 此File表示的是否为目录</li></ol></li><li><ol start="7"><li>public boolean isFile(): 此File表示的是否是文件</li></ol></li></ul></blockquote><p> <strong>isDirector 和 isFile 方法使用的前提是必须File表示的文件路径是存在的，否则都返回false，如果路径存在，两个方法返回值正好相反</strong></p><pre class=" language-java"><code class="language-java"><span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">Demo01File</span> <span class="token punctuation">{</span>    <span class="token keyword">public</span> <span class="token keyword">static</span> <span class="token keyword">void</span> <span class="token function">main</span><span class="token punctuation">(</span>String<span class="token punctuation">[</span><span class="token punctuation">]</span> args<span class="token punctuation">)</span> <span class="token punctuation">{</span>        String p <span class="token operator">=</span> File<span class="token punctuation">.</span>pathSeparator<span class="token punctuation">;</span>        <span class="token comment" spellcheck="true">// System.out.println(p); // linux是 : , window是 ;</span>        String s <span class="token operator">=</span> File<span class="token punctuation">.</span>separator<span class="token punctuation">;</span>        <span class="token comment" spellcheck="true">// System.out.println(s); // linux 是 / , window 是 \</span>        File f <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">File</span><span class="token punctuation">(</span><span class="token string">"/Users/jiatengda/Desktop/basic-code/a.txt"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        System<span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span>f<span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment" spellcheck="true">// /Users/jiatengda/Desktop/basic-code/a.txt</span>        File f2 <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">File</span><span class="token punctuation">(</span><span class="token string">"C"</span> <span class="token punctuation">,</span> <span class="token string">"b.md"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        System<span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span>f2<span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment" spellcheck="true">// C/b.md</span>        System<span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span>f<span class="token punctuation">.</span><span class="token function">getAbsoluteFile</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token comment" spellcheck="true">///Users/jiatengda/Desktop/basic-code/a.txt</span>        System<span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span>f<span class="token punctuation">.</span><span class="token function">getPath</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment" spellcheck="true">// /Users/jiatengda/Desktop/basic-code/a.txt</span>        System<span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span>f<span class="token punctuation">.</span><span class="token function">toString</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment" spellcheck="true">// /Users/jiatengda/Desktop/basic-code/a.txt</span>        System<span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span>f<span class="token punctuation">.</span><span class="token function">getName</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment" spellcheck="true">//a.txt</span>        System<span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span>f<span class="token punctuation">.</span><span class="token function">length</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment" spellcheck="true">// 0 无此文件也是0</span>    <span class="token punctuation">}</span><span class="token punctuation">}</span></code></pre><h3 id="IO流"><a href="#IO流" class="headerlink" title="IO流"></a>IO流</h3><ul><li>I(input): 输入(读取)</li><li>O(output): 输出(写入)</li><li>流: 数据(字符，字节) =&gt; 1 字符 = 2 字节 = 8二进制位</li></ul><blockquote><p>字节流 </p><ul><li>InputStream: 字节输入流</li><li>OutputStream : 字节输出流</li></ul></blockquote><blockquote><p>一切皆为字节</p><ul><li>电脑中存储的任意文件都是以二进制形式保存，传输时一样如此，字节流可以传输任意文件数据，底层传输的始终是二进制数据.</li></ul></blockquote><blockquote><p>java.io.OutputStream : 此抽象类是所有表示输出字节流的超类</p></blockquote><p>共性方法</p><ul><li>public void close():关闭输出流并释放与此流相关的任何系统资源</li><li>public void flash():刷新此输出流并强制任何缓冲的字节被写出</li><li>public void write(byte[] b):将b.length字节从指定的字节数组写入此输出流</li><li>public void write(byte[] b , int off , int len):从指定的字节数组写入len字节，从偏移量off开始输出到此输出流</li><li>public abstract void write(int b): 将指定的字节输出流</li></ul><blockquote><p>java.io.FileOutputStream extends OutputStream : 文件字节输出流</p><ul><li>作用: 把内存中的数据写入到硬盘的文件中</li><li>写入数据的原理(内存 -&gt; 硬盘):<ul><li>java程序-&gt;JVM(java虚拟机)-&gt;OS(操作系统)-&gt;OS调用写数据的方法-&gt;把数据写入到文件中</li></ul></li></ul></blockquote><blockquote><p>文件字节输出流使用步骤</p><pre class=" language-java"><code class="language-java"><span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">Demo04File</span> <span class="token punctuation">{</span>    <span class="token keyword">public</span> <span class="token keyword">static</span> <span class="token keyword">void</span> <span class="token function">main</span><span class="token punctuation">(</span>String<span class="token punctuation">[</span><span class="token punctuation">]</span> args<span class="token punctuation">)</span> <span class="token keyword">throws</span> IOException <span class="token punctuation">{</span>        <span class="token comment" spellcheck="true">// 1.创建一个FileOutputStream对象，构造方法中传递写入数据的目的地</span>        FileOutputStream fos <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">FileOutputStream</span><span class="token punctuation">(</span><span class="token string">"a.txt"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token comment" spellcheck="true">// 2.调用FileOutputStream对象中的write方法，把数据写入到文件中</span>        fos<span class="token punctuation">.</span><span class="token function">write</span><span class="token punctuation">(</span><span class="token number">97</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token comment" spellcheck="true">// 3.释放资源(流的使用会占用一定内存，使用完毕要关闭掉，提高程序效率)</span>        fos<span class="token punctuation">.</span><span class="token function">close</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span><span class="token punctuation">}</span></code></pre><p>InputStreamFile 输入流 </p><ul><li>此抽象类表示字节输入流的所有类的超类</li></ul></blockquote><p>共性方法</p><ul><li><p>int read(): 从输入流中读取下一个字节</p></li><li><p>int read(byte[] b) : 从输入流中读取一定量的字节，并将其存在缓冲区b中</p></li><li><p>void close() : 关闭此输入流并释放相关的所有资源</p><blockquote><p>实现类 java.io.FileInputStream extends InputStream </p><ul><li>文件输入流，读取文件(把硬盘中的数据，读取到内存中使用)</li></ul></blockquote><p>读取数据原理:java程序 -&gt; jvm -&gt; os -&gt; os读取数据的方法 -&gt; 读取文件</p><blockquote><p>字节输入流的使用步骤:</p><ul><li>使用字节流读取中文字符时的问题：会产生乱码的问题 =&gt; 使用字符流解决<pre class=" language-java"><code class="language-java"><span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">Demo05FileInput</span> <span class="token punctuation">{</span><span class="token keyword">public</span> <span class="token keyword">static</span> <span class="token keyword">void</span> <span class="token function">main</span><span class="token punctuation">(</span>String<span class="token punctuation">[</span><span class="token punctuation">]</span> args<span class="token punctuation">)</span> <span class="token keyword">throws</span> IOException <span class="token punctuation">{</span> <span class="token comment" spellcheck="true">// 1. 创建FileInputStream对象，构造方法中绑定要读取的数据源</span> FileInputStream fis <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">FileInputStream</span><span class="token punctuation">(</span><span class="token string">"a.txt"</span><span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment" spellcheck="true">// 2. 使用FileInputStream对象中的方法read读取文件</span> <span class="token comment" spellcheck="true">// int read() 读取一个字节并返回，读到最后返回-1</span> <span class="token keyword">int</span> len <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span> <span class="token comment" spellcheck="true">// 记录读取到的字节</span> <span class="token keyword">while</span> <span class="token punctuation">(</span><span class="token punctuation">(</span>len <span class="token operator">=</span> fis<span class="token punctuation">.</span><span class="token function">read</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">)</span><span class="token operator">!=</span><span class="token operator">-</span><span class="token number">1</span><span class="token punctuation">)</span><span class="token punctuation">{</span>     <span class="token comment" spellcheck="true">// 条件判断</span>     <span class="token comment" spellcheck="true">// 1. fis.read()读取一个字节</span>     <span class="token comment" spellcheck="true">// 2. len = fis.read(): 读取到的字节赋值给len</span>     <span class="token comment" spellcheck="true">// 3. 与-1进行判断</span>     System<span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token punctuation">(</span><span class="token keyword">char</span><span class="token punctuation">)</span> len<span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token punctuation">}</span> <span class="token comment" spellcheck="true">//3. 释放资源</span> fis<span class="token punctuation">.</span><span class="token function">close</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token punctuation">}</span><span class="token punctuation">}</span></code></pre></li></ul></blockquote></li></ul><blockquote><p>一次读取多个字节</p><ul><li>int read(byte[] b) : 从输入流中读取一定量的字节，并将其存在缓冲区b中</li></ul></blockquote><p>参数byte[]的作用</p><ul><li>起到缓冲作用，存储每次读取到的多个字节，</li><li>数组的长度一般把其定义为1024(1kb)或者1024的整数倍</li><li>返回值int是每次读取有效字节的个数</li></ul><pre class=" language-java"><code class="language-java"><span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">Demo06FileInput</span> <span class="token punctuation">{</span>    <span class="token keyword">public</span> <span class="token keyword">static</span> <span class="token keyword">void</span> <span class="token function">main</span><span class="token punctuation">(</span>String<span class="token punctuation">[</span><span class="token punctuation">]</span> args<span class="token punctuation">)</span> <span class="token keyword">throws</span> IOException <span class="token punctuation">{</span>        FileInputStream fis <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">FileInputStream</span><span class="token punctuation">(</span><span class="token string">"a.txt"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token keyword">byte</span><span class="token punctuation">[</span><span class="token punctuation">]</span> bytes <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">byte</span><span class="token punctuation">[</span><span class="token number">1024</span><span class="token punctuation">]</span><span class="token punctuation">;</span> <span class="token comment" spellcheck="true">// 存储读取到的多个字节</span>        <span class="token keyword">int</span> len <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span>        <span class="token keyword">while</span> <span class="token punctuation">(</span><span class="token punctuation">(</span>len <span class="token operator">=</span> fis<span class="token punctuation">.</span><span class="token function">read</span><span class="token punctuation">(</span>bytes<span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token operator">!=</span><span class="token operator">-</span><span class="token number">1</span><span class="token punctuation">)</span><span class="token punctuation">{</span>            System<span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token keyword">new</span> <span class="token class-name">String</span><span class="token punctuation">(</span>bytes<span class="token punctuation">,</span><span class="token number">0</span><span class="token punctuation">,</span>len<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token punctuation">}</span>        fis<span class="token punctuation">.</span><span class="token function">close</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span><span class="token punctuation">}</span></code></pre><blockquote><p>复制文件案例</p><pre class=" language-java"><code class="language-java"><span class="token keyword">package</span> cn<span class="token punctuation">.</span>jiatengda<span class="token punctuation">.</span>day09<span class="token punctuation">.</span>demo08<span class="token punctuation">;</span><span class="token comment" spellcheck="true">// 文件复制</span></code></pre></blockquote><p>import java.io.FileInputStream;<br>import java.io.FileOutputStream;<br>import java.io.IOException;</p><p>/**<br> *</p><ul><li><ol><li>创建字节输入流对象，构造方法中绑定要读取的数据源</li></ol></li><li><ol start="2"><li>创建字节输出流对象，构造方法中绑定要写入的目的地</li></ol></li><li><ol start="3"><li>输入流对象read，输出流write</li></ol></li><li><ol start="4"><li>释放资源</li></ol></li><li></li><li>/</li></ul><p>public class Demo07File {<br>    public static void main(String[] args) throws IOException {<br>        FileInputStream fis = new FileInputStream(“/Users/jiatengda/Desktop/LiQuan/孟炜浩简历.docx”);<br>        FileOutputStream fos = new FileOutputStream(“/Users/jiatengda/Desktop/Project/1.docx”);<br>        byte[] bytes = new byte[1024];<br>        int len = 0;<br>        while ((len = fis.read(bytes))!= -1){<br>            fos.write(bytes,0,len);<br>        }<br>        // 先关闭写入流，后关闭读取流<br>        fos.close();<br>        fis.close();<br>    }<br>}</p><pre><code>&gt; 字符流&gt; - Reader: 字符输入流&gt; - Writer: 字符输出流&gt; java.io.Reader: 字符输入流，是字符输入流最顶层父类&gt; - 是一个抽象类，定义了共性的成员方法:&gt;   - 1. int read() : 读取单个字符并返回&gt;   - 2. int read(char[] chars) : 读取多个字符，并读入数组&gt;   - 3. void close() : 关闭流并释放资源&gt; java.io.FileReader extends InputStreamReader extends Reader:&gt; -  作用：把硬盘文件中的数据以字符的方式读取到内存中&gt; 使用步骤```javapublic class Demo01Reader {    public static void main(String[] args) throws IOException {        // 1. 创建一个FileReader对象        FileReader fr = new FileReader(&quot;a.txt&quot;);        // 2. 调用read方法读取//        int len = 0 ;//        while ((len = fr.read())!=-1){//            System.out.print((char)len);//        }        // 2. 利用缓冲数组多个字符读取        char[] chars = new char[1024];        int len = 0;        while ((len = fr.read(chars))!=-1){            /**             * String(char[] value) : 把字符数组转化为字符串             * String(char[] value , int offset , int length) : 将指定位置和长度的字符数组转换为字符串             */            System.out.println(new String(chars,0,len));        }        // 3. 释放资源        fr.close();    }}</code></pre><blockquote><p>java.io.Writer: 抽象类，字符输出流最顶层的超类</p><ul><li>共性成员方法:</li><li></li><li><ul><li>void write(int c) :</li></ul></li><li><ul><li>void writer(char[] cbuf) 写入字符数组</li></ul></li><li><ul><li>abstract void writer(char[] cbuf , int off , int len ) 写入数组的一部分，</li></ul></li><li><ul><li>write (String str) 写入字符串</li></ul></li><li><ul><li>write (String str , int off , int len) 写入字符串一部分</li></ul></li><li><ul><li>void flush() 刷新该流的缓冲</li></ul></li><li><ul><li>void close() 关闭此流，但是要先刷新它</li></ul></li></ul></blockquote><blockquote><p>java.io.FileWriter extends OutputStreamWriter extends Writer : 文件字符输出流,把内存中的数据写入到文件中</p></blockquote><blockquote><p><code>使用步骤</code></p><pre class=" language-java"><code class="language-java"><span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">Demo01Writer</span> <span class="token punctuation">{</span>    <span class="token keyword">public</span> <span class="token keyword">static</span> <span class="token keyword">void</span> <span class="token function">main</span><span class="token punctuation">(</span>String<span class="token punctuation">[</span><span class="token punctuation">]</span> args<span class="token punctuation">)</span> <span class="token keyword">throws</span> IOException <span class="token punctuation">{</span>        <span class="token comment" spellcheck="true">//  1. 创建一个FileWriter对象</span>        FileWriter fw <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">FileWriter</span><span class="token punctuation">(</span><span class="token string">"a.txt"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token comment" spellcheck="true">// 2. 调用write方法写入字符</span>        fw<span class="token punctuation">.</span><span class="token function">write</span><span class="token punctuation">(</span><span class="token number">97</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token comment" spellcheck="true">// 3. 使用FileWriter中的方法flush ， 把内存缓冲区中的内容，刷新到文件中</span>        fw<span class="token punctuation">.</span><span class="token function">flush</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        fw<span class="token punctuation">.</span><span class="token function">write</span><span class="token punctuation">(</span><span class="token number">98</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token comment" spellcheck="true">// 4. 释放资源(会先把内存区中的数据刷新到文件中 )</span>        fw<span class="token punctuation">.</span><span class="token function">close</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span><span class="token punctuation">}</span></code></pre><p>flush 和 close的区别</p><ul><li>flush ：刷新缓冲区，流可以继续使用</li><li>close : 刷新缓冲区，然后通知系统释放资源，流对象不能继续使用</li></ul></blockquote><blockquote><p>续写和换行</p><ul><li>FileWriter(String filename ,boolean append)</li><li>FileWriter(File file ,boolean append)</li><li>换行 macOS: \r linux: \n window: \r \n</li></ul></blockquote><h3 id="缓冲区buffered"><a href="#缓冲区buffered" class="headerlink" title="缓冲区buffered"></a>缓冲区buffered</h3><blockquote><p>缓冲流: 基本流是一个一个的读，缓冲流会增加一个缓冲区，把字节/字符存到数组中，然后在返回</p></blockquote><blockquote><p>子节缓冲输出流: 字节输出流的方法可用</p><ul><li>构造方法<ul><li>BufferedOutputStream(OutputStream os)</li><li>BufferedOutputStream(OutputStream os , int size)</li></ul></li></ul></blockquote><blockquote><p><code>使用步骤</code></p><ul><li>字节缓冲输入流类似<pre class=" language-java"><code class="language-java"><span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">Demo01Buffered</span> <span class="token punctuation">{</span>  <span class="token keyword">public</span> <span class="token keyword">static</span> <span class="token keyword">void</span> <span class="token function">main</span><span class="token punctuation">(</span>String<span class="token punctuation">[</span><span class="token punctuation">]</span> args<span class="token punctuation">)</span> <span class="token keyword">throws</span> IOException <span class="token punctuation">{</span>      <span class="token comment" spellcheck="true">// 1.创建字节输出流(FileOutputStream)对象，构造方法中绑定要输出的目的地</span>      FileOutputStream fos <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">FileOutputStream</span><span class="token punctuation">(</span><span class="token string">"c.txt"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>      <span class="token comment" spellcheck="true">// 2.创建BufferedInputStream对象，构造方法传递FileOutputStream对象，提高效率</span>      BufferedOutputStream bos <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">BufferedOutputStream</span><span class="token punctuation">(</span>fos<span class="token punctuation">)</span><span class="token punctuation">;</span>      <span class="token comment" spellcheck="true">// 3.使用BufferedInputStream对象中的方法write，把数据写入到内部缓冲区中</span>      bos<span class="token punctuation">.</span><span class="token function">write</span><span class="token punctuation">(</span><span class="token string">"把数据写入到缓冲区中"</span><span class="token punctuation">.</span><span class="token function">getBytes</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>      <span class="token comment" spellcheck="true">//4.使用BufferedInputStream对象中的方法flush，把内部缓冲区的数据，刷新到文件中</span>      bos<span class="token punctuation">.</span><span class="token function">flush</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment" spellcheck="true">// 可不写</span>      <span class="token comment" spellcheck="true">// 5.释放资源</span>      bos<span class="token punctuation">.</span><span class="token function">close</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>  <span class="token punctuation">}</span><span class="token punctuation">}</span></code></pre></li></ul></blockquote><blockquote><p>字符缓冲区</p><ul><li>BufferedWriter extends Writer<ul><li>特有成员方法: void newLine():写入一个行分隔符，根据系统写换行符</li></ul></li><li>BufferedReader extends Reader<ul><li>特有成员方法String readline() : 读取一行文本。行的终止符号 \r \n \r\n<ul><li>返回值 : 返回一行，如果达到末尾，返回null</li></ul></li></ul></li></ul></blockquote><pre class=" language-java"><code class="language-java"><span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">Demo01BufferedWriter</span> <span class="token punctuation">{</span>    <span class="token keyword">public</span> <span class="token keyword">static</span> <span class="token keyword">void</span> <span class="token function">main</span><span class="token punctuation">(</span>String<span class="token punctuation">[</span><span class="token punctuation">]</span> args<span class="token punctuation">)</span> <span class="token keyword">throws</span> IOException <span class="token punctuation">{</span>        BufferedWriter bw <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">BufferedWriter</span><span class="token punctuation">(</span><span class="token keyword">new</span> <span class="token class-name">FileWriter</span><span class="token punctuation">(</span><span class="token string">"a.txt"</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token keyword">for</span> <span class="token punctuation">(</span><span class="token keyword">int</span> i <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span> i <span class="token operator">&lt;</span> <span class="token number">10</span><span class="token punctuation">;</span> i<span class="token operator">++</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>            bw<span class="token punctuation">.</span><span class="token function">write</span><span class="token punctuation">(</span><span class="token string">"贾腾达"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>            bw<span class="token punctuation">.</span><span class="token function">newLine</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token punctuation">}</span>        bw<span class="token punctuation">.</span><span class="token function">flush</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        bw<span class="token punctuation">.</span><span class="token function">close</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span><span class="token punctuation">}</span></code></pre><h3 id="编码-转化流"><a href="#编码-转化流" class="headerlink" title="编码(转化流)"></a>编码(转化流)</h3><blockquote><p>ascii 编码: 美国编码表<br>gbxxx: 中文编码表，一般中文两个字节表示<br>unicode : 万国码，utf-8最为常见。一般中文三个字节表示，</p></blockquote><p><code>编码不同引出的问题</code></p><blockquote><p>IDE一般是utf8编码，但是读取系统文件是默认gbk编码，或出现乱码问题</p></blockquote><p><code>转换流解决编码问题</code></p><blockquote><p>转换流可以指定编码表</p><ul><li>InputStreamReader</li><li>OutputStreamWriter</li></ul></blockquote><p><strong>转换流原理</strong><br><img src="%E8%BD%AC%E6%8D%A2%E6%B5%81%E5%8E%9F%E7%90%86.png" alt></p><p><strong>转换流的使用</strong></p><pre class=" language-java"><code class="language-java">    <span class="token keyword">package</span> cn<span class="token punctuation">.</span>jiatengda<span class="token punctuation">.</span>day09<span class="token punctuation">.</span>demo10<span class="token punctuation">;</span><span class="token keyword">import</span> java<span class="token punctuation">.</span>io<span class="token punctuation">.</span>*<span class="token punctuation">;</span><span class="token comment" spellcheck="true">/** * OutputStreamWriter extends Writer *  作用: 字符流通向字节流的桥梁，把字符转换为字节，把能看懂的转换为看不懂的 *  拥有父类的共性方法 * *  构造方法: *      OutputStreamWriter(OutputStream out) : 使用默认字节编码 *      OutputStreamWriter(OutputStream out , String charsetName) 使用指定字节编码 *      参数: *          OutputStream out : 字节输出流，把转换的字节写入指定位置 *          String charsetName : 指定编码表名称，不区分大小写，不指定默认使用utf-8 *   使用步骤: *      1. 创建OutputStreamWriter对象，构造方法中传入字节输出流和指定的编码表名称 *      2. 使用OutputStreamWriter对象中的方法write，把字符转换为字节存储在缓冲区中(编码) *      3. 使用OutputStreamWriter对象中的flush方法，把内存缓冲去中的字节刷新到文件中 *      4. 释放资源 * *  ### InputStreamReader extends Reader *   作用: 字节流向字符的桥梁，把字节转换为字符，把看不懂的转换为能看懂的 *   拥有父类的共性方法 * *   构造方法: *   InputStreamReader(InputStream) *   InputStreamReader(InputStream,String charsetName) * *   使用步骤: *      1. 创建InputStreamReader对象，构造方法中传入字节输入流和指定的编码表名称 *      2. 使用InputStreamReader对象中的read方法，读取文件 *      3. 释放资源 *   注意: *      1. 构造方法中指定的编码表名称和文件的编码必须相同，否则会乱码 * */</span><span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">Demo01InputFR</span> <span class="token punctuation">{</span>    <span class="token keyword">public</span> <span class="token keyword">static</span> <span class="token keyword">void</span> <span class="token function">main</span><span class="token punctuation">(</span>String<span class="token punctuation">[</span><span class="token punctuation">]</span> args<span class="token punctuation">)</span> <span class="token keyword">throws</span> IOException <span class="token punctuation">{</span>        <span class="token function">write_utf_8</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token function">read_utf_8</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span>    <span class="token comment" spellcheck="true">// 读取utf-8的文件</span>    <span class="token keyword">private</span> <span class="token keyword">static</span> <span class="token keyword">void</span> <span class="token function">read_utf_8</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token keyword">throws</span> IOException <span class="token punctuation">{</span>        InputStreamReader isr <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">InputStreamReader</span><span class="token punctuation">(</span><span class="token keyword">new</span> <span class="token class-name">FileInputStream</span><span class="token punctuation">(</span><span class="token string">"e.txt"</span><span class="token punctuation">)</span><span class="token punctuation">,</span><span class="token string">"utf-8"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token keyword">int</span> len <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span>        <span class="token keyword">while</span> <span class="token punctuation">(</span><span class="token punctuation">(</span>len <span class="token operator">=</span> isr<span class="token punctuation">.</span><span class="token function">read</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token operator">!=</span><span class="token operator">-</span><span class="token number">1</span><span class="token punctuation">)</span><span class="token punctuation">{</span>            System<span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token punctuation">(</span><span class="token keyword">char</span><span class="token punctuation">)</span>len<span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token punctuation">}</span>        isr<span class="token punctuation">.</span><span class="token function">close</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span>    <span class="token comment" spellcheck="true">// 使用转换流OutputStreamWriter写utf-8格式的文件</span>    <span class="token keyword">private</span> <span class="token keyword">static</span> <span class="token keyword">void</span> <span class="token function">write_utf_8</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token keyword">throws</span> IOException <span class="token punctuation">{</span>        <span class="token comment" spellcheck="true">//  1. 创建OutputStreamWriter对象，构造方法中传入字节输入流和指定的编码表名称</span>        OutputStreamWriter osw <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">OutputStreamWriter</span><span class="token punctuation">(</span><span class="token keyword">new</span> <span class="token class-name">FileOutputStream</span><span class="token punctuation">(</span><span class="token string">"e.txt"</span><span class="token punctuation">)</span><span class="token punctuation">,</span><span class="token string">"utf-8"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token comment" spellcheck="true">// 2. 使用OutputStreamWriter对象中的方法write，把字符转换为字节存储在缓冲区中(编码)</span>        osw<span class="token punctuation">.</span><span class="token function">write</span><span class="token punctuation">(</span><span class="token string">"你好啊，IDEA"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        osw<span class="token punctuation">.</span><span class="token function">flush</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        osw<span class="token punctuation">.</span><span class="token function">close</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span><span class="token punctuation">}</span></code></pre><h3 id="序列化和反序列化"><a href="#序列化和反序列化" class="headerlink" title="序列化和反序列化"></a>序列化和反序列化</h3><blockquote><p>对象以流的方式，写入到文件中保存，叫写对象，也叫对象的序列化。</p><ul><li>ObjectOutputStream: 对象序列化流 =&gt; writeObject()<ul><li>特有成员方法: void writeObject(object  obj) : 把指定对象写入ObjectOutputStream</li></ul></li><li>ObjectInputStream: 对象反序列化流 =&gt; readObject()<ul><li>特有成员方法:  Object readObject() 从ObjectInoutStream读取对象</li><li>使用前提<ul><li><ol><li>类必须实现Serializable接口</li></ol></li><li><ol start="2"><li>必须存在对应的class文件</li></ol></li></ul></li></ul></li></ul></blockquote><pre class=" language-java"><code class="language-java"><span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">Demo01ObjStream</span> <span class="token punctuation">{</span>    <span class="token keyword">public</span> <span class="token keyword">static</span> <span class="token keyword">void</span> <span class="token function">main</span><span class="token punctuation">(</span>String<span class="token punctuation">[</span><span class="token punctuation">]</span> args<span class="token punctuation">)</span> <span class="token keyword">throws</span> IOException<span class="token punctuation">,</span> ClassNotFoundException <span class="token punctuation">{</span><span class="token comment" spellcheck="true">//        //1. 创建ObjectOutputStream对象，参数传递字节输出流</span><span class="token comment" spellcheck="true">//        ObjectOutputStream oos = new ObjectOutputStream(new FileOutputStream("person.txt"));</span><span class="token comment" spellcheck="true">//        // 2. 使用ObjectOutputStream对象方法writeObject，把对象写入文件中</span><span class="token comment" spellcheck="true">//        oos.writeObject(new Person("贾腾达",18)); // NotSerializableException</span><span class="token comment" spellcheck="true">//        // 3. 释放资源</span><span class="token comment" spellcheck="true">//        oos.close();</span>        ObjectInputStream ois <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">ObjectInputStream</span><span class="token punctuation">(</span><span class="token keyword">new</span> <span class="token class-name">FileInputStream</span><span class="token punctuation">(</span><span class="token string">"person.txt"</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        Object obj <span class="token operator">=</span>  ois<span class="token punctuation">.</span><span class="token function">readObject</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        ois<span class="token punctuation">.</span><span class="token function">close</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        System<span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span>obj<span class="token punctuation">)</span><span class="token punctuation">;</span>        Person p <span class="token operator">=</span> <span class="token punctuation">(</span>Person<span class="token punctuation">)</span> obj <span class="token punctuation">;</span>        System<span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span>p<span class="token punctuation">.</span><span class="token function">getAge</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">+</span> p<span class="token punctuation">.</span><span class="token function">getName</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span><span class="token punctuation">}</span></code></pre><p><code>Person 类</code></p><pre class=" language-java"><code class="language-java"><span class="token keyword">package</span> cn<span class="token punctuation">.</span>jiatengda<span class="token punctuation">.</span>day09<span class="token punctuation">.</span>demo10<span class="token punctuation">;</span><span class="token keyword">import</span> java<span class="token punctuation">.</span>io<span class="token punctuation">.</span>Serializable<span class="token punctuation">;</span><span class="token comment" spellcheck="true">/** * Serializable接口，也叫标记性接口 *  要进行序列化和反序列化的类必须实现此接口，会给类添加一个标记 *  当我们进行序列化和反序列化的时候，就会检测这个类上是否有这个标记，如果有就可以序列化或者反序列化，否则就会跑出NotSerializable异常 *  比如去市场卖肉，肉上有一个蓝色的章，上面有检测合格，有这个才可以放心购买。 */</span><span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">Person</span> <span class="token keyword">implements</span> <span class="token class-name">Serializable</span> <span class="token punctuation">{</span>    <span class="token keyword">private</span> String name <span class="token punctuation">;</span>    <span class="token keyword">private</span> <span class="token keyword">int</span> age<span class="token punctuation">;</span>    <span class="token keyword">public</span> <span class="token function">Person</span><span class="token punctuation">(</span>String name<span class="token punctuation">,</span> <span class="token keyword">int</span> age<span class="token punctuation">)</span> <span class="token punctuation">{</span>        <span class="token keyword">this</span><span class="token punctuation">.</span>name <span class="token operator">=</span> name<span class="token punctuation">;</span>        <span class="token keyword">this</span><span class="token punctuation">.</span>age <span class="token operator">=</span> age<span class="token punctuation">;</span>    <span class="token punctuation">}</span>    <span class="token annotation punctuation">@Override</span>    <span class="token keyword">public</span> String <span class="token function">toString</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>        <span class="token keyword">return</span> <span class="token string">"Person{"</span> <span class="token operator">+</span>                <span class="token string">"name='"</span> <span class="token operator">+</span> name <span class="token operator">+</span> <span class="token string">'\''</span> <span class="token operator">+</span>                <span class="token string">", age="</span> <span class="token operator">+</span> age <span class="token operator">+</span>                <span class="token string">'}'</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span>    <span class="token keyword">public</span> <span class="token function">Person</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span><span class="token punctuation">}</span>    <span class="token keyword">public</span> String <span class="token function">getName</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>        <span class="token keyword">return</span> name<span class="token punctuation">;</span>    <span class="token punctuation">}</span>    <span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">setName</span><span class="token punctuation">(</span>String name<span class="token punctuation">)</span> <span class="token punctuation">{</span>        <span class="token keyword">this</span><span class="token punctuation">.</span>name <span class="token operator">=</span> name<span class="token punctuation">;</span>    <span class="token punctuation">}</span>    <span class="token keyword">public</span> <span class="token keyword">int</span> <span class="token function">getAge</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>        <span class="token keyword">return</span> age<span class="token punctuation">;</span>    <span class="token punctuation">}</span>    <span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">setAge</span><span class="token punctuation">(</span><span class="token keyword">int</span> age<span class="token punctuation">)</span> <span class="token punctuation">{</span>        <span class="token keyword">this</span><span class="token punctuation">.</span>age <span class="token operator">=</span> age<span class="token punctuation">;</span>    <span class="token punctuation">}</span><span class="token punctuation">}</span></code></pre><blockquote><p>transient关键字: 瞬态关键字</p><ul><li>被transient关键字修饰的成员变量不能被序列化</li><li>当不想成员变量被序列化可以用此关键字修饰</li><li>没有static的含义，而且不能被序列化</li></ul></blockquote><blockquote><p>static关键字:  静态关键字 </p><ul><li>优先于非静态加载到内存中(优先于对象进入到内存中)</li><li>被static修饰的成员变量是不能被序列化的，序列化的都是对象</li></ul></blockquote><blockquote><p>异常: 找不到class文件的原理</p><ul><li>可以给可序列化类声明<strong>serialVersionUID</strong>的字段,</li><li>字段固定格式 修饰符 static final long serialVersionUID = xxx;</li></ul></blockquote><h3 id="打印流"><a href="#打印流" class="headerlink" title="打印流"></a>打印流</h3><blockquote><p>java.io.PrintStream extends OutputStream: 打印流</p><ul><li>作用: 为其他流增加了功能，使他们能够方便的打印各种数据值表示形式</li></ul></blockquote><p>特点</p><ul><li><ol><li>只负责数据的输出，不负责数据的独处</li></ol></li><li><ol start="2"><li>和其他流不一样 ，永远不会抛出IOException</li></ol></li><li><ol start="3"><li>有特有的方法，print，println，参数可以是任意类型值</li></ol></li></ul><p>构造方法</p><ul><li><p>PrintStream(File file) : 输出的目的地是一个 文件</p></li><li><p>PrintStream(OutputStream out) : 输出的目的地是一个字节输出流</p></li><li><p>PrintStream(String filename) : 输出的目的地是一个文件路径</p><pre class=" language-java"><code class="language-java"><span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">Demo01StreamConsole</span> <span class="token punctuation">{</span><span class="token keyword">public</span> <span class="token keyword">static</span> <span class="token keyword">void</span> <span class="token function">main</span><span class="token punctuation">(</span>String<span class="token punctuation">[</span><span class="token punctuation">]</span> args<span class="token punctuation">)</span> <span class="token keyword">throws</span> FileNotFoundException <span class="token punctuation">{</span>PrintStream ps <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">PrintStream</span><span class="token punctuation">(</span><span class="token string">"f.txt"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>ps<span class="token punctuation">.</span><span class="token function">write</span><span class="token punctuation">(</span><span class="token number">97</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token comment" spellcheck="true">//a</span>ps<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token number">97</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token comment" spellcheck="true">//97</span>ps<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token string">"a"</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token comment" spellcheck="true">//a</span>ps<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token string">"你好"</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token comment" spellcheck="true">//你好</span>ps<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token boolean">true</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token comment" spellcheck="true">//true</span>ps<span class="token punctuation">.</span><span class="token function">close</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token comment" spellcheck="true">// 修改输出目的地</span>System<span class="token punctuation">.</span><span class="token function">setOut</span><span class="token punctuation">(</span>ps<span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token punctuation">}</span><span class="token punctuation">}</span></code></pre></li></ul><h3 id="Stram流-amp-amp-常用函数接口"><a href="#Stram流-amp-amp-常用函数接口" class="headerlink" title="Stram流 &amp;&amp; 常用函数接口"></a>Stram流 &amp;&amp; 常用函数接口</h3><blockquote><p>常用函数接口</p><ul><li>Supplier接口: Supplier<t> : T get() ，  生产接口</t></li><li>Consumer接口: Consumer<t> : void accept(T t)   消费接口</t></li><li>Predicate接口: Predicate<t> : 对某种类型的数据进行判断，结果返回布尔值<ul><li>唯一方法: boolean test(T t)</li></ul></t></li><li>Function接口: Function&lt;T,R&gt;: 根据一个类型的数据得到另外一个类型的数据<ul><li>唯一抽象方法: R apply(T t)</li><li>默认方法: andThen(): 进行组合操作</li></ul></li></ul></blockquote><pre class=" language-java"><code class="language-java"><span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">Demo02Func</span> <span class="token punctuation">{</span>    <span class="token keyword">public</span> <span class="token keyword">static</span> <span class="token keyword">void</span> <span class="token function">main</span><span class="token punctuation">(</span>String<span class="token punctuation">[</span><span class="token punctuation">]</span> args<span class="token punctuation">)</span> <span class="token punctuation">{</span><span class="token comment" spellcheck="true">//        boolean bol = checkString("abcd",(String str)->str.length() > 5);</span><span class="token comment" spellcheck="true">//        System.out.println(bol);</span>        List<span class="token operator">&lt;</span>String<span class="token operator">></span> list <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">ArrayList</span><span class="token operator">&lt;</span><span class="token operator">></span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        list<span class="token punctuation">.</span><span class="token function">add</span><span class="token punctuation">(</span><span class="token string">"张无忌"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        list<span class="token punctuation">.</span><span class="token function">add</span><span class="token punctuation">(</span><span class="token string">"张三丰"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        list<span class="token punctuation">.</span><span class="token function">add</span><span class="token punctuation">(</span><span class="token string">"张天"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        list<span class="token punctuation">.</span><span class="token function">add</span><span class="token punctuation">(</span><span class="token string">"赵地"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        list<span class="token punctuation">.</span><span class="token function">stream</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">filter</span><span class="token punctuation">(</span>name <span class="token operator">-</span><span class="token operator">></span> name<span class="token punctuation">.</span><span class="token function">startsWith</span><span class="token punctuation">(</span><span class="token string">"张"</span><span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token comment" spellcheck="true">// 参数为Predicate接口</span>                     <span class="token punctuation">.</span><span class="token function">filter</span><span class="token punctuation">(</span>name <span class="token operator">-</span><span class="token operator">></span> name<span class="token punctuation">.</span><span class="token function">length</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token operator">==</span><span class="token number">3</span><span class="token punctuation">)</span>                     <span class="token punctuation">.</span><span class="token function">forEach</span><span class="token punctuation">(</span>name <span class="token operator">-</span><span class="token operator">></span> System<span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span>name<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment" spellcheck="true">// 参数为Consumer接口</span>    <span class="token punctuation">}</span>    <span class="token keyword">private</span> <span class="token keyword">static</span> <span class="token keyword">boolean</span> <span class="token function">checkString</span><span class="token punctuation">(</span>String str <span class="token punctuation">,</span> Predicate<span class="token operator">&lt;</span>String<span class="token operator">></span> pre<span class="token punctuation">)</span> <span class="token punctuation">{</span>        <span class="token keyword">return</span> pre<span class="token punctuation">.</span><span class="token function">test</span><span class="token punctuation">(</span>str<span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span><span class="token punctuation">}</span></code></pre><blockquote><p><code>Stram流</code></p></blockquote><p>常用方法:</p><ul><li>void forEach(Consumer&lt;? super T&gt; action)</li><li>作用: 用来遍历流中数据</li><li>是一个终结方法，调用完了后不能在调用流中的其他方法</li><li>Stream<t> filter(Predicate&lt;? super T&gt; predicate)</t></li><li>作用: 过滤流中的数据并返回过滤后的数据</li><li>R Stream<r> map(Function &lt;? super T , ? extends R&gt; mapper)</r></li><li>作用: 可以将当前T类型数据转换为R类型数据</li><li>long count()</li><li>作用: 统计流中的元素个数</li><li>是一个终结方法，不能再继续调用流中的其他方法</li><li>Stream<t> limit(long maxSize); (从0截取到maxSize)</t></li><li>作用: 对当前流进行截取，如果流长度大于参数，就截取，否则不进行任何操作</li><li>是一个延迟方法，只对流中的数据进行截取，返回新的流，可以继续调取流的方法</li><li>Stream<t> skip(long n); (从n截取到末尾)</t></li><li>作用: 跳过n个流中元素，如果n大于流的长度，则返回一个空的流</li><li>static <t> Stream<t> concat(Stream&lt;? extends T&gt; a , Stream&lt;? extends T&gt;b)</t></t></li><li>作用: 将两个流合并成一个流</li><li>注意:</li><li>Stream流是管道流, 只能被消费一次，使用完之后就会关闭，不能再次使用</li></ul><pre class=" language-java"><code class="language-java"><span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">Demo01Streanm</span> <span class="token punctuation">{</span>    <span class="token keyword">public</span> <span class="token keyword">static</span> <span class="token keyword">void</span> <span class="token function">main</span><span class="token punctuation">(</span>String<span class="token punctuation">[</span><span class="token punctuation">]</span> args<span class="token punctuation">)</span> <span class="token punctuation">{</span>        <span class="token comment" spellcheck="true">// 把集合转换成Stream流</span>        List<span class="token operator">&lt;</span>String<span class="token operator">></span> list <span class="token operator">=</span>  <span class="token keyword">new</span> <span class="token class-name">ArrayList</span><span class="token operator">&lt;</span><span class="token operator">></span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        Stream<span class="token operator">&lt;</span>String<span class="token operator">></span> stream1 <span class="token operator">=</span> list<span class="token punctuation">.</span><span class="token function">stream</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        Set<span class="token operator">&lt;</span>String<span class="token operator">></span> set <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">HashSet</span><span class="token operator">&lt;</span><span class="token operator">></span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        Stream<span class="token operator">&lt;</span>String<span class="token operator">></span> stream2 <span class="token operator">=</span> set<span class="token punctuation">.</span><span class="token function">stream</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        Map<span class="token operator">&lt;</span>String<span class="token punctuation">,</span>String<span class="token operator">></span> map <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">HashMap</span><span class="token operator">&lt;</span><span class="token operator">></span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        Set<span class="token operator">&lt;</span>String<span class="token operator">></span> keySet <span class="token operator">=</span> map<span class="token punctuation">.</span><span class="token function">keySet</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        Stream<span class="token operator">&lt;</span>String<span class="token operator">></span> stream3 <span class="token operator">=</span> keySet<span class="token punctuation">.</span><span class="token function">stream</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        Collection<span class="token operator">&lt;</span>String<span class="token operator">></span> values <span class="token operator">=</span> map<span class="token punctuation">.</span><span class="token function">values</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        Stream<span class="token operator">&lt;</span>String<span class="token operator">></span> stream4 <span class="token operator">=</span> values<span class="token punctuation">.</span><span class="token function">stream</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        Set<span class="token operator">&lt;</span>Map<span class="token punctuation">.</span>Entry<span class="token operator">&lt;</span>String<span class="token punctuation">,</span> String<span class="token operator">>></span> entries <span class="token operator">=</span> map<span class="token punctuation">.</span><span class="token function">entrySet</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        Stream<span class="token operator">&lt;</span>Map<span class="token punctuation">.</span>Entry<span class="token operator">&lt;</span>String<span class="token punctuation">,</span> String<span class="token operator">>></span> stream5 <span class="token operator">=</span> entries<span class="token punctuation">.</span><span class="token function">stream</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token comment" spellcheck="true">// 把数组转换为流</span>        Stream<span class="token operator">&lt;</span>Integer<span class="token operator">></span> stream6 <span class="token operator">=</span> Stream<span class="token punctuation">.</span><span class="token function">of</span><span class="token punctuation">(</span><span class="token number">1</span><span class="token punctuation">,</span><span class="token number">2</span><span class="token punctuation">,</span><span class="token number">3</span><span class="token punctuation">,</span><span class="token number">4</span><span class="token punctuation">,</span><span class="token number">5</span><span class="token punctuation">,</span><span class="token number">6</span><span class="token punctuation">,</span><span class="token number">7</span><span class="token punctuation">,</span><span class="token number">8</span><span class="token punctuation">,</span><span class="token number">9</span><span class="token punctuation">,</span><span class="token number">0</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        Integer<span class="token punctuation">[</span><span class="token punctuation">]</span> arr <span class="token operator">=</span> <span class="token punctuation">{</span><span class="token number">1</span><span class="token punctuation">,</span><span class="token number">2</span><span class="token punctuation">,</span><span class="token number">3</span><span class="token punctuation">,</span><span class="token number">4</span><span class="token punctuation">,</span><span class="token number">5</span><span class="token punctuation">,</span><span class="token number">6</span><span class="token punctuation">}</span><span class="token punctuation">;</span>        Stream<span class="token operator">&lt;</span>Integer<span class="token operator">></span> stream7 <span class="token operator">=</span> Stream<span class="token punctuation">.</span><span class="token function">of</span><span class="token punctuation">(</span>arr<span class="token punctuation">)</span><span class="token punctuation">;</span>        stream7<span class="token punctuation">.</span><span class="token function">forEach</span><span class="token punctuation">(</span>i <span class="token operator">-</span><span class="token operator">></span> System<span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span>i<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span><span class="token punctuation">}</span></code></pre>]]></content>
      
      
      <categories>
          
          <category> java </category>
          
      </categories>
      
      
        <tags>
            
            <tag> java </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>java基础总结1</title>
      <link href="/2019/10/10/javaBase/"/>
      <url>/2019/10/10/javaBase/</url>
      
        <content type="html"><![CDATA[<h3 id="数据类型"><a href="#数据类型" class="headerlink" title="数据类型"></a>数据类型</h3><blockquote><p>基本数据类型</p></blockquote><ul><li>byte (-128 , 127): 8位,用在大型数组中节约空间，主要代替整数，因为 byte 变量占用的空间只有 int 类型的四分之一</li><li>short (-2^15 , 2^15 - 1): 16位 </li><li>int (2^-31 , 2^31 - 1 ) : 32位 , 一般地整型变量默认为 int 类型</li><li>long (-2^63 , 2^63 - 1) : 64位，长整数 ，默认值 0L</li><li>float : 单精度，32位，默认0.0f ， 不能表示精确的值，如货币</li><li>double : 双精度 ， 64位 ， 默认0.0d , 不能表示精确的值</li><li>boolean : true / false , 默认值false</li><li>char : 16位Unicode字符 ， 可以存储任意字符</li></ul><blockquote><p>引用数据类型</p></blockquote><ul><li>对象、数组等都是引用数据类型，引用类型指向一个对象</li><li>所有引用类型的默认值都为null</li></ul><h3 id="数据类型转换"><a href="#数据类型转换" class="headerlink" title="数据类型转换"></a>数据类型转换</h3><ul><li>不能对boolean类型进行类型转换。</li><li>不能把对象类型转换成不相关类的对象。</li><li>在把容量大的类型转换为容量小的类型时必须使用强制类型转换。</li><li>转换过程中可能导致溢出或损失精度</li><li>浮点数到整数的转换是通过舍弃小数得到，而不是四舍五入</li></ul><pre class=" language-java"><code class="language-java"><span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">QiangZhiZhuanHuan</span><span class="token punctuation">{</span>    <span class="token keyword">public</span> <span class="token keyword">static</span> <span class="token keyword">void</span> <span class="token function">main</span><span class="token punctuation">(</span>String<span class="token punctuation">[</span><span class="token punctuation">]</span> args<span class="token punctuation">)</span><span class="token punctuation">{</span>        <span class="token keyword">int</span> i <span class="token operator">=</span><span class="token number">128</span><span class="token punctuation">;</span>           <span class="token keyword">byte</span> b <span class="token operator">=</span> <span class="token punctuation">(</span><span class="token keyword">byte</span><span class="token punctuation">)</span>i<span class="token punctuation">;</span> <span class="token comment" spellcheck="true">// 损失精度   </span>        <span class="token punctuation">(</span><span class="token keyword">int</span><span class="token punctuation">)</span><span class="token number">23.7</span> <span class="token operator">==</span> <span class="token number">23</span><span class="token punctuation">;</span>   <span class="token comment" spellcheck="true">// true 舍弃小数转换</span>        <span class="token keyword">char</span> c1<span class="token operator">=</span><span class="token string">'a'</span><span class="token punctuation">;</span><span class="token comment" spellcheck="true">//定义一个char类型</span>        <span class="token keyword">int</span> i0 <span class="token operator">=</span> c1<span class="token punctuation">;</span><span class="token comment" spellcheck="true">//char自动类型转换为int</span>        <span class="token keyword">int</span> i1 <span class="token operator">=</span> <span class="token number">123</span><span class="token punctuation">;</span>        <span class="token keyword">byte</span> b <span class="token operator">=</span> <span class="token punctuation">(</span><span class="token keyword">byte</span><span class="token punctuation">)</span>i1<span class="token punctuation">;</span><span class="token comment" spellcheck="true">//强制类型转换为byte</span>        System<span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token string">"int强制类型转换为byte后的值等于"</span><span class="token operator">+</span>b<span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span>   <span class="token punctuation">}</span></code></pre><h3 id="对象和类"><a href="#对象和类" class="headerlink" title="对象和类"></a>对象和类</h3><blockquote><p>类: 是一个模板，描述一类对象的行为和状态</p></blockquote><ul><li>一个类可以包含以下类型变量<ul><li>局部变量: 在方法中定义的变量</li><li>成员变量: 方法体之外，类中的变量</li><li>类变量: static 修饰的成员变量</li></ul></li><li>构造方法<ul><li>一个类默认有一个无参构造方法，如果我们自己写了构造方法，默认构造将不再存在</li></ul></li></ul><blockquote><p>对象: 类的一个实例，有状态和行为</p><ul><li>创建对象<ul><li>声明 : 对象名称和对象类型</li><li>实例化 : 使用关键字new创建对象</li><li>初始化 : 调用构造方法初始化对象</li></ul></li></ul></blockquote><pre class=" language-java"><code class="language-java"><span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">Dog</span><span class="token punctuation">{</span>  <span class="token keyword">static</span> String breed<span class="token punctuation">;</span> <span class="token comment" spellcheck="true">// 类变量/静态变量</span>  <span class="token keyword">int</span> age<span class="token punctuation">;</span> <span class="token comment" spellcheck="true">// 成员变量</span>  <span class="token keyword">void</span> <span class="token function">barking</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">{</span>      <span class="token keyword">int</span> a <span class="token operator">=</span> <span class="token number">1</span> <span class="token punctuation">;</span> <span class="token comment" spellcheck="true">// 局部变量</span>  <span class="token punctuation">}</span>  <span class="token keyword">public</span> <span class="token function">Dog</span><span class="token punctuation">(</span><span class="token keyword">int</span> age<span class="token punctuation">)</span><span class="token punctuation">{</span>        <span class="token comment" spellcheck="true">// 这个构造器仅有一个参数：age</span>  <span class="token punctuation">}</span>    <span class="token keyword">public</span> <span class="token keyword">static</span> <span class="token keyword">void</span> <span class="token function">main</span><span class="token punctuation">(</span>String<span class="token punctuation">[</span><span class="token punctuation">]</span> args<span class="token punctuation">)</span><span class="token punctuation">{</span>      <span class="token comment" spellcheck="true">// 下面的语句将创建一个Dog对象</span>      Dog dog <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">Dog</span><span class="token punctuation">(</span> <span class="token string">"d"</span> <span class="token punctuation">)</span><span class="token punctuation">;</span>   <span class="token punctuation">}</span><span class="token punctuation">}</span></code></pre><h3 id="修饰符"><a href="#修饰符" class="headerlink" title="修饰符"></a>修饰符</h3><blockquote><p>访问控制修饰符</p></blockquote><ul><li>public : 对所有类可见</li><li>protected : 对同一包内的类和所有子类可见</li><li>default : 默认，什么都不写，同一包内可见</li><li>private : 同一类中可见</li></ul><p><strong>重写时子类的权限修饰符必须和父类相同或者更高</strong></p><blockquote><p>非访问控制修饰符</p></blockquote><ul><li>static : 修饰类方法和类变量。<ul><li>静态变量: 用来声明独立于对象的变量，无论实例化多少次，静态变量只有一份拷贝</li><li>静态方法: 独立于对象的方法，只能使用静态变量</li></ul></li><li>final : 用来修饰类、方法和变量，final 修饰的类不能够被继承，修饰的方法不能被继承类重新定义，修饰的变量为常量，是不可修改的。<ul><li>final 类不能被继承，没有类能够继承 final 类的任何特性。</li><li>final 修饰的实例变量必须显式指定初始值。变量一旦赋值后，不能被重新赋值</li><li>final 修饰符通常和 static 修饰符一起使用来创建类常量。</li></ul></li><li>abstract : 用来创建抽象类和抽象方法。<ul><li>抽象类不能用来实例化对象，声明抽象类的唯一目的是为了将来对该类进行扩充。</li><li>一个类不能同时被 abstract 和 final 修饰。</li><li>抽象方法是一种没有任何实现的方法，该方法的的具体实现由子类提供。</li></ul></li><li>synchronized  : 用于线程的编程。<ul><li>synchronized 关键字声明的方法同一时间只能被一个线程访问。</li><li></li></ul></li><li>transient : 序列化的对象包含被 transient 修饰的实例变量时，java 虚拟机(JVM)跳过该特定的变量。</li><li>volatile : volatile 修饰的成员变量在每次被线程访问时，都强制从共享内存中重新读取该成员变量的值。而且，当成员变量发生变化时，会强制线程将变化值回写到共享内存。这样在任何时刻，两个不同的线程总是看到某个成员变量的同一个值。</li></ul><h3 id="继承"><a href="#继承" class="headerlink" title="继承"></a>继承</h3><blockquote><p> 继承主要解决的问题是 : 共性抽取</p></blockquote><ul><li>java语言是单继承的,一个类的直接父类只能有一个</li><li>java语言可以多级继承，class A extends B extends C {},继承的最顶端是java.lang.Object类</li><li>一个子类的直接父类是唯一的，但是一个父类可以拥有很多子类</li></ul><blockquote><p>重写(Override) : 在继承的关系中，方法的名称一样，参数列表也(一样)</p></blockquote><blockquote><p>重载(Overload) : 方法名称一样，列表参数（不一样）</p></blockquote><blockquote><p> 重名情况</p><ul><li>局部变量，直接写</li><li>本类变量，this.变量名</li><li>父类变量，super.变量名</li><li>方法重名: 创建的对象是谁，就优先用谁，如果没有就向上查找 </li><li>无论是成员方法，还是成员变量，都是向上查找，绝对不会向下查找</li></ul></blockquote><blockquote><p>继承关系的构造函数执行：</p><ul><li>1.子类构造方法中有一个默认隐含的super()调用，所以父类先执行，子类后执行</li><li>2.可以通过super关键字来调用父类重载构造</li><li>3.super的父类构造调用，必须是子类的第一个语句，不能一个子类构造调用多次super构造(super只能有一个)</li></ul></blockquote><p><strong>this也能用来在构造中调用其他构造，也必须是第一个语句，不能喝super同时调用，也不能执行多个构造。</strong></p><h3 id="抽象类"><a href="#抽象类" class="headerlink" title="抽象类"></a>抽象类</h3><blockquote><p>抽象类: 抽象方法所在的类，必须是抽象类，在class之前加上abstract即可</p></blockquote><blockquote><p>抽象方法: 就是加上abstract关键字，然后去掉大括号，直接分号结束</p></blockquote><ul><li>抽象类不能之间new使用，必须有子类继承父类，new子类来使用</li><li>子类必须覆盖重写父类所有的抽象方法</li><li>抽象类可以有构造方法，供子类创建对象时，初始化父类成员使用</li><li>抽象类中不一定包含抽象方法，但是抽象方法必须在抽象类中</li><li>抽象类的子类必须重写父类的所有抽象方法，否则该子类必须是一个抽象类</li><li>构造方法，类方法（用 static 修饰的方法）不能声明为抽象方法。<pre class=" language-java"><code class="language-java"><span class="token keyword">public</span> <span class="token keyword">abstract</span> <span class="token keyword">class</span> <span class="token class-name">Employee</span><span class="token punctuation">{</span> <span class="token comment" spellcheck="true">// 抽象类</span>  <span class="token keyword">public</span> <span class="token keyword">abstract</span> <span class="token keyword">void</span> <span class="token function">mailCheck</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment" spellcheck="true">// 抽象方法</span><span class="token punctuation">}</span><span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">Salary</span> <span class="token keyword">extends</span> <span class="token class-name">Employee</span><span class="token punctuation">{</span><span class="token punctuation">}</span> <span class="token comment" spellcheck="true">// 子类继承父类</span></code></pre></li></ul><h3 id="接口"><a href="#接口" class="headerlink" title="接口"></a>接口</h3><blockquote><p>接口就是一个类的公共规范</p></blockquote><blockquote><p>接口中可以包含以下内容</p></blockquote><ul><li>常量(java7 jdk)</li><li>抽象方法(java7 jdk)</li><li>默认方法(java8 jdk)</li><li>静态方法(java8 jdk)</li><li>私有方法(java9 jdk)</li></ul><blockquote><p>注意事项</p></blockquote><ul><li>接口中的抽象方法，修饰符必须是默认的两个关键字，public abstract</li><li>如果实现类没有覆盖重写接口中所有的抽象方法，那么这个实现类自己就必须是抽象类</li><li>接口内是没有静态代码块的，也没有构造方法的</li><li>一个类的直接父类是唯一的，但是一个类是可以同时实现多个接口的<ul><li>格式: public class MyClass implements MyInterfaceA, MyInterfaceB{}</li></ul></li><li>如果实现类所实现的多个接口中存在重复的抽象方法，那么只需要覆盖重写一次即可</li><li>如果实现类所实现的多个方法中存在重复的默认方法，那么实现类一定要对冲突的默认方法进行覆盖重写</li><li>一个类的直接父类方法如果和接口默认方法重复，那么会优先使用父类的方法</li><li>接口与接口之间是多继承的</li><li>多个父接口中的抽象方法如果重复是可以的，如果多个父接口中的默认方法重复，那么子接口必须进行默认方法的覆盖重写[default关键字必须带]</li></ul><pre class=" language-java"><code class="language-java"><span class="token comment" spellcheck="true">// 定义接口</span><span class="token keyword">interface</span> <span class="token class-name">Animal</span> <span class="token punctuation">{</span>   <span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">eat</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>   <span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">travel</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token punctuation">}</span><span class="token comment" spellcheck="true">// 实现接口</span><span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">MammalInt</span> <span class="token keyword">implements</span> <span class="token class-name">Animal</span><span class="token punctuation">{</span>    <span class="token comment" spellcheck="true">// 重写接口抽象方法</span>   <span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">eat</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">{</span>      System<span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token string">"Mammal eats"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>   <span class="token punctuation">}</span>   <span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">travel</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">{</span>      System<span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token string">"Mammal travels"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>   <span class="token punctuation">}</span>    <span class="token comment" spellcheck="true">// 自己独有的方法</span>   <span class="token keyword">public</span> <span class="token keyword">int</span> <span class="token function">noOfLegs</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">{</span>      <span class="token keyword">return</span> <span class="token number">0</span><span class="token punctuation">;</span>   <span class="token punctuation">}</span>   <span class="token keyword">public</span> <span class="token keyword">static</span> <span class="token keyword">void</span> <span class="token function">main</span><span class="token punctuation">(</span>String args<span class="token punctuation">[</span><span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token punctuation">{</span>      MammalInt m <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">MammalInt</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>      m<span class="token punctuation">.</span><span class="token function">eat</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>      m<span class="token punctuation">.</span><span class="token function">travel</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>   <span class="token punctuation">}</span><span class="token punctuation">}</span></code></pre><blockquote><p>接口的继承： 一个接口能继承另一个接口，和类之间的继承方式比较相似。接口的继承使用extends关键字，子接口继承父接口的方法。</p></blockquote><ul><li>接口可以是多继承的<ul><li>格式: public interface Hockey extends Sports, Event</li></ul></li></ul><blockquote><p>标记接口: 最常用的继承接口是没有包含任何方法的接口。</p><ul><li>简单形象的说就是给某个对象打个标（盖个戳），使对象拥有某个或某些特权。</li></ul></blockquote><blockquote><p>标记接口作用: </p></blockquote><ul><li>建立一个公共的父接口</li><li>向一个类添加数据类型</li></ul><h3 id="Date类"><a href="#Date类" class="headerlink" title="Date类"></a>Date类</h3><blockquote><p>构造函数</p></blockquote><ul><li>Date() : 获取当前系统的日期和时间</li><li>Date(long date) : 传递毫秒值，将毫秒值转换成系统的日期时间</li></ul><blockquote><p>成员方法</p></blockquote><ul><li>long getTime() : 返回自 1970 年 1 月 1 日 00:00:00 GMT 以来此 Date 对象表示的毫秒数。</li></ul><blockquote><p>SimpleDateFormat类 : 允许自定义时间格式</p></blockquote><ul><li>String format(Date date) : 按照指定的模式把date日期，格式化为符合模式的字符串</li><li>Date parse(String source) : 将符合模式的字符串，解析为date日期</li><li>DateFormat是一个抽象类，不能直接创建对象使用，可以用DateFormat的子类(java.text.SimpleDateFormat)</li></ul><p><strong>parse方法声明了一个异常ParseException解析异常，如果字符串和构造方法的模式不一样，那么程序就会抛出异常.解决: 要么throws继续声明异常，要么try catch自己处理异常</strong></p><pre class=" language-java"><code class="language-java"><span class="token keyword">import</span>  java<span class="token punctuation">.</span>util<span class="token punctuation">.</span>*<span class="token punctuation">;</span><span class="token keyword">import</span> java<span class="token punctuation">.</span>text<span class="token punctuation">.</span>*<span class="token punctuation">;</span><span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">DateDemo</span> <span class="token punctuation">{</span>   <span class="token keyword">public</span> <span class="token keyword">static</span> <span class="token keyword">void</span> <span class="token function">main</span><span class="token punctuation">(</span>String args<span class="token punctuation">[</span><span class="token punctuation">]</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>      Date dNow <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">Date</span><span class="token punctuation">(</span> <span class="token punctuation">)</span><span class="token punctuation">;</span>      SimpleDateFormat ft <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">SimpleDateFormat</span> <span class="token punctuation">(</span><span class="token string">"yyyy-MM-dd hh:mm:ss"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>      System<span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token string">"当前时间为: "</span> <span class="token operator">+</span> ft<span class="token punctuation">.</span><span class="token function">format</span><span class="token punctuation">(</span>dNow<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>   <span class="token punctuation">}</span><span class="token punctuation">}</span></code></pre><blockquote><p>Calendar类</p><ul><li>Calendar类是一个抽象类，在实际使用时实现特定的子类的对象，创建对象的过程对程序员来说是透明的，只需要使用getInstance方法创建即可。</li></ul></blockquote><pre class=" language-java"><code class="language-java">Calendar c <span class="token operator">=</span> Calendar<span class="token punctuation">.</span><span class="token function">getInstance</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token comment" spellcheck="true">//默认是当前日期</span>Calendar c1 <span class="token operator">=</span> Calendar<span class="token punctuation">.</span><span class="token function">getInstance</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>c1<span class="token punctuation">.</span><span class="token function">set</span><span class="token punctuation">(</span><span class="token number">2009</span><span class="token punctuation">,</span> <span class="token number">6</span> <span class="token operator">-</span> <span class="token number">1</span><span class="token punctuation">,</span> <span class="token number">12</span><span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment" spellcheck="true">// 获取指定日期的Calendar对象</span></code></pre><blockquote><p>Calendar类对象字段类型</p></blockquote><p><img src="CalendarFinal.png" alt></p><pre class=" language-java"><code class="language-java"><span class="token comment" spellcheck="true">//Calendar类对象信息的设置</span>c1<span class="token punctuation">.</span><span class="token function">set</span><span class="token punctuation">(</span>Calendar<span class="token punctuation">.</span>YEAR<span class="token punctuation">,</span><span class="token number">2008</span><span class="token punctuation">)</span><span class="token punctuation">;</span>c1<span class="token punctuation">.</span><span class="token function">set</span><span class="token punctuation">(</span>Calendar<span class="token punctuation">.</span>DATE<span class="token punctuation">,</span><span class="token number">10</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token comment" spellcheck="true">//Add设置</span>c1<span class="token punctuation">.</span><span class="token function">add</span><span class="token punctuation">(</span>Calendar<span class="token punctuation">.</span>DATE<span class="token punctuation">,</span> <span class="token number">10</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token comment" spellcheck="true">// 把c1对象的日期加上10，也就是c1也就表示为10天后的日期，其它所有的数值会被重新计算</span><span class="token comment" spellcheck="true">//Calendar类对象信息的获得</span>Calendar c1 <span class="token operator">=</span> Calendar<span class="token punctuation">.</span><span class="token function">getInstance</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token comment" spellcheck="true">// 获得年份</span><span class="token keyword">int</span> year <span class="token operator">=</span> c1<span class="token punctuation">.</span><span class="token function">get</span><span class="token punctuation">(</span>Calendar<span class="token punctuation">.</span>YEAR<span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token comment" spellcheck="true">// 获得月份</span><span class="token keyword">int</span> month <span class="token operator">=</span> c1<span class="token punctuation">.</span><span class="token function">get</span><span class="token punctuation">(</span>Calendar<span class="token punctuation">.</span>MONTH<span class="token punctuation">)</span> <span class="token operator">+</span> <span class="token number">1</span><span class="token punctuation">;</span><span class="token comment" spellcheck="true">// 获得日期</span><span class="token keyword">int</span> date <span class="token operator">=</span> c1<span class="token punctuation">.</span><span class="token function">get</span><span class="token punctuation">(</span>Calendar<span class="token punctuation">.</span>DATE<span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token comment" spellcheck="true">// 获得小时</span><span class="token keyword">int</span> hour <span class="token operator">=</span> c1<span class="token punctuation">.</span><span class="token function">get</span><span class="token punctuation">(</span>Calendar<span class="token punctuation">.</span>HOUR_OF_DAY<span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token comment" spellcheck="true">// 获得分钟</span><span class="token keyword">int</span> minute <span class="token operator">=</span> c1<span class="token punctuation">.</span><span class="token function">get</span><span class="token punctuation">(</span>Calendar<span class="token punctuation">.</span>MINUTE<span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token comment" spellcheck="true">// 获得秒</span><span class="token keyword">int</span> second <span class="token operator">=</span> c1<span class="token punctuation">.</span><span class="token function">get</span><span class="token punctuation">(</span>Calendar<span class="token punctuation">.</span>SECOND<span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token comment" spellcheck="true">// 获得星期几（注意（这个与Date类是不同的）：1代表星期日、2代表星期1、3代表星期二，以此类推）</span><span class="token keyword">int</span> day <span class="token operator">=</span> c1<span class="token punctuation">.</span><span class="token function">get</span><span class="token punctuation">(</span>Calendar<span class="token punctuation">.</span>DAY_OF_WEEK<span class="token punctuation">)</span><span class="token punctuation">;</span></code></pre><h3 id="Collection集合"><a href="#Collection集合" class="headerlink" title="Collection集合"></a>Collection集合</h3><blockquote><p>java.util.Collection : 所有单列集合的最顶层接口，里面定义了单列集合的共性方法，单列集合都可以使用</p></blockquote><ul><li>数组的长度是固定的，集合的长度是可变的</li><li>数组可以存储基本类型，集合不可以</li></ul><blockquote><p>共性方法</p><ul><li>public boolean add(E e) : 把给定的对象添加到集合中</li><li>public boolean remove(E e) : 把给定的元素在集合中删除</li><li>public boolean contains(E e) : 判断集合中是否包含给定的元素</li><li>public boolean isEmpty() : 集合是否为空</li><li>public int size() : 返回集合元素的个数</li><li>public Object[] toArray() : 把集合中的元素，存储到数组中</li><li>public void clear() : 清空集合内的所有元素</li></ul></blockquote><blockquote><p>迭代器 :  java.util.Iterator接口</p></blockquote><blockquote><p>两个常用方法</p><ul><li>boolean hasNext() 如果仍有元素可以迭代，则返回true</li><li>E next() 取出集合中下一个元素<br>因为是一个接口，我们只能使用其实现类，获取实现类的方式特殊: Collection中有一个Iterator(),这个方法返回迭代器实现类</li></ul></blockquote><p>使用步骤</p><ul><li>1.使用集合方法获取实现类，使用Iterator接口接受(多态)</li><li>2.使用接口方法hasNext方法判断是否有下一个元素</li><li>3.使用next方法取出下一个元素</li></ul><blockquote><p>原理:</p><ul><li><ol><li>获取迭代器对象，并且把指针放在索引-1的位置</li></ol></li><li><ol start="2"><li>next方法会取出下一个元素，并且把指针往后移动一位</li></ol></li></ul></blockquote><blockquote><p>增强for循环: 底层使用的也是迭代器，使用for循环的格式，简化了迭代器的书写,Collection extends Iterator<e> ,所有的单列集合都可以使用foreach</e></p><pre class=" language-java"><code class="language-java"><span class="token comment" spellcheck="true">// 格式</span><span class="token keyword">for</span> <span class="token punctuation">(</span> 集合<span class="token operator">/</span>数组的数据类型 变量名<span class="token operator">:</span> 集合名<span class="token operator">/</span>数组名<span class="token punctuation">)</span><span class="token punctuation">{</span>      <span class="token comment" spellcheck="true">// 循环操作</span><span class="token punctuation">}</span></code></pre><p>示例</p><pre class=" language-java"><code class="language-java"><span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">Demo01Collection</span> <span class="token punctuation">{</span>    <span class="token keyword">public</span> <span class="token keyword">static</span> <span class="token keyword">void</span> <span class="token function">main</span><span class="token punctuation">(</span>String<span class="token punctuation">[</span><span class="token punctuation">]</span> args<span class="token punctuation">)</span> <span class="token punctuation">{</span>        Collection<span class="token operator">&lt;</span>String<span class="token operator">></span> arr <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">ArrayList</span><span class="token operator">&lt;</span><span class="token operator">></span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        arr<span class="token punctuation">.</span><span class="token function">add</span><span class="token punctuation">(</span><span class="token string">"姚明"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        arr<span class="token punctuation">.</span><span class="token function">add</span><span class="token punctuation">(</span><span class="token string">"詹姆斯"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        arr<span class="token punctuation">.</span><span class="token function">add</span><span class="token punctuation">(</span><span class="token string">"科比"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        Iterator<span class="token operator">&lt;</span>String<span class="token operator">></span> it <span class="token operator">=</span> arr<span class="token punctuation">.</span><span class="token function">iterator</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token keyword">while</span> <span class="token punctuation">(</span>it<span class="token punctuation">.</span><span class="token function">hasNext</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">{</span>            System<span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span>it<span class="token punctuation">.</span><span class="token function">next</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token punctuation">}</span>        System<span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token string">"============"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token keyword">for</span> <span class="token punctuation">(</span>String item<span class="token operator">:</span> arr<span class="token punctuation">)</span><span class="token punctuation">{</span>            System<span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span>item<span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token punctuation">}</span>    <span class="token punctuation">}</span><span class="token punctuation">}</span></code></pre></blockquote><h3 id="java多线程"><a href="#java多线程" class="headerlink" title="java多线程"></a>java多线程</h3><blockquote><p>创建线程的两种方式</p></blockquote><ul><li><p>创建Thread类的子类</p><ul><li>1、创建Thread的子类</li><li>2、子类重写Thread类的run方法，设置线程任务</li><li>3、创建子类对象</li><li>4、调用Thread类的start方法，开启新线程，执行run方法</li></ul></li><li><p>实现Runnable接口</p><ul><li>1、创建一个Runnable接口的实现类</li><li>2、在实现类中重写run方法，无参数的，设置线程任务</li><li>3、创建一个Runnable接口的实现类对象</li><li>4、创建Thread类对象，构造方法传递Runnable接口的实现类对象</li><li>5、调用Thread的start方法，开启线程的run方法</li></ul></li></ul><blockquote><p>两种方式对比，Runnable方式的好处</p></blockquote><ul><li>1、避免了单继承的局限性</li><li>2、增强了程序的扩展性，减低了程序的耦合性（解耦）</li></ul><blockquote><p>常用方法</p></blockquote><ul><li>String getName(): 获取该线程的名称</li><li>static Thread currentThread() : 返回当前正在执行的线程对象</li><li>void setName(String name): 设置线程名称</li><li>public static void sleep(long mills) : 使当前线程暂时暂停执行，时间结束后继续执行</li></ul><pre class=" language-java"><code class="language-java"><span class="token comment" spellcheck="true">// 使用MyThread类</span><span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">Demo01Thread</span> <span class="token punctuation">{</span>    <span class="token keyword">public</span> <span class="token keyword">static</span> <span class="token keyword">void</span> <span class="token function">main</span><span class="token punctuation">(</span>String<span class="token punctuation">[</span><span class="token punctuation">]</span> args<span class="token punctuation">)</span> <span class="token punctuation">{</span>        MyThread mt <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">MyThread</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token comment" spellcheck="true">// 设置线程名称</span>        mt<span class="token punctuation">.</span><span class="token function">setName</span><span class="token punctuation">(</span><span class="token string">"小贾"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token comment" spellcheck="true">// 调用新线程</span>        mt<span class="token punctuation">.</span><span class="token function">start</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token comment" spellcheck="true">// 构造方法设置线程名称</span>        MyThread m <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">MyThread</span><span class="token punctuation">(</span><span class="token string">"小一"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        m<span class="token punctuation">.</span><span class="token function">start</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token keyword">for</span> <span class="token punctuation">(</span><span class="token keyword">int</span> i <span class="token operator">=</span> <span class="token number">0</span> <span class="token punctuation">;</span> i <span class="token operator">&lt;</span> <span class="token number">20</span> <span class="token punctuation">;</span> i<span class="token operator">++</span><span class="token punctuation">)</span><span class="token punctuation">{</span>            System<span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span>i<span class="token punctuation">)</span><span class="token punctuation">;</span>            <span class="token keyword">try</span> <span class="token punctuation">{</span>                Thread<span class="token punctuation">.</span><span class="token function">sleep</span><span class="token punctuation">(</span><span class="token number">1000</span><span class="token punctuation">)</span><span class="token punctuation">;</span>            <span class="token punctuation">}</span> <span class="token keyword">catch</span> <span class="token punctuation">(</span><span class="token class-name">InterruptedException</span> e<span class="token punctuation">)</span> <span class="token punctuation">{</span>                e<span class="token punctuation">.</span><span class="token function">printStackTrace</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>            <span class="token punctuation">}</span>        <span class="token punctuation">}</span>    <span class="token punctuation">}</span><span class="token punctuation">}</span><span class="token comment" spellcheck="true">// MyThread类</span><span class="token keyword">package</span> cn<span class="token punctuation">.</span>jiatengda<span class="token punctuation">.</span>day09<span class="token punctuation">.</span>demo05<span class="token punctuation">;</span><span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">MyThread</span> <span class="token keyword">extends</span> <span class="token class-name">Thread</span> <span class="token punctuation">{</span>    <span class="token keyword">public</span> <span class="token function">MyThread</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>    <span class="token punctuation">}</span>    <span class="token keyword">public</span> <span class="token function">MyThread</span><span class="token punctuation">(</span>String name<span class="token punctuation">)</span> <span class="token punctuation">{</span>        <span class="token keyword">super</span><span class="token punctuation">(</span>name<span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span>    <span class="token annotation punctuation">@Override</span>    <span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">run</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>       <span class="token comment" spellcheck="true">// 获取线程的名称</span>        System<span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token function">getName</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token comment" spellcheck="true">// System.out.println(Thread.currentThread().getName());</span>    <span class="token punctuation">}</span><span class="token punctuation">}</span><span class="token comment" spellcheck="true">// 使用Runnable接口匿名内部类的方式创建线程</span><span class="token keyword">package</span> cn<span class="token punctuation">.</span>jiatengda<span class="token punctuation">.</span>day09<span class="token punctuation">.</span>demo05<span class="token punctuation">;</span><span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">Demo02Thread</span> <span class="token punctuation">{</span>    <span class="token keyword">public</span> <span class="token keyword">static</span> <span class="token keyword">void</span> <span class="token function">main</span><span class="token punctuation">(</span>String<span class="token punctuation">[</span><span class="token punctuation">]</span> args<span class="token punctuation">)</span> <span class="token punctuation">{</span>        <span class="token keyword">new</span> <span class="token class-name">Thread</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">{</span>            <span class="token annotation punctuation">@Override</span>            <span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">run</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>                System<span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token string">"thread1"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>            <span class="token punctuation">}</span>        <span class="token punctuation">}</span><span class="token punctuation">.</span><span class="token function">start</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token comment" spellcheck="true">//Runnable接口</span>        <span class="token keyword">new</span> <span class="token class-name">Thread</span><span class="token punctuation">(</span><span class="token keyword">new</span> <span class="token class-name">Runnable</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>            <span class="token annotation punctuation">@Override</span>            <span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">run</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>                System<span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token string">"thread2"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>            <span class="token punctuation">}</span>        <span class="token punctuation">}</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">start</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span><span class="token punctuation">}</span></code></pre><blockquote><p>线程安全问题 : 多线程访问了共享的数据，会产生安全问题</p></blockquote><p><code>线程安全问题是不能出现的，共享数据时，一个线程执行时不管是否失去执行权，其他共享想成就只能等待，保证使用一个线程运行</code></p><blockquote><p>解决线程安全问题</p></blockquote><ul><li>1.同步代码块<ul><li>1).通过代码块中的锁对象，可以使用任意对象</li><li>2).但是必须保证多个线程中使用的锁对象是一个</li><li>3).锁对象的作用: 把同步代码块锁住，只让一个线程在同步代码块中执行</li></ul></li><li>2.同步方法<ul><li>1). 也会把代码内部的代码锁住，只让一个线程执行，同步锁就是调用方法的对象，也就是this</li><li>2). 静态同步方法的锁对象不能是this，因为this是创建对象之后产生的，静态方法优先于对象，静态方法的锁对象是本来写class文件对象</li></ul></li><li>3.Lock锁(一个接口)<ul><li>1.在成员位置创建一个ReentrantLock类对象</li><li>2.在可能出现安全问题的代码前，调用Lock接口中的方法lock获取锁</li><li>3.在可能出现安全问题的代码后，调用Lock接口中的方法unlock释放锁<blockquote><p> Lock接口中的方法</p></blockquote></li></ul></li><li>void lock() : 获取锁</li><li>void unlock() : 释放锁</li></ul><pre class=" language-java"><code class="language-java"><span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">Demo01ThreadSafe</span> <span class="token punctuation">{</span>    <span class="token keyword">public</span> <span class="token keyword">static</span> <span class="token keyword">void</span> <span class="token function">main</span><span class="token punctuation">(</span>String<span class="token punctuation">[</span><span class="token punctuation">]</span> args<span class="token punctuation">)</span> <span class="token punctuation">{</span>        <span class="token comment" spellcheck="true">// 创建Runnable 实现类对象</span>        RunnableImpl r <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">RunnableImpl</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token comment" spellcheck="true">// 创建Thread类对象</span>        Thread t0 <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">Thread</span><span class="token punctuation">(</span>r<span class="token punctuation">)</span><span class="token punctuation">;</span>        Thread t1 <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">Thread</span><span class="token punctuation">(</span>r<span class="token punctuation">)</span><span class="token punctuation">;</span>        Thread t2 <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">Thread</span><span class="token punctuation">(</span>r<span class="token punctuation">)</span><span class="token punctuation">;</span>        t0<span class="token punctuation">.</span><span class="token function">start</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        t1<span class="token punctuation">.</span><span class="token function">start</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        t2<span class="token punctuation">.</span><span class="token function">start</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span><span class="token punctuation">}</span><span class="token comment" spellcheck="true">//  使用锁解决卖票问题</span><span class="token keyword">package</span> cn<span class="token punctuation">.</span>jiatengda<span class="token punctuation">.</span>day09<span class="token punctuation">.</span>demo05<span class="token punctuation">;</span><span class="token keyword">import</span> java<span class="token punctuation">.</span>util<span class="token punctuation">.</span>concurrent<span class="token punctuation">.</span>locks<span class="token punctuation">.</span>Lock<span class="token punctuation">;</span><span class="token keyword">import</span> java<span class="token punctuation">.</span>util<span class="token punctuation">.</span>concurrent<span class="token punctuation">.</span>locks<span class="token punctuation">.</span>ReentrantLock<span class="token punctuation">;</span><span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">RunnableImpl</span> <span class="token keyword">implements</span> <span class="token class-name">Runnable</span> <span class="token punctuation">{</span>    <span class="token comment" spellcheck="true">// 定义共享票源</span>    <span class="token keyword">private</span> <span class="token keyword">int</span> ticket <span class="token operator">=</span> <span class="token number">100</span><span class="token punctuation">;</span>    <span class="token comment" spellcheck="true">// 创建锁对象</span>    Object obj <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">Object</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    Lock l <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">ReentrantLock</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token annotation punctuation">@Override</span>    <span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">run</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>        <span class="token comment" spellcheck="true">// 使用循环，让卖票重复执行</span>        <span class="token keyword">while</span> <span class="token punctuation">(</span><span class="token boolean">true</span><span class="token punctuation">)</span><span class="token punctuation">{</span>            <span class="token keyword">synchronized</span> <span class="token punctuation">(</span>obj<span class="token punctuation">)</span><span class="token punctuation">{</span>               <span class="token comment" spellcheck="true">//  l.lock();</span>                <span class="token keyword">if</span> <span class="token punctuation">(</span>ticket <span class="token operator">></span> <span class="token number">0</span> <span class="token punctuation">)</span><span class="token punctuation">{</span>                    <span class="token comment" spellcheck="true">// 提高出现的几率 ，睡眠一下</span>                    <span class="token keyword">try</span> <span class="token punctuation">{</span>                        Thread<span class="token punctuation">.</span><span class="token function">sleep</span><span class="token punctuation">(</span><span class="token number">10</span><span class="token punctuation">)</span><span class="token punctuation">;</span>                    <span class="token punctuation">}</span> <span class="token keyword">catch</span> <span class="token punctuation">(</span><span class="token class-name">InterruptedException</span> e<span class="token punctuation">)</span> <span class="token punctuation">{</span>                        e<span class="token punctuation">.</span><span class="token function">printStackTrace</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>                    <span class="token punctuation">}</span>                    System<span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span>Thread<span class="token punctuation">.</span><span class="token function">currentThread</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">getName</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">+</span> <span class="token string">"正在卖第"</span> <span class="token operator">+</span> ticket <span class="token operator">+</span> <span class="token string">"张票"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>                    ticket <span class="token operator">--</span> <span class="token punctuation">;</span>                <span class="token punctuation">}</span>               <span class="token comment" spellcheck="true">// l.unlock();</span>            <span class="token punctuation">}</span>            <span class="token comment" spellcheck="true">// payTicket()</span>        <span class="token punctuation">}</span>    <span class="token punctuation">}</span>    <span class="token keyword">public</span> <span class="token keyword">synchronized</span> <span class="token keyword">void</span> <span class="token function">payTicket</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">{</span>        <span class="token keyword">if</span> <span class="token punctuation">(</span>ticket <span class="token operator">></span> <span class="token number">0</span> <span class="token punctuation">)</span><span class="token punctuation">{</span>            <span class="token comment" spellcheck="true">// 提高出现的几率 ，睡眠一下</span>            <span class="token keyword">try</span> <span class="token punctuation">{</span>                Thread<span class="token punctuation">.</span><span class="token function">sleep</span><span class="token punctuation">(</span><span class="token number">10</span><span class="token punctuation">)</span><span class="token punctuation">;</span>            <span class="token punctuation">}</span> <span class="token keyword">catch</span> <span class="token punctuation">(</span><span class="token class-name">InterruptedException</span> e<span class="token punctuation">)</span> <span class="token punctuation">{</span>                e<span class="token punctuation">.</span><span class="token function">printStackTrace</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>            <span class="token punctuation">}</span>            System<span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span>Thread<span class="token punctuation">.</span><span class="token function">currentThread</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">getName</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">+</span> <span class="token string">"正在卖第"</span> <span class="token operator">+</span> ticket <span class="token operator">+</span> <span class="token string">"张票"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>            ticket <span class="token operator">--</span> <span class="token punctuation">;</span>        <span class="token punctuation">}</span>    <span class="token punctuation">}</span><span class="token punctuation">}</span></code></pre><blockquote><p>等待唤醒机制:就是在一个线程进行了规定操作后，就进入等待状态（wait（））， 等待其他线程执行完他们的指定代码过后 再将其唤醒（notify（））。</p></blockquote><blockquote><p>等待唤醒机制是管理多个线程执行顺序方案，上述案例是多个线程抢占资源，而等待唤醒机制可以让我们操作多个线程的执行先后顺序</p></blockquote><ul><li>wait() : 进入一直等待状态，知道被唤醒</li><li>wait(long l) : 计时等待 和sleep 一样，时间结束自然唤醒</li><li>notify() : 唤醒等待时间长的一个线程</li><li>notifyAll() : 唤醒所有的此对象上等待的线程</li></ul>]]></content>
      
      
      <categories>
          
          <category> java </category>
          
      </categories>
      
      
        <tags>
            
            <tag> java </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>sql</title>
      <link href="/2019/09/26/sql/"/>
      <url>/2019/09/26/sql/</url>
      
        <content type="html"><![CDATA[<h3 id="MySql"><a href="#MySql" class="headerlink" title="MySql"></a>MySql</h3><h3 id="数据库基本概念"><a href="#数据库基本概念" class="headerlink" title="数据库基本概念"></a>数据库基本概念</h3><blockquote><p>数据库(DataBase) : 简称DB ， 用于存储和管理数据的仓库</p></blockquote><p>数据库的特点</p><ul><li>1.持久化存储数据,其实数据库就是一个文件系统</li><li>2.方便存储和管理数据</li><li>3.使用了统一的方式来操作数据库</li></ul><blockquote><p>常见数据库软件网上可查</p></blockquote><h3 id="MySql-1"><a href="#MySql-1" class="headerlink" title="MySql"></a>MySql</h3><blockquote><p>打开和关闭mysql</p><pre><code>// windows下  mac需要找到mysqlnet start mysqlnet stop mysql</code></pre></blockquote><blockquote><p>登录和登出</p></blockquote><pre><code>// 登录mysql -u root -p 密码mysql -h ip -u root -p 密码mysql --host ip --user 用户名 --password 密码//登出quit exit</code></pre><h3 id="mysql-的目录结构"><a href="#mysql-的目录结构" class="headerlink" title="mysql 的目录结构"></a>mysql 的目录结构</h3><blockquote><p>安装目录</p></blockquote><ul><li>my.ini: mysql配置文件</li></ul><blockquote><p>数据目录</p></blockquote><ul><li>数据库 -&gt; 文件夹</li><li>表 -&gt; 文件</li><li>数据 -&gt; 文件内的数据</li></ul><h3 id="SQL"><a href="#SQL" class="headerlink" title="SQL"></a>SQL</h3><blockquote><p>结构化查询语言： 定义了操作所有关系型数据库的规则</p><ul><li>每一种数据库操作的方式存在不一样的地方成为<code>方言</code></li></ul></blockquote><p>SQL 通用语法 </p><ul><li>SQL语法可以以单行或者多行书写，以分号结尾。</li><li>空格、缩进来强化可读性</li><li>SQL不区分大小写，关键字建议大写</li><li>3种注释<ul><li>单行注释 – 注释内容  或者 # 注释内容</li><li>多行注释 /* 注释内容 */</li></ul></li></ul><blockquote><p>sql分类</p><ul><li>DDL : 数据定义语言，操作数据库、表</li><li>DML : 数据操作语言，增删改表中的数据</li><li>DQL : 数据查询语言，查询表中的数据</li><li>DCL : 数据控制语言，授权</li></ul></blockquote><h3 id="操作数据库、表"><a href="#操作数据库、表" class="headerlink" title="操作数据库、表"></a>操作数据库、表</h3><blockquote><p>操作数据库 : CRUD</p><ul><li>C(Create) : 创建<ul><li>create database 数据库名;  // 创建数据库</li><li>create database  数据库名 character set 字符集名称;  // 创建指定字符集的数据库</li><li>create database if not exists 数据库名;  // 创建数据库并判断是否存在数据库</li></ul></li><li>R(Retrieve) : 查询 <ul><li>show databases;  // 查看所有数据库的名称</li><li>show create database 数据库名称; //  查询某个数据库的字符集</li></ul></li><li>U(Updata) : 修改<ul><li>修改数据库的字符集: alter database 数据库名称  character set 字符集名称(utf8); </li></ul></li><li>D(Delete) : 删除<ul><li>删除数据库: drop database 数据库名称;</li><li>先判断是否存在再删除: drop database if  exists 数据库名称; </li></ul></li><li>使用数据库<ul><li>select database(); // 查询当前是使用 的数据库</li><li>use 数据库名称; // 使用数据库</li></ul></li></ul></blockquote><blockquote><p>操作表</p></blockquote><blockquote><p>数据库的常用数据类型</p><ul><li>int : 整数类型 -&gt; age int</li><li>double: 小数类型 -&gt; score double(5,2)</li><li>date: 日期类型，只包含年月日，yyyy-MM-dd</li><li>datetime: 日期，包含年月日时分秒, yyyy-MM-dd HH:mm:ss</li><li>timestamp : 时间戳类型, 包含年月日时分秒, yyyy-MM-dd HH:mm:ss<ul><li>不给这个字段赋值或赋值为null，则默认使用当前的系统时间默认赋值</li></ul></li><li>varchar: 字符串类型 -&gt; name varchar(20); // 姓名最大20个字符 </li></ul></blockquote><blockquote><ul><li>C(Create) : 创建<ul><li>create table 表名(</li><li>列名1 数据类型1;</li><li>列名2 数据类型2;</li><li>…</li><li>列名n 数据类型n</li><li>);</li><li>最后一列不需要加逗号<pre class=" language-java"><code class="language-java">create table <span class="token function">student</span><span class="token punctuation">(</span>  id <span class="token keyword">int</span><span class="token punctuation">,</span>  name <span class="token function">varchar</span><span class="token punctuation">(</span><span class="token number">32</span><span class="token punctuation">)</span><span class="token punctuation">,</span>  age <span class="token keyword">int</span><span class="token punctuation">,</span>  score <span class="token keyword">double</span><span class="token punctuation">(</span><span class="token number">4</span><span class="token punctuation">,</span><span class="token number">1</span><span class="token punctuation">)</span><span class="token punctuation">,</span>  birthday date<span class="token punctuation">,</span>  insert_time timestamp<span class="token punctuation">)</span><span class="token punctuation">;</span></code></pre></li></ul></li><li>复制表: create table 表名 like 被复制的表名;</li></ul></blockquote><blockquote><ul><li>R(Retrieve) : 查询 <ul><li>查询表结构: desc 表名</li><li>查询某个数据库中所有的表名称 : show tables;</li></ul></li></ul></blockquote><blockquote><ul><li>U(Updata) : 修改<ul><li>修改表名 : alter table 表名 rename to 新的表名;</li><li>修改表的字符集 : alter table  表名 character set 字符集名称;</li><li>添加一列 :  alter table 表名 add 列明 数据类型;</li><li>修改列的名称和类型 : <ul><li>alter table 表名 change 列名 新列名 新数据类型;</li><li>alter table 表名  modify 列名 新数据类型;</li></ul></li><li>删除列 : alter table 表名 drop 列名;</li></ul></li></ul></blockquote><blockquote><ul><li>D(Delete) : 删除<ul><li>drop table if exists 表名称;</li><li>drop table 表名称;</li></ul></li></ul></blockquote><p><code>客户端图形化工具 : SQLYog / navicat for mysql</code></p><h3 id="DML-增删改表中的数据"><a href="#DML-增删改表中的数据" class="headerlink" title="DML 增删改表中的数据"></a>DML 增删改表中的数据</h3><blockquote><p>1.添加数据</p><ul><li>insert into 表名(列名1,列名2…,列名n) values (值1,值2,….,值n)<ul><li>注意<ul><li>列名和值需要一一对应</li><li>如果表名后，不定义列名，则默认给所有列添加值</li><li>除了数字类型，其他类型需要使用引号引起来，单双引号都可以</li></ul></li></ul></li></ul></blockquote><blockquote><p>2.删除数据</p><ul><li>delete from 表名 [where 条件] <ul><li>如果不加条件，则把表中的数据全部删除(不推荐使用，一条一条删除，效率不高)</li></ul></li><li>TRUNCATE TABLE 表名 (推荐使用，效率更高)– 删除表，然后再创建一个一模一样的空表</li></ul></blockquote><blockquote><p>3.修改数据</p></blockquote><blockquote><ul><li>update 表名 set 列名1 = 值1, 列名2 = 值2, …. , 列名n = 值n  [where 条件];<ul><li>如果不加任何条件，则会修改表中所有的数据</li></ul></li></ul></blockquote><h3 id="DQL-查询表中的记录"><a href="#DQL-查询表中的记录" class="headerlink" title="DQL 查询表中的记录"></a>DQL 查询表中的记录</h3><blockquote><p>查询表所有: select * from 表名; </p></blockquote><blockquote><p>语法<br>select 字段列表<br>from 表名列表<br>where 条件列表<br>group by 分组字段<br>having 分组后的条件<br>order by 排序<br>limit 分页限定</p></blockquote><blockquote><p>基础查询</p><ul><li>多个字段的查询<ul><li>如果查询所有字段可以使用 * 来替代字段的列表</li></ul></li><li>去除重复<ul><li>DISTINCT关键字</li></ul></li><li>计算列<ul><li>一般可以使用四则运算计算一些列的值</li><li>如果有null参与计算，结果都为null,可以使用IFNULL关键字解决为null的值</li><li>IFNULL(表达式1，表达式2)</li></ul></li><li>起别名<ul><li>AS关键字</li></ul></li></ul></blockquote><pre class=" language-sql"><code class="language-sql"><span class="token comment" spellcheck="true">// AS 可以用空格代替</span><span class="token keyword">SELECT</span> <span class="token keyword">DISTINCT</span> NAME <span class="token punctuation">,</span> math <span class="token punctuation">,</span> math <span class="token operator">+</span> IFNULL<span class="token punctuation">(</span>english <span class="token punctuation">,</span> <span class="token number">0</span><span class="token punctuation">)</span> <span class="token keyword">AS</span> 总分 <span class="token keyword">FROM</span> student<span class="token punctuation">;</span></code></pre><blockquote><p>条件查询</p><ul><li>where字句后面跟条件</li><li>运算符<ul><li><blockquote><p>, &lt; , = , &gt;=,&lt;= , &lt;&gt;(表示不等于)</p></blockquote></li><li>BETWEEN …AND</li><li>IN</li><li>LIKE ：模糊查询<ul><li>_ : 单个任意字符</li><li>% : 多个任意字符</li></ul></li><li>IS NULL</li><li>and 或者 &amp;&amp; </li><li>or 或者 ||</li><li>not 或者 | </li></ul></li></ul></blockquote><pre class=" language-sql"><code class="language-sql"><span class="token comment" spellcheck="true">-- 查询年龄大于等于20岁，小于等于30岁的数据</span><span class="token keyword">SELECT</span> <span class="token operator">*</span> <span class="token keyword">FROM</span> stu <span class="token keyword">WHERE</span>  age <span class="token operator">>=</span><span class="token number">20</span> <span class="token operator">AND</span> age <span class="token operator">&lt;=</span><span class="token number">30</span><span class="token punctuation">;</span> <span class="token comment" spellcheck="true">-- and 可以换成 &amp;&amp;</span><span class="token keyword">SELECT</span> <span class="token operator">*</span> <span class="token keyword">FROM</span> stu <span class="token keyword">WHERE</span> BEWTEEN <span class="token number">20</span> <span class="token operator">AND</span> <span class="token number">30</span><span class="token punctuation">;</span> <span class="token comment" spellcheck="true">-- 表示年龄在20-30之间并且包含 20 和 30 </span><span class="token comment" spellcheck="true">-- 查询年龄不等于20岁的</span><span class="token keyword">SELECT</span> <span class="token operator">*</span> <span class="token keyword">FROM</span> stu <span class="token keyword">WHERE</span>  age <span class="token operator">&lt;></span> <span class="token number">20</span><span class="token punctuation">;</span>  <span class="token comment" spellcheck="true">-- 或者 != 符号也可以</span><span class="token comment" spellcheck="true">-- 查询年龄为22、19、25的数据</span><span class="token keyword">SELECT</span> <span class="token operator">*</span> <span class="token keyword">FROM</span> stu <span class="token keyword">WHERE</span> age <span class="token operator">=</span> <span class="token number">22</span> <span class="token operator">OR</span> age <span class="token operator">=</span> <span class="token number">19</span> <span class="token operator">OR</span> age <span class="token operator">=</span> <span class="token number">25</span><span class="token punctuation">;</span><span class="token keyword">SELECT</span> <span class="token operator">*</span> <span class="token keyword">FROM</span> stu <span class="token keyword">WHERE</span> age <span class="token operator">IN</span> <span class="token punctuation">(</span><span class="token number">22</span><span class="token punctuation">,</span><span class="token number">19</span><span class="token punctuation">,</span><span class="token number">25</span><span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment" spellcheck="true">-- 上面语句的简化写法</span><span class="token comment" spellcheck="true">-- 查询英语成绩为null的</span><span class="token keyword">SELECT</span> <span class="token operator">*</span> <span class="token keyword">FROM</span> stu <span class="token keyword">WHERE</span> english <span class="token operator">=</span> <span class="token boolean">NULL</span><span class="token punctuation">;</span> <span class="token comment" spellcheck="true">-- 不对的，null值不能使用=或者!=判断</span><span class="token keyword">SELECT</span> <span class="token operator">*</span> <span class="token keyword">FROM</span> stu <span class="token keyword">WHERE</span> english <span class="token operator">IS</span> <span class="token boolean">NULL</span><span class="token punctuation">;</span><span class="token comment" spellcheck="true">-- 查询英语成语不为null的数据</span><span class="token keyword">SELECT</span> <span class="token operator">*</span> <span class="token keyword">FROM</span> stu <span class="token keyword">WHERE</span> english <span class="token operator">IS</span> <span class="token operator">NOT</span> <span class="token boolean">NULL</span><span class="token punctuation">;</span> <span class="token comment" spellcheck="true">-- 同学姓马的有哪些 like</span><span class="token keyword">SELECT</span> <span class="token operator">*</span> <span class="token keyword">FROM</span> stu <span class="token keyword">WHERE</span> name <span class="token operator">LIKE</span> <span class="token string">'马%'</span><span class="token punctuation">;</span><span class="token comment" spellcheck="true">-- 查询第二个字是化的人</span><span class="token keyword">SELECT</span> <span class="token operator">*</span> <span class="token keyword">FROM</span> stu <span class="token keyword">WHERE</span> name <span class="token operator">LIKE</span> <span class="token string">'_马%'</span><span class="token punctuation">;</span><span class="token comment" spellcheck="true">-- 查询姓名是三个字的人</span><span class="token keyword">SELECT</span> <span class="token operator">*</span> <span class="token keyword">FROM</span> stu <span class="token keyword">WHERE</span> name <span class="token operator">LIKE</span> <span class="token string">'___'</span><span class="token punctuation">;</span><span class="token comment" spellcheck="true">-- 查询姓名中包含马的人</span><span class="token keyword">SELECT</span> <span class="token operator">*</span> <span class="token keyword">FROM</span> stu <span class="token keyword">WHERE</span> name <span class="token operator">LIKE</span> <span class="token string">'%马%'</span><span class="token punctuation">;</span></code></pre><blockquote><p>高级查询</p></blockquote><ul><li><p>排序查询</p><ul><li>order by 字句<ul><li>order by 排序字段1 排序方式1,….</li></ul></li><li>排序方式<ul><li>ASC : 升序，默认的</li><li>DESC : 降序</li></ul></li><li>如果有多个排序条件，则当前面的条件值一样时，才会判断后面条件</li></ul></li><li><p>聚合函数: 将一列数据作为一个整体，进行纵向计算</p><ul><li>count : 计算个数<ul><li>一般选择非空的列，主键</li></ul></li><li>max : 计算最大值</li><li>min : 计算最小值</li><li>sum : 计算和</li><li>avg : 计算平均值</li><li>注意: 聚合函数的计算会排除null值<ul><li>解决方案: <ul><li>选择不包含null的列计算</li><li>IFNULL函数</li><li>SELECT COUNT (*) FROM stu;(不推荐)</li></ul></li></ul></li></ul></li><li><p>分组查询</p><ul><li>语法: group by 分组字段;</li><li>注意:<ul><li>分组之后查询的字段: 分组字段、聚合函数</li><li>WHERE和HAVING的区别<ul><li>where在分组之前进行限定，如果不满足条件则不参与分组，having在分组之后进行限定，如果不满足条件则不会被查询出来</li><li>whrer后不可以跟聚合函数判断，having可以</li></ul></li></ul></li></ul></li><li><p>分页查询</p><ul><li>语法: limit 开始索引,每页查询的条数;</li><li>公式: 开始的索引 = (当前的页码 - 1) * 每页显示的条数</li><li>LIMIT分页操作是一个mysql<code>方言</code></li></ul></li></ul><pre class=" language-sql"><code class="language-sql"><span class="token comment" spellcheck="true">-- 升序方式排列 默认升序</span><span class="token keyword">SELECT</span> <span class="token operator">*</span> <span class="token keyword">FROM</span> stu <span class="token keyword">ORDER</span> <span class="token keyword">BY</span> math<span class="token punctuation">;</span><span class="token comment" spellcheck="true">-- 降序</span><span class="token keyword">SELECT</span> <span class="token operator">*</span> <span class="token keyword">FROM</span> stu <span class="token keyword">ORDER</span> <span class="token keyword">BY</span> math <span class="token keyword">DESC</span><span class="token punctuation">;</span><span class="token comment" spellcheck="true">-- 按照数学成绩排序，如果一样，则按照英语成绩排序</span><span class="token keyword">SELECT</span> <span class="token operator">*</span> <span class="token keyword">FROM</span> stu <span class="token keyword">ORDER</span> <span class="token keyword">BY</span> math <span class="token keyword">ASC</span> <span class="token punctuation">,</span> english <span class="token keyword">ASC</span><span class="token punctuation">;</span><span class="token comment" spellcheck="true">-- 查看学生人数,如果是null给其设置为0</span><span class="token keyword">SELECT</span> <span class="token function">COUNT</span><span class="token punctuation">(</span>IFNULL<span class="token punctuation">(</span>name<span class="token punctuation">,</span><span class="token number">0</span><span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token keyword">from</span> stu<span class="token punctuation">;</span><span class="token comment" spellcheck="true">-- 数学最大成绩 MIN 则是最小值</span><span class="token keyword">SELECT</span> <span class="token function">MAX</span><span class="token punctuation">(</span>math<span class="token punctuation">)</span> <span class="token keyword">from</span> stu<span class="token punctuation">;</span> <span class="token comment" spellcheck="true">-- 求和 ， 会排除null值进行计算 AVG则为平均分</span><span class="token keyword">SELECT</span> <span class="token function">SUM</span><span class="token punctuation">(</span>math<span class="token punctuation">)</span> <span class="token keyword">from</span> stu<span class="token punctuation">;</span> <span class="token comment" spellcheck="true">-- 按照性别分组，分别查询男，女同学的平均分和人数</span><span class="token keyword">SELECT</span> sex <span class="token punctuation">,</span> <span class="token function">AVG</span><span class="token punctuation">(</span>math<span class="token punctuation">)</span><span class="token punctuation">,</span><span class="token function">COUNT</span><span class="token punctuation">(</span>id<span class="token punctuation">)</span> <span class="token keyword">from</span> stu <span class="token keyword">GROUP</span> <span class="token keyword">BY</span> sex<span class="token punctuation">;</span> <span class="token comment" spellcheck="true">-- 按照性别分组，分别查询男，女同学的平均分和人数，分数低于70分的人不参与分组</span><span class="token keyword">SELECT</span> sex <span class="token punctuation">,</span> <span class="token function">AVG</span><span class="token punctuation">(</span>math<span class="token punctuation">)</span><span class="token punctuation">,</span><span class="token function">COUNT</span><span class="token punctuation">(</span>id<span class="token punctuation">)</span> <span class="token keyword">from</span> stu <span class="token keyword">WHERE</span> math <span class="token operator">></span> <span class="token number">70</span> <span class="token keyword">GROUP</span> <span class="token keyword">BY</span> sex<span class="token punctuation">;</span> <span class="token comment" spellcheck="true">-- 按照性别分组，分别查询男，女同学的平均分和人数，分数低于70分的人不参与分组,分完组之后人数要大于两个人(对分完组的数据在进行限定)</span><span class="token keyword">SELECT</span> sex <span class="token punctuation">,</span> <span class="token function">AVG</span><span class="token punctuation">(</span>math<span class="token punctuation">)</span><span class="token punctuation">,</span><span class="token function">COUNT</span><span class="token punctuation">(</span>id<span class="token punctuation">)</span> <span class="token keyword">from</span> stu <span class="token keyword">WHERE</span> math <span class="token operator">></span> <span class="token number">70</span> <span class="token keyword">GROUP</span> <span class="token keyword">BY</span> sex <span class="token keyword">HAVING</span> <span class="token function">COUNT</span><span class="token punctuation">(</span>id<span class="token punctuation">)</span> <span class="token operator">></span> <span class="token number">2</span><span class="token punctuation">;</span> <span class="token comment" spellcheck="true">-- 每页显示三条数据</span><span class="token keyword">SELECT</span> <span class="token operator">*</span> <span class="token keyword">FROM</span> stu <span class="token keyword">LIMIT</span> <span class="token number">0</span><span class="token punctuation">,</span><span class="token number">3</span><span class="token punctuation">;</span> <span class="token comment" spellcheck="true">-- 第一页</span><span class="token keyword">SELECT</span> <span class="token operator">*</span> <span class="token keyword">FROM</span> stu <span class="token keyword">LIMIT</span> <span class="token number">3</span><span class="token punctuation">,</span><span class="token number">3</span><span class="token punctuation">;</span> <span class="token comment" spellcheck="true">-- 第二页</span><span class="token comment" spellcheck="true">-- 公式: 开始的索引 = (当前的页码 - 1) * 每页显示的条数</span></code></pre><h3 id="约束"><a href="#约束" class="headerlink" title="约束"></a>约束</h3><blockquote><p>对表中的数据进行限定，保证数据的正确性、有效性和完整性</p><ul><li>分类<ul><li>非空约束 : not null（值不能为null）</li><li>唯一约束 : unique (唯一的值)</li><li>主键约束 :  primary key  <ul><li>含义 : 非空且唯一</li><li>一张表只能有一个字段为主键</li><li>主键是表中的唯一标识</li><li>自动增长: 如果某一列是数值类型的，使用auto_increment 可以来完成值得自动增长，一般配合int类型主键一起使用</li><li>自动增长只跟上一条数据的值相关，是上条数据+1</li></ul></li><li>外键约束 : foreign key -&gt; 让表和表之间产生关系，保证数据的正确性<ul><li>在创建表时，可以添加外键</li><li>语法:  constraint 外键名称 foreign key 外键列名称 references 主表名称(主表列名称)</li><li>级联更新 : ON UPDATE CASCADE</li><li>级联删除 : ON DELETE CASCADE</li></ul></li></ul></li></ul></blockquote><pre class=" language-sql"><code class="language-sql"><span class="token comment" spellcheck="true">-- 创建表时添加约束</span><span class="token keyword">create</span> <span class="token keyword">table</span> stu<span class="token punctuation">(</span>    id <span class="token keyword">int</span> <span class="token keyword">primary</span> <span class="token keyword">key</span> <span class="token keyword">auto_increment</span><span class="token punctuation">,</span> <span class="token comment" spellcheck="true">-- 主键约束 并实现自动增长</span>    name <span class="token keyword">varchar</span><span class="token punctuation">(</span><span class="token number">20</span><span class="token punctuation">)</span> <span class="token operator">NOT</span> <span class="token boolean">NULL</span><span class="token punctuation">,</span><span class="token comment" spellcheck="true">-- 非空约束</span>    phone_number <span class="token keyword">varchar</span><span class="token punctuation">(</span><span class="token number">20</span><span class="token punctuation">)</span> <span class="token keyword">UNIQUE</span><span class="token punctuation">,</span> <span class="token comment" spellcheck="true">-- 唯一约束</span>    dep_id <span class="token keyword">INT</span><span class="token punctuation">,</span><span class="token comment" spellcheck="true">-- 外键对应主表的主键</span>    <span class="token keyword">CONSTRAINT</span> emp_dept_fk <span class="token keyword">FOREIGN</span> <span class="token keyword">KEY</span> <span class="token punctuation">(</span>dep_id<span class="token punctuation">)</span> <span class="token keyword">REFERENCES</span> department<span class="token punctuation">(</span>id<span class="token punctuation">)</span> <span class="token comment" spellcheck="true">-- 添加外键关系</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token comment" spellcheck="true">-- 创建完后修改非空约束</span><span class="token keyword">ALTER</span> <span class="token keyword">TABLE</span> stu <span class="token keyword">MODIFY</span> name <span class="token keyword">varchar</span><span class="token punctuation">(</span><span class="token number">20</span><span class="token punctuation">)</span> <span class="token operator">not</span> <span class="token boolean">null</span><span class="token punctuation">;</span><span class="token comment" spellcheck="true">-- 删除唯一约束</span><span class="token keyword">ALTER</span> <span class="token keyword">TABLE</span> stu <span class="token keyword">DROP</span> <span class="token keyword">INDEX</span> phone_number <span class="token punctuation">;</span> <span class="token comment" spellcheck="true">-- 创建表后添加唯一约束</span><span class="token keyword">ALTER</span> <span class="token keyword">TABLE</span> stu <span class="token keyword">MODIFY</span> phone_number <span class="token keyword">VARCHAR</span><span class="token punctuation">(</span><span class="token number">20</span><span class="token punctuation">)</span> <span class="token keyword">UNIQUE</span><span class="token punctuation">;</span> <span class="token comment" spellcheck="true">-- 删除主键</span><span class="token keyword">ALTER</span> <span class="token keyword">TABLE</span> stu <span class="token keyword">DROP</span> <span class="token keyword">PRIMARY</span> <span class="token keyword">KEY</span><span class="token punctuation">;</span> <span class="token comment" spellcheck="true">-- 创建完表后添加主键</span><span class="token keyword">ALTER</span> <span class="token keyword">TABLE</span> stu <span class="token keyword">MODIFY</span> id <span class="token keyword">INT</span> <span class="token keyword">PRIMARY</span> <span class="token keyword">KEY</span><span class="token punctuation">;</span><span class="token comment" spellcheck="true">-- 自动增长</span><span class="token keyword">ALTER</span> <span class="token keyword">TABLE</span> stu <span class="token keyword">MODIFY</span> id <span class="token keyword">INT</span> AUTO_INCRENMENT<span class="token punctuation">;</span><span class="token comment" spellcheck="true">-- 删除自动增长</span><span class="token keyword">ALTER</span> <span class="token keyword">TABLE</span> stu <span class="token keyword">MODIFY</span> id <span class="token keyword">INT</span><span class="token punctuation">;</span><span class="token comment" spellcheck="true">-- 删除外键</span><span class="token keyword">ALTER</span> <span class="token keyword">TABLE</span> employee <span class="token keyword">DROP</span> <span class="token keyword">FOREIGN</span> <span class="token keyword">KEY</span> emp_dept_fk<span class="token punctuation">;</span><span class="token comment" spellcheck="true">-- 创建完表后添加外键  并设置级联更新和级联删除</span><span class="token keyword">ALTER</span> <span class="token keyword">TABLE</span> employee <span class="token keyword">ADD</span> <span class="token keyword">CONSTRAINT</span> emp_dept_fk <span class="token keyword">FOREIGN</span> <span class="token keyword">KEY</span> <span class="token punctuation">(</span>dep_id<span class="token punctuation">)</span> <span class="token keyword">REFERENCES</span> department<span class="token punctuation">(</span>id<span class="token punctuation">)</span> <span class="token keyword">ON</span> <span class="token keyword">UPDATE</span> <span class="token keyword">CASCADE</span> <span class="token keyword">ON</span> <span class="token keyword">DELETE</span> <span class="token keyword">CASCADE</span><span class="token punctuation">;</span></code></pre><blockquote><p>多表之间的关系</p><ul><li>一对一<ul><li>如: 人和身份证</li><li>一个人只能对应一个身份证，一个身份证只能对应一个人</li></ul></li><li>一对多(多对一)<ul><li>如: 部门和员工</li><li>分析: 一个部门有多个员工，一个员工只能对应一个部门</li></ul></li><li>多对多 : <ul><li>如 : 学生和课程</li><li>分析 : 一个学生可以对应多门课程，一个课程也可以对应多个学生</li></ul></li></ul></blockquote><blockquote><ul><li>实现关系<ul><li>一对多（多对一）: <ul><li>实现方式 : 在多的一方建立外键，指向一的一方的主键</li></ul></li><li>多对多 : <ul><li>实现方式 : 需要借助第三张表，中间表至少包含两个字段，这两个字段作为第三张表的外键，分别指向两张表的主键</li></ul></li><li>一对一 : <ul><li>实现方式 : 可以在任意一方添加唯一外键来指向另一方的主键，</li></ul></li></ul></li></ul></blockquote><h3 id="范式-：用来判断数据库设计的是否合理的一些规范"><a href="#范式-：用来判断数据库设计的是否合理的一些规范" class="headerlink" title="范式 ：用来判断数据库设计的是否合理的一些规范"></a>范式 ：用来判断数据库设计的是否合理的一些规范</h3><blockquote><ul><li>概念: 设计数据库时需要遵循的一些规范，呈递次规范，越高级别的范式数据库冗余越小</li><li>第一范式 : 每一列都是不可分割的原子列</li><li>第二范式 : 1的基础上，消除非主属性对对主码的部分函数依赖<ul><li>函数依赖: A–&gt;B , 如果通过A属性(属性组)的值，可以确定唯一B的属性值，则称B依赖于A<ul><li>例如: 学号 –&gt; 学生姓名  (学号和课程名称可以确定出来一个分数，称之为属性组)</li></ul></li><li>完全函数依赖 :  A–&gt;B, 如果A是一个属性组，则B属性值得确定需要依赖于A属性组中所有的属性值</li><li>部分函数依赖 : A–&gt;B ，如果A是一个属性组，则B属性值得确定只需要依赖于A属性组中某一些值就可以确定<ul><li>例如 : 学号和课程名称 –&gt; 学生姓名</li></ul></li><li>传递函数依赖 : A –&gt; B , B –&gt; C , 如果同过A属性的值，可以确定B属性的值，而B属性的值可以确定C属性的值，那么称C传递依赖于A<ul><li>例如 : 学号 –&gt; 系名  , 系名 –&gt; 系主任</li></ul></li><li>码 : 如果一个属性(属性组)，被其他所有属性完全依赖，则称这个属性(属性组)为该表的码<ul><li>例如: 该表中的码为属性组 : (学号，课程名称)</li><li>主属性: 码属性组中的所有属性</li><li>非主属性: 除码属性组的属性称为非主属性</li></ul></li></ul></li><li>第三范式 : 在2的基础上，消除传递依赖</li></ul></blockquote><h3 id="数据库的备份和还原"><a href="#数据库的备份和还原" class="headerlink" title="数据库的备份和还原"></a>数据库的备份和还原</h3><blockquote><ul><li>命令行方式<ul><li>语法: <ul><li>备份 : mysqldump -u用户名 -p密码  要备份的数据库名称 &gt; 保存的路径</li><li>还原: <ul><li>1.登录数据库</li><li>2.创建数据库</li><li>3.使用数据库</li><li>4.执行文件 : source 执行文件</li></ul></li></ul></li></ul></li><li>图形化工具方式<ul><li>备份/导出</li><li>执行SQL脚本文件</li></ul></li></ul></blockquote><h3 id="多表查询"><a href="#多表查询" class="headerlink" title="多表查询"></a>多表查询</h3><blockquote><p>语法: SELECT 列名列表 FROM 表列表 … ; </p><ul><li>笛卡尔积 : 多个集合组合的所有可能</li><li>要完成多表查询需要消除笛卡尔积中无用的数据</li></ul></blockquote><p>多表查询的分类</p><ul><li>1.内连接查询:<ul><li>隐式内连接:</li><li>显式内连接:<ul><li>语法: SELECT 字段列表 FROM  表1 [INNER]  JOIN  表2 ON 条件;</li></ul></li><li>使用内连接的前提需要知道:<ul><li>从哪些表中查询数据</li><li>查询条件是什么</li><li>查询哪些字段</li></ul></li></ul></li></ul><pre class=" language-sql"><code class="language-sql"><span class="token comment" spellcheck="true">-- 隐式内连接</span><span class="token comment" spellcheck="true">-- 查询所有员工的信息和对应的部门信息</span><span class="token keyword">SELECT</span> <span class="token operator">*</span> <span class="token keyword">FROM</span> emp <span class="token punctuation">,</span> dept <span class="token keyword">WHERE</span> emp<span class="token punctuation">.</span>dept_id <span class="token operator">=</span> dept<span class="token punctuation">.</span>id<span class="token punctuation">;</span><span class="token comment" spellcheck="true">-- 查询员工表名称、性别、部门名称</span><span class="token keyword">SELECT</span> emp<span class="token punctuation">.</span>name <span class="token punctuation">,</span> emp<span class="token punctuation">.</span>gender<span class="token punctuation">,</span> dept<span class="token punctuation">.</span>name  <span class="token keyword">FROM</span> emp <span class="token punctuation">,</span> dept <span class="token keyword">WHERE</span> emp<span class="token punctuation">.</span>dept_id <span class="token operator">=</span> dept<span class="token punctuation">.</span>id<span class="token punctuation">;</span><span class="token comment" spellcheck="true">-- 显示内连接</span><span class="token keyword">SELECT</span> <span class="token operator">*</span> <span class="token keyword">FROM</span> emp <span class="token keyword">INNER</span> <span class="token keyword">JOIN</span>  dept <span class="token keyword">ON</span> emp<span class="token punctuation">.</span>dept_id <span class="token operator">=</span> dept<span class="token punctuation">.</span>id<span class="token punctuation">;</span><span class="token keyword">SELECT</span> <span class="token operator">*</span> <span class="token keyword">FROM</span> emp <span class="token keyword">JOIN</span>  dept <span class="token keyword">ON</span> emp<span class="token punctuation">.</span>dept_id <span class="token operator">=</span> dept<span class="token punctuation">.</span>id<span class="token punctuation">;</span> <span class="token comment" spellcheck="true">-- inner可不写</span></code></pre><ul><li>2.外连接查询:<ul><li>左外连接<ul><li>语法: select 字段列表 from 表1 left [outer] join 表2 on 条件;</li><li>查询的是左表所有数据以及交集部分</li></ul></li><li>右外连接<ul><li>语法: select 字段列表 from 表1 right [outer] join 表2 on 条件;</li><li>查询的是右表所有数据以及交集部分(满足where)</li></ul></li></ul></li></ul><pre class=" language-sql"><code class="language-sql"><span class="token comment" spellcheck="true">-- 查询所有员工信息，部门有则查，无则不显示</span><span class="token keyword">SELECT</span> t1<span class="token punctuation">.</span><span class="token operator">*</span><span class="token punctuation">,</span>t2<span class="token punctuation">.</span>name <span class="token keyword">FROM</span> emp t1 <span class="token keyword">LEFT</span> <span class="token keyword">JOIN</span> dept t2 <span class="token keyword">ON</span> t1<span class="token punctuation">.</span>dept_id <span class="token operator">=</span> t2<span class="token punctuation">.</span>id<span class="token punctuation">;</span></code></pre><ul><li>3.子查询: 查询中嵌套查询，称嵌套的这个查询为子查询<ul><li>子查询的不同情况<ul><li>1.子查询的结果是单行单列的<ul><li>子查询可以作为条件，使用运算符去判断</li></ul></li><li>2.子查询的结果是多行单列的<ul><li>可以使用运算符IN判断</li></ul></li><li>3.子查询的结果是多行多列的<ul><li>子查询可以作为一个虚拟表参与查询</li></ul></li></ul></li></ul></li></ul><pre class=" language-sql"><code class="language-sql"><span class="token comment" spellcheck="true">-- 查询工资最高的员工  1.查询最高工资 2.查询员工信息，并且工资等于9000的</span><span class="token keyword">SELECT</span> <span class="token operator">*</span> <span class="token keyword">FROM</span> emp <span class="token keyword">WHERE</span> emp<span class="token punctuation">.</span><span class="token string">'salary'</span> <span class="token operator">=</span> <span class="token punctuation">(</span><span class="token keyword">SELECT</span> <span class="token function">MAX</span><span class="token punctuation">(</span>salary<span class="token punctuation">)</span> <span class="token keyword">FROM</span> emp<span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment" spellcheck="true">-- 查询员工工资小于平均工资的</span><span class="token keyword">SELECT</span> <span class="token operator">*</span> <span class="token keyword">FROM</span> emp <span class="token keyword">WHERE</span> emp<span class="token punctuation">.</span><span class="token string">'salary'</span><span class="token operator">&lt;</span> <span class="token punctuation">(</span><span class="token keyword">SELECT</span> <span class="token function">AVG</span><span class="token punctuation">(</span>salary<span class="token punctuation">)</span> <span class="token keyword">FROM</span> emp<span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment" spellcheck="true">-- 查询财务部和市场部所有的员工信息</span>SELETE <span class="token operator">*</span> <span class="token keyword">FROM</span> dept <span class="token keyword">WHERE</span> name <span class="token operator">=</span> <span class="token string">"财务部"</span> <span class="token operator">or</span> name <span class="token operator">=</span> <span class="token string">"市场部"</span><span class="token punctuation">;</span><span class="token keyword">SELECT</span> <span class="token operator">*</span> <span class="token keyword">FROM</span> emp <span class="token keyword">WHERE</span> dept_id <span class="token operator">=</span> <span class="token number">3</span> <span class="token operator">OR</span> dept_id <span class="token operator">=</span> <span class="token number">2</span> <span class="token punctuation">;</span> <span class="token comment" spellcheck="true">-- 子查询</span><span class="token keyword">SELECT</span> <span class="token operator">*</span> <span class="token keyword">FROM</span> emp <span class="token keyword">WHERE</span> dept_id <span class="token operator">IN</span> <span class="token punctuation">(</span>SELETE <span class="token operator">*</span> <span class="token keyword">FROM</span> dept <span class="token keyword">WHERE</span> name <span class="token operator">=</span> <span class="token string">"财务部"</span> <span class="token operator">or</span> name <span class="token operator">=</span> <span class="token string">"市场部"</span><span class="token punctuation">)</span> <span class="token punctuation">;</span> <span class="token comment" spellcheck="true">-- 查询员工的入职日期是2011年11月11号之后的员工信息和部门信息</span><span class="token comment" spellcheck="true">-- 子查询</span><span class="token keyword">SELECT</span> <span class="token operator">*</span> <span class="token keyword">FROM</span> dept t1 <span class="token punctuation">,</span> <span class="token punctuation">(</span><span class="token keyword">SELECT</span> <span class="token operator">*</span> <span class="token keyword">FROM</span> emp <span class="token keyword">WHERE</span> emp<span class="token punctuation">.</span><span class="token string">'join_date'</span> <span class="token operator">></span> <span class="token string">'2011-11-11'</span><span class="token punctuation">)</span> t2 <span class="token keyword">WHERE</span> t1<span class="token punctuation">.</span>id <span class="token operator">=</span> t2<span class="token punctuation">.</span>dept_id <span class="token punctuation">;</span> </code></pre><h3 id="事务"><a href="#事务" class="headerlink" title="事务"></a>事务</h3><blockquote><p>事务基本介绍</p></blockquote><ul><li><p>概念 </p><ul><li>如果一个包含多个步骤的业务操作，被事务管理，要么同时成功，要么同时失败。</li></ul></li><li><p>操作</p><ul><li>1.开启事务 start transaction</li><li>2.回滚 rollbackß</li><li>3.提交 commit</li></ul></li><li><p>mysql数据库中事务默认自动提交</p><ul><li>一条DML(增删改)会自动提交一条事务</li><li>事务提交的两种方式:<ul><li>自动提交<ul><li>mysql就是自动提交事务的，一条DML语句会自动提交一条事务</li></ul></li><li>手动提交<ul><li>Oracle 数据库默认是手动提交事务的</li><li>需要开启事务，在提交</li><li>可以修改自动提交的方式(见下方代码)</li></ul></li></ul></li></ul></li></ul><pre class=" language-sql"><code class="language-sql"><span class="token comment" spellcheck="true">-- 开启事务</span><span class="token keyword">start</span> <span class="token keyword">transaction</span><span class="token punctuation">;</span><span class="token comment" spellcheck="true">-- 多个操作的代码.......</span><span class="token comment" spellcheck="true">-- 如果发现出现问题，回滚事务</span><span class="token keyword">rollback</span><span class="token punctuation">;</span><span class="token comment" spellcheck="true">-- 发现结果没有问题，提交事务</span><span class="token keyword">commit</span><span class="token punctuation">;</span><span class="token comment" spellcheck="true">-- 查看提交方式</span><span class="token keyword">SELECT</span> @<span class="token variable">@autocommit</span><span class="token punctuation">;</span> <span class="token comment" spellcheck="true">-- 1代表自动提交，0代表手动提交</span><span class="token comment" spellcheck="true">-- 修改提交方式</span><span class="token keyword">SET</span>  @<span class="token variable">@autocommit</span> <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span></code></pre><blockquote><p>事务的四大特征(面试)</p></blockquote><ul><li>1、原子性 : 是不可分割的最小操作单位，要么同时成功，要么同时失败</li><li>2、持久性 : 当事务提交或者回滚后，数据库会持久化的保存数据</li><li>3、隔离性 : 多个事务之间。相互独立。</li><li>4、一致性 : 事务操作前后数据总量不变</li></ul><blockquote><p>事务的隔离级别(了解)</p></blockquote><ul><li>概念 : 多个事务之间是隔离的，相互独立。但是如果多个事务操作同一批数据则会引发一些问题，设置不同的隔离级别就可以解决这些问题。</li><li>存在的问题 : <ul><li>1、脏读: 一个事务读取到另一个事务中没有提交的数据</li><li>2、不可重复读(虚度): 在同一个事务中，两次读取到的数据不一样</li><li>3、幻读: 一个事务操作(DML操作)数据表中所有的记录，另一个事务添加了一条数据，则第一个事务查询不到自己的修改</li></ul></li><li>隔离级别<ul><li>1、read uncommitted : 读未提交<ul><li>产生的问题 : 脏读，不可重复读，幻读</li></ul></li><li>2、read committed ：读已提交 (Oracle 默认)<ul><li>产生的问题 : 不可重复读，幻读</li></ul></li><li>3、repeatable read : 可重复读 (MySql 默认)<ul><li>产生的问题 : 幻读</li></ul></li><li>4、serializable : 串行化 , 会把表锁住，等其他事物提交才会解锁<ul><li>不会产生所有的问题</li></ul></li></ul></li><li>隔离级别从小到大安全性越来越高，但是效率越来越低<br>```sql</li><li><ul><li>数据库查询隔离级别<br>select @@tx_isolation </li></ul></li><li><ul><li>设置数据库隔离界别<br>set global transaction isolation level 级别字符串;<pre><code></code></pre></li></ul></li></ul><h3 id="DCL-：-管理用户，授权"><a href="#DCL-：-管理用户，授权" class="headerlink" title="DCL ： 管理用户，授权"></a>DCL ： 管理用户，授权</h3><ul><li>1、管理用户<ul><li>添加用户</li><li>删除用户</li><li>修改用户密码<ul><li>如果忘记了mysql的root账户密码<ul><li>1、cmd –&gt; net stop mysql  停止mysql服务<ul><li>需要管理员身份</li></ul></li><li>2、使用无验证方式启动mysql服务 : mysqld –skip-grant-tables</li><li>3、打开新的cmd执行修改密码的操作(见下方代码)</li><li>4、结束掉mysqlId的进程</li><li>5 、启动mysql -&gt; net start mysql ,使用新的密码登录即可</li></ul></li></ul></li><li>查询用户<ul><li>% 是通配符，意思是可以在任何主机上登录数据库</li></ul></li></ul></li></ul><pre class=" language-sql"><code class="language-sql"><span class="token comment" spellcheck="true">-- 查询用户</span><span class="token comment" spellcheck="true">-- 切换到mysql数据库</span><span class="token keyword">use</span> mysql<span class="token punctuation">;</span><span class="token comment" spellcheck="true">-- 查询user表</span><span class="token keyword">select</span> <span class="token operator">*</span> <span class="token keyword">from</span> <span class="token keyword">user</span><span class="token punctuation">;</span><span class="token comment" spellcheck="true">-- 创建用户 主机名为%通配符意思是在任意主机可以登录</span><span class="token keyword">create</span> <span class="token keyword">user</span> <span class="token string">'用户名'</span>@'主机名<span class="token string">' identified by '</span>密码'<span class="token punctuation">;</span><span class="token comment" spellcheck="true">-- 删除用户</span><span class="token keyword">drop</span> <span class="token keyword">user</span> <span class="token string">'用户名'</span><span class="token variable">@'主机名'</span><span class="token punctuation">;</span><span class="token comment" spellcheck="true">-- 修改用户密码 password 函数给密码加密</span><span class="token keyword">update</span> <span class="token keyword">user</span> <span class="token keyword">set</span> password <span class="token operator">=</span> password<span class="token punctuation">(</span><span class="token string">'新密码'</span><span class="token punctuation">)</span> <span class="token keyword">where</span> <span class="token keyword">user</span><span class="token operator">=</span><span class="token string">'用户名'</span><span class="token punctuation">;</span><span class="token keyword">set</span> password <span class="token keyword">for</span> <span class="token string">'用户名'</span>@'主机名<span class="token string">' = password('</span>新密码'<span class="token punctuation">)</span><span class="token punctuation">;</span></code></pre><ul><li>2、权限管理 : <ul><li>1、查询权限<ul><li>usage : 可登录</li></ul></li><li>2、授予权限</li><li>3、撤销权限</li></ul></li></ul><pre class=" language-sql"><code class="language-sql"><span class="token comment" spellcheck="true">-- 查询权限</span><span class="token keyword">show</span> grants <span class="token keyword">for</span> <span class="token string">'用户名'</span><span class="token variable">@'主机名'</span><span class="token punctuation">;</span><span class="token comment" spellcheck="true">-- 授予权限</span><span class="token keyword">grant</span> 权限列表 <span class="token keyword">on</span> 数据库名<span class="token punctuation">.</span>表名 <span class="token keyword">to</span> <span class="token string">'用户名'</span>@'主机名<span class="token string">';grant select delete update on db1.account to '</span>lisi<span class="token string">'@'</span><span class="token operator">%</span>'<span class="token punctuation">;</span><span class="token comment" spellcheck="true">-- 授予所有权限在任意数据库任意表中,使用通配符完成</span><span class="token keyword">grant</span> <span class="token keyword">all</span> <span class="token keyword">on</span> <span class="token operator">*</span><span class="token punctuation">.</span><span class="token operator">*</span> <span class="token keyword">to</span> <span class="token string">'张三'</span><span class="token variable">@'localhost'</span><span class="token punctuation">;</span><span class="token comment" spellcheck="true">-- 撤销权限</span><span class="token keyword">revoke</span> 权限列表 <span class="token keyword">on</span> 数据库名<span class="token punctuation">.</span>表名 <span class="token keyword">from</span> <span class="token string">'用户名'</span><span class="token variable">@'主机名'</span></code></pre>]]></content>
      
      
      <categories>
          
          <category> sql </category>
          
      </categories>
      
      
        <tags>
            
            <tag> sql </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>vscode常用快捷键总结</title>
      <link href="/2018/06/01/quickKey/"/>
      <url>/2018/06/01/quickKey/</url>
      
        <content type="html"><![CDATA[<h3 id="编辑"><a href="#编辑" class="headerlink" title="编辑"></a>编辑</h3><ul><li>Ctrl + X : 剪切选中的内容，如果没有选中内容，剪切光标所在整行内容</li><li>Ctrl + C : 复制选中的内容，如果没有选中内容，复制光标所在整行内容</li><li>Alt + 下/上 : 移动行</li><li>shift + Alt + 上/下 : 复制行</li><li>Ctrl+Shift+K : 删除行</li><li>Ctrl + / : 行注释</li><li>Ctrl + W + F4 : 关闭当前tab</li><li>Ctrl + 1/2/3… : 跳到指定tab</li><li>Ctrl+Shift+T : 重新打开上一次关闭的tab</li></ul><h3 id="查询"><a href="#查询" class="headerlink" title="查询"></a>查询</h3><ul><li>Ctrl + F : 搜索</li><li>Ctrl + H : 替换</li><li>Ctrl + P : 搜索文件</li><li>Ctrl + G :  跳转行</li><li>Ctrl + Shift + F : 全局搜索</li><li>Ctrl + Shift + Tab : 切换tab页</li><li>Ctrl + Shift + M : 显示终端、错误等程序面板</li><li>Alt + 左/右 : 左右切换tab页</li><li>Alt + Enter : 选中所有匹配搜索的</li></ul><h3 id="文件"><a href="#文件" class="headerlink" title="文件"></a>文件</h3><ul><li>Ctrl + N : 新建文件</li><li>Ctrl + O : 打开文件</li><li>Ctrl + S : 保存</li><li>Ctrl+Shift+S : 另存为</li><li>Ctrl+K -&gt; S : 保存所有 </li><li>Ctrl + K -&gt; P : 复制文件路径</li><li>Ctrl + K -&gt; R : 在资源管理器中打开文件</li><li>Ctrl + K -&gt; O : 在新窗口打开文件</li></ul><h3 id="显示"><a href="#显示" class="headerlink" title="显示"></a>显示</h3><ul><li>F11 : 全屏</li><li>Ctrl+ =/- : 放大或缩小</li><li>Ctrl+B : 开关侧边栏</li><li>Ctrl+Shift+E : 焦点放到Explorer</li><li>Ctrl+Shift+F : 焦点放到搜索,改成ctrl+alt+f</li><li>Ctrl+Shift+G : 焦点放Git</li><li>Ctrl+Shift+D : 焦点放到Debug</li><li>Ctrl+Shift+X : 焦点放到扩展</li></ul>]]></content>
      
      
      <categories>
          
          <category> vscode </category>
          
      </categories>
      
      
        <tags>
            
            <tag> vscode </tag>
            
            <tag> 快捷键 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>Event Loop</title>
      <link href="/2018/05/11/eventloop/"/>
      <url>/2018/05/11/eventloop/</url>
      
        <content type="html"><![CDATA[<h3 id="进程、线程、CPU"><a href="#进程、线程、CPU" class="headerlink" title="进程、线程、CPU"></a>进程、线程、CPU</h3><blockquote><ul><li>cpu是计算机的核心，承担计算机所有的计算任务。</li><li>进程代表cpu能处理的单个任务，进程之间相互独立。</li><li>一个进程可以包括多个线程，多个线程共享进程资源。</li></ul></blockquote><h3 id="进程、线程、CPU之间的关系"><a href="#进程、线程、CPU之间的关系" class="headerlink" title="进程、线程、CPU之间的关系"></a>进程、线程、CPU之间的关系</h3><blockquote><ul><li>CPU相当于一个工厂，进程就是工厂里面的不同车间，线程就相当于每个车间里面的工人。</li><li>单线程和多线程，就是指的一个进程内的单和多。</li><li>比如浏览器是多进程的，每一个tab页就是一个独立的子进程。</li></ul></blockquote><h3 id="浏览器渲染进程"><a href="#浏览器渲染进程" class="headerlink" title="浏览器渲染进程"></a>浏览器渲染进程</h3><p>浏览器有很多进程，比如主进程，插件进程，GPU进程等，而跟前端关系最大的就是渲染进程(浏览器内核)。</p><blockquote><p>渲染进程是多线程的</p></blockquote><ul><li>GUI渲染进程:负责渲染页面，布局和绘制。</li><li>js引擎线程:负责处理和解析js脚本程序。</li><li>事件触发线程:用来控制事件(鼠标点击，计时器等)。</li><li>定时器出发进程:用来定时器计时用的。</li><li>http请求线程:单独处理ajax请求的线程。</li></ul><blockquote><p>GUI渲染线程和js引擎线程是互斥的，防止渲染结果不可预期。</p></blockquote><h3 id="JS是单线程的"><a href="#JS是单线程的" class="headerlink" title="JS是单线程的"></a>JS是单线程的</h3><blockquote><ul><li>JS是单线程的，JS是通过事件队列(Event Loop)的方式来实现异步回调的。</li></ul></blockquote><h3 id="event-loop-事件队列"><a href="#event-loop-事件队列" class="headerlink" title="event loop(事件队列)"></a>event loop(事件队列)</h3><blockquote><p>因为js单线程，所以没有真正意义的异步，js的异步是通过事件队列来实现的。</p></blockquote><ul><li>事件触发线程管理一个任务队列，异步任务触发条件达成，将回调事件放到任务队列中</li><li>执行栈中所有同步任务执行完毕，此时JS引擎线程空闲，系统会读取任务队列，将可运行的异步任务回调事件添加到执行栈中，开始执行<pre class=" language-javascript"><code class="language-javascript"><span class="token keyword">let</span> timerCallback <span class="token operator">=</span> <span class="token keyword">function</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span><span class="token string">'wait one second'</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token punctuation">}</span><span class="token punctuation">;</span><span class="token keyword">let</span> httpCallback <span class="token operator">=</span> <span class="token keyword">function</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span><span class="token string">'get server data success'</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token punctuation">}</span></code></pre></li></ul><p>// 同步任务<br>console.log(‘hello’);<br>// 同步任务<br>// 通知定时器线程 1s 后将 timerCallback 交由事件触发线程处理<br>// 1s 后事件触发线程将 timerCallback 加入到事件队列中<br>setTimeout(timerCallback,1000);<br>// 同步任务<br>// 通知异步http请求线程发送网络请求，请求成功后将 httpCallback 交由事件触发线程处理<br>// 请求成功后事件触发线程将 httpCallback 加入到事件队列中<br>$.get(‘<a href="http://www.xxxx.com&#39;,httpCallback" target="_blank" rel="noopener">www.xxxx.com&#39;,httpCallback</a>);<br>// 同步任务<br>console.log(‘world’);<br>//…<br>// 所有同步任务执行完后<br>// 询问事件触发线程在事件事件队列中是否有需要执行的回调函数<br>// 如果没有，一直询问，直到有为止<br>// 如果有，将回调事件加入执行栈中，开始执行回调代码</p><pre><code>- JS引擎线程只执行执行栈中的事件- 执行栈中的代码执行完毕，就会读取事件队列中的事件- 事件队列中的回调事件，是由各自线程插入到事件队列中的- 如此循环### 宏任务、微任务&gt; - 我们可以将每次执行栈执行的代码当做是一个宏任务（包括每次从事件队列中获取一个事件回调并放到执行栈中执行）， 每一个宏任务会从头到尾执行完毕，不会执行其他。&gt; - JS引擎线程和GUI渲染线程是互斥的关系，浏览器为了能够使宏任务和DOM任务有序的进行，会在一个宏任务执行结果后，在下一个宏任务执行前，GUI渲染线程开始工作，对页面进行渲染。```javascript// 宏任务--&gt;渲染--&gt;宏任务--&gt;渲染--&gt;渲染．．．</code></pre><blockquote><ul><li>宏任务结束后，会执行渲染，然后执行下一个宏任务， 而微任务可以理解成在当前宏任务执行后立即执行的任务。</li><li>当宏任务执行完，会在渲染前，将执行期间所产生的所有微任务都执行完。<br>例:<pre class=" language-javascript"><code class="language-javascript">document<span class="token punctuation">.</span>body<span class="token punctuation">.</span>style <span class="token operator">=</span> <span class="token string">'background:blue'</span>console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span><span class="token number">1</span><span class="token punctuation">)</span><span class="token punctuation">;</span>Promise<span class="token punctuation">.</span><span class="token function">resolve</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">then</span><span class="token punctuation">(</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token operator">=</span><span class="token operator">></span><span class="token punctuation">{</span>  console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span><span class="token number">2</span><span class="token punctuation">)</span><span class="token punctuation">;</span>  document<span class="token punctuation">.</span>body<span class="token punctuation">.</span>style <span class="token operator">=</span> <span class="token string">'background:black'</span><span class="token punctuation">}</span><span class="token punctuation">)</span><span class="token punctuation">;</span>console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span><span class="token number">3</span><span class="token punctuation">)</span><span class="token punctuation">;</span></code></pre></li></ul></blockquote><h3 id="总结"><a href="#总结" class="headerlink" title="总结"></a>总结</h3><ul><li>执行一个宏任务（栈中没有就从事件队列中获取）</li><li>执行过程中如果遇到微任务，就将它添加到微任务的任务队列中</li><li>宏任务执行完毕后，立即执行当前微任务队列中的所有微任务（依次执行）</li><li>当前宏任务执行完毕，开始检查渲染，然后GUI线程接管渲染</li><li>渲染完毕后，JS线程继续接管，开始下一个宏任务（从事件队列中获取）</li></ul><p><img src="image.jpg" alt></p>]]></content>
      
      
      <categories>
          
          <category> 前端 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 事件循环 </tag>
            
            <tag> event loop </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>001 - 两数之和</title>
      <link href="/2018/05/01/twoSum/"/>
      <url>/2018/05/01/twoSum/</url>
      
        <content type="html"><![CDATA[<h3 id="题目内容"><a href="#题目内容" class="headerlink" title="题目内容"></a>题目内容</h3><p>给定一个整数数组 nums 和一个目标值 target，请你在该数组中找出和为目标值的那 两个 整数，并返回他们的数组下标。<br>你可以假设每种输入只会对应一个答案。但是，你不能重复利用这个数组中同样的元素。<br>示例:</p><p>给定 nums = [2, 7, 11, 15], target = 9<br>因为 nums[0] + nums[1] = 2 + 7 = 9<br>所以返回 [0, 1]</p><h3 id="解题-1-双for循环"><a href="#解题-1-双for循环" class="headerlink" title="解题 1 - 双for循环"></a>解题 1 - 双for循环</h3><pre class=" language-javascript"><code class="language-javascript"><span class="token keyword">let</span> twoSum <span class="token operator">=</span> <span class="token punctuation">(</span>nums <span class="token punctuation">,</span> target<span class="token punctuation">)</span> <span class="token operator">=</span><span class="token operator">></span> <span class="token punctuation">{</span>    <span class="token keyword">for</span> <span class="token punctuation">(</span><span class="token keyword">let</span> i <span class="token operator">=</span> <span class="token number">0</span> <span class="token punctuation">;</span> i <span class="token operator">&lt;</span> nums<span class="token punctuation">.</span>length<span class="token punctuation">;</span> i<span class="token operator">++</span><span class="token punctuation">)</span><span class="token punctuation">{</span>        <span class="token keyword">for</span><span class="token punctuation">(</span><span class="token keyword">let</span> j <span class="token operator">=</span> i <span class="token operator">+</span> <span class="token number">1</span> <span class="token punctuation">;</span> j <span class="token operator">&lt;</span>nums<span class="token punctuation">.</span>length <span class="token punctuation">;</span> j <span class="token operator">++</span><span class="token punctuation">)</span><span class="token punctuation">{</span>            <span class="token keyword">if</span><span class="token punctuation">(</span>nums<span class="token punctuation">[</span>i<span class="token punctuation">]</span> <span class="token operator">+</span> nums<span class="token punctuation">[</span>j<span class="token punctuation">]</span> <span class="token operator">===</span> target<span class="token punctuation">)</span> <span class="token keyword">return</span> <span class="token punctuation">[</span>i<span class="token punctuation">,</span>j<span class="token punctuation">]</span>        <span class="token punctuation">}</span>    <span class="token punctuation">}</span><span class="token punctuation">}</span><span class="token function">twoSum</span><span class="token punctuation">(</span><span class="token punctuation">[</span><span class="token number">1</span><span class="token punctuation">,</span><span class="token number">7</span><span class="token punctuation">,</span><span class="token number">10</span><span class="token punctuation">,</span><span class="token number">90</span><span class="token punctuation">]</span><span class="token punctuation">,</span><span class="token number">100</span><span class="token punctuation">)</span> <span class="token comment" spellcheck="true">// [2,3]</span></code></pre><p>思路 : 循环比较<br>1 =&gt; 7 , 10 , 90<br>7 =&gt; 10 , 90<br>10 =&gt; 90 </p><h3 id="解题-2-对象或Map"><a href="#解题-2-对象或Map" class="headerlink" title="解题 2 - 对象或Map"></a>解题 2 - 对象或Map</h3><pre class=" language-javascript"><code class="language-javascript"><span class="token keyword">let</span> twoSum <span class="token operator">=</span> <span class="token punctuation">(</span>nums<span class="token punctuation">,</span>target<span class="token punctuation">)</span> <span class="token operator">=</span><span class="token operator">></span> <span class="token punctuation">{</span>    <span class="token keyword">let</span> map <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">Map</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">;</span>     <span class="token keyword">for</span><span class="token punctuation">(</span><span class="token keyword">let</span> i <span class="token operator">=</span> <span class="token number">0</span> <span class="token punctuation">;</span> i <span class="token operator">&lt;</span> nums<span class="token punctuation">.</span>length<span class="token punctuation">;</span> i<span class="token operator">++</span><span class="token punctuation">)</span><span class="token punctuation">{</span>        <span class="token keyword">if</span><span class="token punctuation">(</span>map<span class="token punctuation">.</span><span class="token function">has</span><span class="token punctuation">(</span>nums<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">{</span>            <span class="token keyword">return</span> <span class="token punctuation">[</span>map<span class="token punctuation">.</span><span class="token keyword">get</span><span class="token punctuation">(</span>nums<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">)</span> <span class="token punctuation">,</span> i<span class="token punctuation">]</span>        <span class="token punctuation">}</span><span class="token keyword">else</span><span class="token punctuation">{</span>            map<span class="token punctuation">.</span><span class="token keyword">set</span><span class="token punctuation">(</span>target <span class="token operator">-</span> nums<span class="token punctuation">[</span>i<span class="token punctuation">]</span> <span class="token punctuation">,</span> i<span class="token punctuation">)</span>        <span class="token punctuation">}</span>    <span class="token punctuation">}</span><span class="token punctuation">}</span><span class="token keyword">let</span> twoSum <span class="token operator">=</span> <span class="token punctuation">(</span>nums<span class="token punctuation">,</span>target<span class="token punctuation">)</span> <span class="token operator">=</span><span class="token operator">></span><span class="token punctuation">{</span>    <span class="token keyword">let</span> obj <span class="token operator">=</span> <span class="token punctuation">{</span><span class="token punctuation">}</span> <span class="token punctuation">;</span>     <span class="token keyword">for</span> <span class="token punctuation">(</span><span class="token keyword">let</span> i <span class="token operator">=</span> <span class="token number">0</span> <span class="token punctuation">;</span> i <span class="token operator">&lt;</span> nums<span class="token punctuation">.</span>length <span class="token punctuation">;</span> i<span class="token operator">++</span><span class="token punctuation">)</span><span class="token punctuation">{</span> <span class="token comment" spellcheck="true">// 1 </span>        <span class="token keyword">if</span> <span class="token punctuation">(</span>obj<span class="token punctuation">[</span>nums<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token punctuation">{</span>            <span class="token keyword">return</span> <span class="token punctuation">[</span>obj<span class="token punctuation">[</span>nums<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">]</span> <span class="token punctuation">,</span> i<span class="token punctuation">]</span> <span class="token punctuation">;</span>          <span class="token punctuation">}</span> <span class="token keyword">else</span> <span class="token punctuation">{</span>            obj<span class="token punctuation">[</span>target <span class="token operator">-</span> nums<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">]</span> <span class="token operator">=</span> i <span class="token punctuation">;</span>  <span class="token comment" spellcheck="true">// {16 : 0 , 15 : 1 , 14 : 2 , 13 : 3 ....  , 10 : 6 , 9 : 7 }</span>        <span class="token punctuation">}</span>    <span class="token punctuation">}</span><span class="token punctuation">}</span></code></pre><h3 id="解题-3-indexOf"><a href="#解题-3-indexOf" class="headerlink" title="解题 3 - indexOf"></a>解题 3 - indexOf</h3><pre class=" language-javascript"><code class="language-javascript"><span class="token keyword">let</span> twoSum <span class="token operator">=</span> <span class="token punctuation">(</span>nums <span class="token punctuation">,</span> target<span class="token punctuation">)</span> <span class="token operator">=</span><span class="token operator">></span> <span class="token punctuation">{</span>    <span class="token keyword">let</span> result <span class="token operator">=</span> <span class="token punctuation">[</span><span class="token punctuation">]</span> <span class="token punctuation">;</span>     nums<span class="token punctuation">.</span><span class="token function">map</span><span class="token punctuation">(</span><span class="token punctuation">(</span>item<span class="token punctuation">,</span>index<span class="token punctuation">)</span><span class="token operator">=</span><span class="token operator">></span><span class="token punctuation">{</span>        <span class="token keyword">if</span><span class="token punctuation">(</span>nums<span class="token punctuation">.</span><span class="token function">indexOf</span><span class="token punctuation">(</span>target <span class="token operator">-</span> item<span class="token punctuation">)</span> <span class="token operator">></span> <span class="token operator">-</span><span class="token number">1</span> <span class="token operator">&amp;&amp;</span> nums<span class="token punctuation">.</span><span class="token function">indexOf</span><span class="token punctuation">(</span>target<span class="token operator">-</span> item<span class="token punctuation">)</span> <span class="token operator">!==</span> index<span class="token punctuation">)</span><span class="token punctuation">{</span>            result <span class="token operator">=</span> <span class="token punctuation">[</span>index<span class="token punctuation">,</span> nums<span class="token punctuation">.</span><span class="token function">indexOf</span><span class="token punctuation">(</span>target <span class="token operator">-</span> item<span class="token punctuation">)</span><span class="token punctuation">]</span>        <span class="token punctuation">}</span>    <span class="token punctuation">}</span><span class="token punctuation">)</span>    <span class="token keyword">return</span> result <span class="token punctuation">;</span> <span class="token punctuation">}</span></code></pre>]]></content>
      
      
      <categories>
          
          <category> LeetCode </category>
          
      </categories>
      
      
        <tags>
            
            <tag> LeetCode </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>git常用命令总结</title>
      <link href="/2018/04/29/git/"/>
      <url>/2018/04/29/git/</url>
      
        <content type="html"><![CDATA[<h3 id="git常用命令"><a href="#git常用命令" class="headerlink" title="git常用命令"></a>git常用命令</h3><ul><li>git config –global user.name “你的名字” 让你全部的Git仓库绑定你的名字</li><li>git config –global user.email “你的邮箱” 让你全部的Git仓库绑定你的邮箱</li><li>git init 初始化你的仓库</li><li>git add . 把工作区的文件全部提交到暂存区</li><li>git add ./<file>/ 把工作区的<file>文件提交到暂存区</file></file></li><li>git commit -m “xxx” 把暂存区的所有文件提交到仓库区，暂存区空空荡荡</li><li>git remote add origin <a href="https://github.com/name/name_cangku.git" target="_blank" rel="noopener">https://github.com/name/name_cangku.git</a> 把本地仓库与远程仓库连接起来</li><li>git push -u origin master 把仓库区的主分支master提交到远程仓库里</li><li>git push -u origin &lt;其他分支&gt; 把其他分支提交到远程仓库</li><li>git status查看当前仓库的状态</li><li>git diff 查看文件修改的具体内容</li><li>git log 显示从最近到最远的提交历史</li><li>git clone + 仓库地址下载克隆文件</li><li>git reset –hard + 版本号 回溯版本，版本号在commit的时候与master跟随在一起</li><li>git reflog 显示命令历史</li><li>git checkout – <file> 撤销命令，用版本库里的文件替换掉工作区的文件。我觉得就像是Git世界的ctrl + z</file></li><li>git rm 删除版本库的文件 </li><li>git branch 查看当前所有分支</li><li>git branch &lt;分支名字&gt; 创建分支</li><li>git checkout &lt;分支名字&gt; 切换到分支</li><li>git merge &lt;分支名字&gt; 合并分支</li><li>git branch -d &lt;分支名字&gt; 删除分支,有可能会删除失败，因为Git会保护没有被合并的分支</li><li>git branch -D + &lt;分支名字&gt; 强行删除，丢弃没被合并的分支</li><li>git log –graph 查看分支合并图</li><li>git merge –no-ff &lt;分支名字&gt; 合并分支的时候禁用Fast forward模式,因为这个模式会丢失分支历史信息</li><li>git stash 当有其他任务插进来时，把当前工作现场“存储”起来,以后恢复后继续工作</li><li>git stash list 查看你刚刚“存放”起来的工作去哪里了</li><li>git stash apply 恢复却不删除stash内容</li><li>git stash drop 删除stash内容</li><li>git stash pop 恢复的同时把stash内容也删了</li><li>git remote 查看远程库的信息，会显示origin，远程仓库默认名称为origin</li><li>git remote -v 显示更详细的信息</li><li>git pull 把最新的提交从远程仓库中抓取下来，在本地合并,和git push相反</li><li>git rebase 把分叉的提交历史“整理”成一条直线，看上去更直观</li><li>git tag 查看所有标签，可以知道历史版本的tag</li><li>git tag <name> 打标签，默认为HEAD。比如git tag v1.0</name></li><li>git tag <tagname> &lt;版本号&gt; 把版本号打上标签，版本号就是commit时，跟在旁边的一串字母数字</tagname></li><li>git show <tagname> 查看标签信息</tagname></li><li>git tag -a <tagname> -m “&lt;说明&gt;” 创建带说明的标签。 -a指定标签名，-m指定说明文字</tagname></li><li>git tag -d <tagname> 删除标签</tagname></li><li>git push origin <tagname> 推送某个标签到远程</tagname></li><li>git push origin –tags 一次性推送全部尚未推送到远程的本地标签</li><li>git push origin :refs/tags/<tagname> 删除远程标签<tagname></tagname></tagname></li><li>git config –global color.ui true 让Git显示颜色，会让命令输出看起来更醒目</li><li>git add -f <file> 强制提交已忽略的的文件</file></li><li>git check-ignore -v <file> 检查为什么Git会忽略该文件</file></li></ul><h3 id="常见场景"><a href="#常见场景" class="headerlink" title="常见场景"></a>常见场景</h3><blockquote><p>解决bug</p></blockquote><pre class=" language-javascript"><code class="language-javascript"><span class="token comment" spellcheck="true">// 创建bug分支</span>git checkout <span class="token operator">-</span>b bug<span class="token comment" spellcheck="true">// 修改bug后合并并删除bug分支</span>git checkout master git merge bug <span class="token operator">||</span> git rebase bug <span class="token comment" spellcheck="true">// 解决冲突后提交</span><span class="token comment" spellcheck="true">// 如果在自己分支上正在开发 ,并需要去修复紧急bug ，需要将当前修改放到缓存区</span>git stash <span class="token comment" spellcheck="true">// 等改完并提交后，在恢复之前代码</span>git stash apply <span class="token comment" spellcheck="true">// 保存缓存信息 并恢复代码</span>git stash pop <span class="token comment" spellcheck="true">// 删除缓存信息并恢复代码</span>git stash drop <span class="token comment" spellcheck="true">// 删除缓存信息</span></code></pre>]]></content>
      
      
      <categories>
          
          <category> git </category>
          
      </categories>
      
      
        <tags>
            
            <tag> git </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>html中meta的作用</title>
      <link href="/2018/04/17/meta/"/>
      <url>/2018/04/17/meta/</url>
      
        <content type="html"><![CDATA[<blockquote><p>对于menta标签仅仅知道几条，例如</p><pre class=" language-javascript"><code class="language-javascript"></code></pre></blockquote><meta charset="utf-8">    ```> 打开其他网站发现好多的meta标签，自己不是特别熟悉，这篇文章通过学习总结一下<h3 id="介绍"><a href="#介绍" class="headerlink" title="介绍"></a>介绍</h3><blockquote><p>The <meta> tag provides metadata about the HTML document. Metadata will not be displayed on the page, but will be machine parsable.</p></blockquote><blockquote><p>Meta elements are typically used to specify page description, keywords, author of the document, last modified, and other metadata.</p></blockquote><p>metadata,中文名叫元数据，不会显示在页面上，但是机器可以识别，作用就是定义页面的说明，关键字，最后修改日期，和其他的元数据。这些元数据将服务于浏览器。例如：如何布局，搜索引擎等..</p><h3 id="meta常用标签总结"><a href="#meta常用标签总结" class="headerlink" title="meta常用标签总结"></a>meta常用标签总结</h3><pre class=" language-javascript"><code class="language-javascript"><span class="token operator">&lt;</span>meta name<span class="token operator">=</span><span class="token string">"keywords"</span> content<span class="token operator">=</span><span class="token string">"博客"</span><span class="token operator">></span> <span class="token comment" spellcheck="true">// 用于告诉搜索引擎，你网页的关键字。</span></code></pre><pre class=" language-html"><code class="language-html"><span class="token comment" spellcheck="true">&lt;!-- 用于告诉搜索引擎，你网站的主要内容。 --></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>meta</span> <span class="token attr-name">name</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>description<span class="token punctuation">"</span></span> <span class="token attr-name">content</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>这是我的前端博客<span class="token punctuation">"</span></span><span class="token punctuation">></span></span><span class="token comment" spellcheck="true">&lt;!-- 这个属性常用于设计移动端网页。 --></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>meta</span> <span class="token attr-name">name</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>viewport<span class="token punctuation">"</span></span> <span class="token attr-name">content</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>width<span class="token punctuation">=</span>device-width, initial-scale<span class="token punctuation">=</span>1<span class="token punctuation">"</span></span><span class="token punctuation">></span></span><span class="token comment" spellcheck="true">&lt;!-- robots用来告诉爬虫哪些页面需要索引，哪些页面不需要索引。 content的参数有all,none,index,noindex,follow,nofollow。默认是all。 --></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>meta</span> <span class="token attr-name">name</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>robots<span class="token punctuation">"</span></span> <span class="token attr-name">content</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>none<span class="token punctuation">"</span></span><span class="token punctuation">></span></span><span class="token comment" spellcheck="true">&lt;!-- 用于标注网页作者 --></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>meta</span> <span class="token attr-name">name</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>author<span class="token punctuation">"</span></span> <span class="token attr-name">content</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>1378369458@qq.com<span class="token punctuation">"</span></span><span class="token punctuation">></span></span><span class="token comment" spellcheck="true">&lt;!-- 网页用的IDE --></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>meta</span> <span class="token attr-name">name</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>generator<span class="token punctuation">"</span></span> <span class="token attr-name">content</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>Sublime Text3<span class="token punctuation">"</span></span><span class="token punctuation">></span></span><span class="token comment" spellcheck="true">&lt;!-- 用于标注版权信息 --></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>meta</span> <span class="token attr-name">name</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>copyright<span class="token punctuation">"</span></span> <span class="token attr-name">content</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>Jia<span class="token punctuation">"</span></span><span class="token punctuation">></span></span> //代表该网站为Jia个人版权所有。<span class="token comment" spellcheck="true">&lt;!-- 如果页面不是经常更新，为了减轻搜索引擎爬虫对服务器带来的压力，可以设置一个爬虫的重访时间。如果重访时间过短，爬虫将按它们定义的默认时间来访问。 --></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>meta</span> <span class="token attr-name">name</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>revisit-after<span class="token punctuation">"</span></span> <span class="token attr-name">content</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>7 days<span class="token punctuation">"</span></span> <span class="token punctuation">></span></span><span class="token comment" spellcheck="true">&lt;!-- renderer是为双核浏览器准备的，用于指定双核浏览器默认以何种方式渲染页面。比如说360浏览器。 --></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>meta</span> <span class="token attr-name">name</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>renderer<span class="token punctuation">"</span></span> <span class="token attr-name">content</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>webkit<span class="token punctuation">"</span></span><span class="token punctuation">></span></span> //默认webkit内核<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>meta</span> <span class="token attr-name">name</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>renderer<span class="token punctuation">"</span></span> <span class="token attr-name">content</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>ie-comp<span class="token punctuation">"</span></span><span class="token punctuation">></span></span> //默认IE兼容模式<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>meta</span> <span class="token attr-name">name</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>renderer<span class="token punctuation">"</span></span> <span class="token attr-name">content</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>ie-stand<span class="token punctuation">"</span></span><span class="token punctuation">></span></span> //默认IE标准模式<span class="token comment" spellcheck="true">&lt;!-- HTML5设定网页字符集的方式，推荐使用UTF-8 --></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>meta</span> <span class="token attr-name">charset</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>utf-8<span class="token punctuation">"</span></span><span class="token punctuation">></span></span> <span class="token comment" spellcheck="true">&lt;!-- 指定IE和Chrome使用最新版本渲染当前页面 --></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>meta</span> <span class="token attr-name">http-equiv</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>X-UA-Compatible<span class="token punctuation">"</span></span> <span class="token attr-name">content</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>IE<span class="token punctuation">=</span>edge,chrome<span class="token punctuation">=</span>1<span class="token punctuation">"</span></span><span class="token punctuation">/></span></span> <span class="token comment" spellcheck="true">&lt;!-- 指导浏览器如何缓存某个响应以及缓存多长时间。 --></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>meta</span> <span class="token attr-name">http-equiv</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>cache-control<span class="token punctuation">"</span></span> <span class="token attr-name">content</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>no-cache<span class="token punctuation">"</span></span><span class="token punctuation">></span></span><span class="token comment" spellcheck="true">&lt;!-- no-cache: 先发送请求，与服务器确认该资源是否被更改，如果未被更改，则使用缓存。no-store: 不允许缓存，每次都要去服务器上，下载完整的响应。（安全措施）public : 缓存所有响应，但并非必须。因为max-age也可以做到相同效果private : 只为单个用户缓存，因此不允许任何中继进行缓存。（比如说CDN就不允许缓存private的响应）maxage : 表示当前请求开始，该响应在多久内能被缓存和重用，而不去服务器重新请求。例如：max-age=60表示响应可以再缓存和重用 60 秒。 --></span><span class="token comment" spellcheck="true">&lt;!-- 用于设定网页的到期时间，过期后网页必须到服务器上重新传输。 --></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>meta</span> <span class="token attr-name">http-equiv</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>expires<span class="token punctuation">"</span></span> <span class="token attr-name">content</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>Sunday 26 October 2018 01:00 GMT<span class="token punctuation">"</span></span> <span class="token punctuation">/></span></span><span class="token comment" spellcheck="true">&lt;!-- 网页将在设定的时间内，自动刷新并调向设定的网址。 --></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>meta</span> <span class="token attr-name">http-equiv</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>refresh<span class="token punctuation">"</span></span> <span class="token attr-name">content</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>2；URL<span class="token punctuation">=</span>http://www.jiatengda.cn/<span class="token punctuation">"</span></span><span class="token punctuation">></span></span> //意思是2秒后跳转向我的博客</code></pre>]]></content>
      
      
      <categories>
          
          <category> 前端 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 前端 </tag>
            
            <tag> meta标签 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>简单的算法</title>
      <link href="/2018/04/15/arrSort/"/>
      <url>/2018/04/15/arrSort/</url>
      
        <content type="html"><![CDATA[<p><strong><code>数组去重的多种实现方法</code></strong></p><h3 id="对象键值对处理（推荐）"><a href="#对象键值对处理（推荐）" class="headerlink" title="对象键值对处理（推荐）"></a>对象键值对处理（推荐）</h3><pre class=" language-javascript"><code class="language-javascript">Array<span class="token punctuation">.</span>prototype<span class="token punctuation">.</span>myUnique <span class="token operator">=</span> <span class="token keyword">function</span> <span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>    <span class="token comment" spellcheck="true">//=>this:ary 我们需要操作的数组，如果不想改变原有的数组，我们需要把要操作的数组克隆一份一模一样的处理，处理的都是克隆的这个数组</span>    <span class="token keyword">let</span> _this <span class="token operator">=</span> <span class="token punctuation">[</span><span class="token operator">...</span><span class="token keyword">this</span><span class="token punctuation">]</span><span class="token punctuation">,</span>        obj <span class="token operator">=</span> <span class="token punctuation">{</span><span class="token punctuation">}</span><span class="token punctuation">;</span>    <span class="token keyword">for</span> <span class="token punctuation">(</span><span class="token keyword">let</span> i <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span> i <span class="token operator">&lt;</span> _this<span class="token punctuation">.</span>length<span class="token punctuation">;</span> i<span class="token operator">++</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>        <span class="token keyword">let</span> item <span class="token operator">=</span> _this<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">;</span>        <span class="token keyword">if</span> <span class="token punctuation">(</span><span class="token keyword">typeof</span> obj<span class="token punctuation">[</span>item<span class="token punctuation">]</span> <span class="token operator">!==</span> <span class="token string">'undefined'</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>            <span class="token comment" spellcheck="true">//=>当前迭代的这一项在数组中已经存在，我们把这一项在数组中干掉</span>            <span class="token comment" spellcheck="true">// _this.splice(i, 1); [后面项移位，消耗性能]</span>            _this<span class="token punctuation">[</span>i<span class="token punctuation">]</span> <span class="token operator">=</span> _this<span class="token punctuation">[</span>_this<span class="token punctuation">.</span>length <span class="token operator">-</span> <span class="token number">1</span><span class="token punctuation">]</span><span class="token punctuation">;</span>            _this<span class="token punctuation">.</span>length<span class="token operator">--</span><span class="token punctuation">;</span>            i<span class="token operator">--</span><span class="token punctuation">;</span>            <span class="token keyword">continue</span><span class="token punctuation">;</span>        <span class="token punctuation">}</span>        obj<span class="token punctuation">[</span>item<span class="token punctuation">]</span> <span class="token operator">=</span> <span class="token boolean">true</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span>    obj <span class="token operator">=</span> <span class="token keyword">null</span><span class="token punctuation">;</span>    <span class="token keyword">return</span> _this<span class="token punctuation">;</span><span class="token punctuation">}</span><span class="token punctuation">;</span></code></pre><h3 id="双循环（不推荐）"><a href="#双循环（不推荐）" class="headerlink" title="双循环（不推荐）"></a>双循环（不推荐）</h3><pre class=" language-javascript"><code class="language-javascript">Array<span class="token punctuation">.</span>prototype<span class="token punctuation">.</span>myUnique <span class="token operator">=</span> <span class="token keyword">function</span> <span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>    <span class="token comment" spellcheck="true">//=>this:ary 我们需要操作的数组，如果不想改变原有的数组，我们需要把要操作的数组克隆一份一模一样的处理，处理的都是克隆的这个数组</span>    <span class="token keyword">let</span> _this <span class="token operator">=</span> <span class="token punctuation">[</span><span class="token operator">...</span><span class="token keyword">this</span><span class="token punctuation">]</span><span class="token punctuation">,</span>        obj <span class="token operator">=</span> <span class="token punctuation">{</span><span class="token punctuation">}</span><span class="token punctuation">;</span>    <span class="token keyword">for</span> <span class="token punctuation">(</span><span class="token keyword">let</span> i <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span> i <span class="token operator">&lt;</span> _this<span class="token punctuation">.</span>length<span class="token punctuation">;</span> i<span class="token operator">++</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>        <span class="token keyword">let</span> item <span class="token operator">=</span> _this<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">;</span>        <span class="token keyword">if</span> <span class="token punctuation">(</span><span class="token keyword">typeof</span> obj<span class="token punctuation">[</span>item<span class="token punctuation">]</span> <span class="token operator">!==</span> <span class="token string">'undefined'</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>            <span class="token comment" spellcheck="true">//=>当前迭代的这一项在数组中已经存在，我们把这一项在数组中干掉</span>            <span class="token comment" spellcheck="true">// _this.splice(i, 1); [后面项移位，消耗性能]</span>            _this<span class="token punctuation">[</span>i<span class="token punctuation">]</span> <span class="token operator">=</span> _this<span class="token punctuation">[</span>_this<span class="token punctuation">.</span>length <span class="token operator">-</span> <span class="token number">1</span><span class="token punctuation">]</span> <span class="token punctuation">;</span>             _this<span class="token punctuation">.</span>length<span class="token operator">--</span> <span class="token punctuation">;</span>             i<span class="token operator">--</span> <span class="token punctuation">;</span>             <span class="token keyword">continue</span> <span class="token punctuation">;</span>         <span class="token punctuation">}</span>        obj<span class="token punctuation">[</span>item<span class="token punctuation">]</span> <span class="token operator">=</span> <span class="token boolean">true</span> <span class="token punctuation">;</span>     <span class="token punctuation">}</span>    obj <span class="token operator">=</span> <span class="token keyword">null</span> <span class="token punctuation">;</span>     <span class="token keyword">return</span> _this <span class="token punctuation">;</span> <span class="token punctuation">}</span><span class="token punctuation">;</span></code></pre><p><code>indexOf：获取当前项在数组中第一次出现位置的索引，也能判断是否存在这一项（不存在获取的索引是-1），这个方法是不兼容IE6~8的</code></p><pre class=" language-javascript"><code class="language-javascript">Array<span class="token punctuation">.</span>prototype<span class="token punctuation">.</span>myUnique <span class="token operator">=</span> <span class="token keyword">function</span> <span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>    <span class="token keyword">let</span> _this <span class="token operator">=</span> <span class="token punctuation">[</span><span class="token operator">...</span><span class="token keyword">this</span><span class="token punctuation">]</span><span class="token punctuation">;</span>    <span class="token comment" spellcheck="true">//=>依次迭代数组中的每一项，验证当前项在数组中是否存在（不是和整个数组比较是否存在，而是和当前项的后面项比较是否存在=>类似于双FOR）,存在把当前项干掉</span>    <span class="token keyword">for</span> <span class="token punctuation">(</span><span class="token keyword">let</span> i <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span> i <span class="token operator">&lt;</span> _this<span class="token punctuation">.</span>length<span class="token punctuation">;</span> i<span class="token operator">++</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>        <span class="token keyword">let</span> item <span class="token operator">=</span> _this<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">,</span>            nextAry <span class="token operator">=</span> _this<span class="token punctuation">.</span><span class="token function">slice</span><span class="token punctuation">(</span>i <span class="token operator">+</span> <span class="token number">1</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token keyword">if</span> <span class="token punctuation">(</span>nextAry<span class="token punctuation">.</span><span class="token function">indexOf</span><span class="token punctuation">(</span>item<span class="token punctuation">)</span> <span class="token operator">></span> <span class="token operator">-</span><span class="token number">1</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>            _this<span class="token punctuation">[</span>i<span class="token punctuation">]</span> <span class="token operator">=</span> _this<span class="token punctuation">[</span>_this<span class="token punctuation">.</span>length <span class="token operator">-</span> <span class="token number">1</span><span class="token punctuation">]</span><span class="token punctuation">;</span>            _this<span class="token punctuation">.</span>length<span class="token operator">--</span><span class="token punctuation">;</span>            i<span class="token operator">--</span><span class="token punctuation">;</span>        <span class="token punctuation">}</span>    <span class="token punctuation">}</span>    <span class="token keyword">return</span> _this<span class="token punctuation">;</span><span class="token punctuation">}</span><span class="token punctuation">;</span></code></pre><h3 id="排序后相邻去除法"><a href="#排序后相邻去除法" class="headerlink" title="排序后相邻去除法"></a>排序后相邻去除法</h3><pre class=" language-javascript"><code class="language-javascript">先把数组进行排序，验证当前项和后一项是否相同，如果不相同，说明没有重复，我们把着于相提取出来保存即可Array<span class="token punctuation">.</span>prototype<span class="token punctuation">.</span>myUnique <span class="token operator">=</span> <span class="token keyword">function</span> <span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>    <span class="token keyword">let</span> _this <span class="token operator">=</span> <span class="token punctuation">[</span><span class="token punctuation">]</span><span class="token punctuation">,</span>        ary <span class="token operator">=</span> <span class="token keyword">this</span><span class="token punctuation">.</span><span class="token function">slice</span><span class="token punctuation">(</span><span class="token number">0</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">sort</span><span class="token punctuation">(</span><span class="token punctuation">(</span>a<span class="token punctuation">,</span> b<span class="token punctuation">)</span> <span class="token operator">=</span><span class="token operator">></span> a <span class="token operator">-</span> b<span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token keyword">for</span> <span class="token punctuation">(</span><span class="token keyword">let</span> i <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span> i <span class="token operator">&lt;</span> ary<span class="token punctuation">.</span>length<span class="token punctuation">;</span> i<span class="token operator">++</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>        <span class="token keyword">let</span> item <span class="token operator">=</span> ary<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">,</span>            next <span class="token operator">=</span> ary<span class="token punctuation">[</span>i <span class="token operator">+</span> <span class="token number">1</span><span class="token punctuation">]</span><span class="token punctuation">;</span>        <span class="token keyword">if</span> <span class="token punctuation">(</span>item <span class="token operator">!==</span> next<span class="token punctuation">)</span> <span class="token punctuation">{</span>            _this<span class="token punctuation">.</span><span class="token function">push</span><span class="token punctuation">(</span>item<span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token punctuation">}</span>    <span class="token punctuation">}</span>    <span class="token keyword">return</span> _this<span class="token punctuation">;</span><span class="token punctuation">}</span><span class="token punctuation">;</span></code></pre><p><strong><code>递归</code></strong></p><blockquote><p>函数自己调用自己执行就是递归 （递归是基于条件判断的：因为我们不能形成死递归，在某个条件下我们需要结束递归操作）</p></blockquote><h3 id="需求：数组扁平化-多维数组-gt-一维数组"><a href="#需求：数组扁平化-多维数组-gt-一维数组" class="headerlink" title="需求：数组扁平化(多维数组=&gt;一维数组)"></a>需求：数组扁平化(多维数组=&gt;一维数组)</h3><pre class=" language-javascript"><code class="language-javascript"><span class="token keyword">let</span> ary <span class="token operator">=</span> <span class="token punctuation">[</span><span class="token number">1</span><span class="token punctuation">,</span> <span class="token punctuation">[</span><span class="token number">2</span><span class="token punctuation">,</span> <span class="token punctuation">[</span><span class="token number">3</span><span class="token punctuation">,</span> <span class="token punctuation">[</span><span class="token number">4</span><span class="token punctuation">,</span> <span class="token number">5</span><span class="token punctuation">]</span><span class="token punctuation">]</span><span class="token punctuation">]</span><span class="token punctuation">,</span> <span class="token punctuation">[</span><span class="token number">6</span><span class="token punctuation">,</span> <span class="token number">7</span><span class="token punctuation">,</span> <span class="token punctuation">[</span><span class="token number">8</span><span class="token punctuation">,</span> <span class="token number">9</span><span class="token punctuation">,</span> <span class="token punctuation">[</span><span class="token number">11</span><span class="token punctuation">,</span> <span class="token number">12</span><span class="token punctuation">]</span><span class="token punctuation">]</span><span class="token punctuation">,</span> <span class="token number">10</span><span class="token punctuation">]</span><span class="token punctuation">]</span><span class="token punctuation">;</span>  <span class="token comment" spellcheck="true">//=>[1,2,3,4,5,6]</span><span class="token keyword">let</span> result <span class="token operator">=</span> <span class="token punctuation">[</span><span class="token punctuation">]</span><span class="token punctuation">,</span>    fn <span class="token operator">=</span> <span class="token keyword">function</span> <span class="token punctuation">(</span>ary<span class="token punctuation">)</span> <span class="token punctuation">{</span>        <span class="token keyword">if</span> <span class="token punctuation">(</span>ary<span class="token punctuation">.</span>length <span class="token operator">===</span> <span class="token number">0</span><span class="token punctuation">)</span> <span class="token keyword">return</span><span class="token punctuation">;</span>        <span class="token keyword">for</span> <span class="token punctuation">(</span><span class="token keyword">let</span> i <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span> i <span class="token operator">&lt;</span> ary<span class="token punctuation">.</span>length<span class="token punctuation">;</span> i<span class="token operator">++</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>            <span class="token keyword">let</span> item <span class="token operator">=</span> ary<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">;</span>            <span class="token keyword">if</span> <span class="token punctuation">(</span><span class="token keyword">typeof</span> item <span class="token operator">===</span> <span class="token string">'object'</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>                <span class="token function">fn</span><span class="token punctuation">(</span>item<span class="token punctuation">)</span><span class="token punctuation">;</span>            <span class="token punctuation">}</span> <span class="token keyword">else</span> <span class="token punctuation">{</span>                result<span class="token punctuation">.</span><span class="token function">push</span><span class="token punctuation">(</span>item<span class="token punctuation">)</span><span class="token punctuation">;</span>            <span class="token punctuation">}</span>        <span class="token punctuation">}</span>    <span class="token punctuation">}</span><span class="token punctuation">;</span><span class="token function">fn</span><span class="token punctuation">(</span>ary<span class="token punctuation">)</span><span class="token punctuation">;</span>console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span>result<span class="token punctuation">)</span><span class="token punctuation">;</span></code></pre><h3 id="插入排序"><a href="#插入排序" class="headerlink" title="插入排序"></a>插入排序</h3><p>插入排序：先把数组的第一项拿出来放在左手边，再从右手边拿出一张牌，到这分别和左手的牌进行比较，若比左手的牌大，则放在这张牌的后面，若比左手的牌小，继续往前比较，知道遇到左手牌比右手牌小的，放在这张牌后面，若比较到最前面也没有发现左手牌比右手这张牌小的，说明右手这张牌最小，则放在左手牌的最前面<br><code>从右往左比较</code></p><pre class=" language-javascript"><code class="language-javascript">  <span class="token keyword">var</span> ary <span class="token operator">=</span> <span class="token punctuation">[</span><span class="token number">5</span><span class="token punctuation">,</span><span class="token number">2</span><span class="token punctuation">,</span><span class="token number">3</span><span class="token punctuation">,</span><span class="token number">3</span><span class="token punctuation">,</span><span class="token number">5</span><span class="token punctuation">,</span><span class="token number">44</span><span class="token punctuation">,</span><span class="token number">12</span><span class="token punctuation">,</span><span class="token number">14</span><span class="token punctuation">,</span><span class="token number">88</span><span class="token punctuation">,</span><span class="token number">99</span><span class="token punctuation">,</span><span class="token number">56</span><span class="token punctuation">,</span><span class="token number">88</span><span class="token punctuation">,</span><span class="token number">99</span><span class="token punctuation">,</span><span class="token number">15</span><span class="token punctuation">,</span><span class="token number">15</span><span class="token punctuation">,</span><span class="token number">55</span><span class="token punctuation">,</span><span class="token number">66</span><span class="token punctuation">,</span><span class="token number">88</span><span class="token punctuation">]</span><span class="token punctuation">;</span>    <span class="token keyword">var</span> left <span class="token operator">=</span> ary<span class="token punctuation">.</span><span class="token function">splice</span><span class="token punctuation">(</span><span class="token number">0</span><span class="token punctuation">,</span><span class="token number">1</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token keyword">for</span><span class="token punctuation">(</span><span class="token keyword">var</span> i <span class="token operator">=</span><span class="token number">0</span><span class="token punctuation">;</span> i<span class="token operator">&lt;</span>ary<span class="token punctuation">.</span>length<span class="token punctuation">;</span>i<span class="token operator">++</span><span class="token punctuation">)</span><span class="token punctuation">{</span>        <span class="token keyword">var</span> curR <span class="token operator">=</span> ary<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">;</span><span class="token comment" spellcheck="true">//右手边的每张牌</span>        <span class="token keyword">for</span><span class="token punctuation">(</span><span class="token keyword">var</span> j <span class="token operator">=</span>left<span class="token punctuation">.</span>length<span class="token number">-1</span><span class="token punctuation">;</span> j<span class="token operator">>=</span><span class="token number">0</span><span class="token punctuation">;</span> <span class="token punctuation">)</span><span class="token punctuation">{</span>            <span class="token keyword">var</span> curL <span class="token operator">=</span> left<span class="token punctuation">[</span>j<span class="token punctuation">]</span><span class="token punctuation">;</span><span class="token comment" spellcheck="true">//左手边的每张牌</span>            <span class="token keyword">if</span> <span class="token punctuation">(</span>curR<span class="token operator">></span>curL<span class="token punctuation">)</span><span class="token punctuation">{</span>                left<span class="token punctuation">.</span><span class="token function">splice</span><span class="token punctuation">(</span>j<span class="token operator">+</span><span class="token number">1</span><span class="token punctuation">,</span><span class="token number">0</span><span class="token punctuation">,</span>curR<span class="token punctuation">)</span><span class="token punctuation">;</span>                <span class="token keyword">break</span><span class="token punctuation">;</span>            <span class="token punctuation">}</span><span class="token keyword">else</span><span class="token punctuation">{</span><span class="token comment" spellcheck="true">//右手牌比左手牌小，则继续往前跟左手牌进行比较</span>                j<span class="token operator">--</span><span class="token punctuation">;</span>                <span class="token keyword">if</span> <span class="token punctuation">(</span>j <span class="token operator">==</span> <span class="token operator">-</span><span class="token number">1</span><span class="token punctuation">)</span><span class="token punctuation">{</span>                    left<span class="token punctuation">.</span><span class="token function">unshift</span><span class="token punctuation">(</span>curR<span class="token punctuation">)</span><span class="token punctuation">;</span>                <span class="token punctuation">}</span>            <span class="token punctuation">}</span>        <span class="token punctuation">}</span>    <span class="token punctuation">}</span></code></pre><p><code>从左往右比较</code></p><pre class=" language-javascript"><code class="language-javascript"> <span class="token keyword">var</span> ary <span class="token operator">=</span> <span class="token punctuation">[</span><span class="token number">5</span><span class="token punctuation">,</span><span class="token number">88</span><span class="token punctuation">,</span><span class="token number">99</span><span class="token punctuation">,</span><span class="token number">99</span><span class="token punctuation">,</span><span class="token number">99</span><span class="token punctuation">,</span><span class="token number">10</span><span class="token punctuation">,</span><span class="token number">100</span><span class="token punctuation">]</span><span class="token punctuation">;</span>    <span class="token keyword">var</span> left <span class="token operator">=</span> ary<span class="token punctuation">.</span><span class="token function">splice</span><span class="token punctuation">(</span><span class="token number">0</span><span class="token punctuation">,</span><span class="token number">1</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token keyword">for</span><span class="token punctuation">(</span><span class="token keyword">var</span> i <span class="token operator">=</span><span class="token number">0</span><span class="token punctuation">;</span> i<span class="token operator">&lt;</span>ary<span class="token punctuation">.</span>length<span class="token punctuation">;</span> i<span class="token operator">++</span><span class="token punctuation">)</span><span class="token punctuation">{</span>        <span class="token keyword">var</span> curR <span class="token operator">=</span> ary<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">;</span><span class="token comment" spellcheck="true">//右手边的每张牌</span>        <span class="token keyword">for</span><span class="token punctuation">(</span><span class="token keyword">var</span> j <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span>j<span class="token operator">&lt;</span>left<span class="token punctuation">.</span>length<span class="token punctuation">;</span><span class="token punctuation">)</span><span class="token punctuation">{</span>            <span class="token keyword">var</span> curL <span class="token operator">=</span> left<span class="token punctuation">[</span>j<span class="token punctuation">]</span><span class="token punctuation">;</span>            <span class="token keyword">if</span> <span class="token punctuation">(</span>curR<span class="token operator">&lt;</span>curL<span class="token punctuation">)</span><span class="token punctuation">{</span><span class="token comment" spellcheck="true">//若右手牌比左手小//有可能重复，所以加一个等号。</span>                left<span class="token punctuation">.</span><span class="token function">splice</span><span class="token punctuation">(</span>j<span class="token punctuation">,</span><span class="token number">0</span><span class="token punctuation">,</span>curR<span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token comment" spellcheck="true">//则放在这张牌的前面</span>                <span class="token keyword">break</span><span class="token punctuation">;</span>            <span class="token punctuation">}</span><span class="token keyword">else</span><span class="token punctuation">{</span>                j<span class="token operator">++</span><span class="token punctuation">;</span>                <span class="token keyword">if</span><span class="token punctuation">(</span>j <span class="token operator">==</span> left<span class="token punctuation">.</span>length<span class="token punctuation">)</span><span class="token punctuation">{</span><span class="token comment" spellcheck="true">//右手牌比左手牌大，则继续往前跟左手牌进行比较</span>                    left<span class="token punctuation">.</span><span class="token function">push</span><span class="token punctuation">(</span>curR<span class="token punctuation">)</span><span class="token punctuation">;</span>                    <span class="token keyword">break</span><span class="token punctuation">;</span><span class="token comment" spellcheck="true">//加上break进行下一轮比较</span>                <span class="token punctuation">}</span>            <span class="token punctuation">}</span>        <span class="token punctuation">}</span>    <span class="token punctuation">}</span>    console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span>left<span class="token punctuation">)</span><span class="token punctuation">;</span></code></pre><h3 id="冒泡排序"><a href="#冒泡排序" class="headerlink" title="冒泡排序"></a>冒泡排序</h3><pre class=" language-javascript"><code class="language-javascript">    <span class="token comment" spellcheck="true">//冒泡排序：小的往前排，大的往后排，实现从小到大排列</span>    <span class="token comment" spellcheck="true">//两两比较的方式，若前一项比后一项小，则保持原排列位置,若前一项比后一项大，则他俩交换位置，这样一轮</span>    <span class="token keyword">var</span> ary <span class="token operator">=</span> <span class="token punctuation">[</span><span class="token number">2</span><span class="token punctuation">,</span> <span class="token number">15</span><span class="token punctuation">,</span> <span class="token number">364</span><span class="token punctuation">,</span> <span class="token number">4</span><span class="token punctuation">,</span> <span class="token number">2655</span><span class="token punctuation">,</span> <span class="token number">514</span><span class="token punctuation">,</span> <span class="token number">12</span><span class="token punctuation">,</span> <span class="token number">5461</span><span class="token punctuation">,</span> <span class="token number">4</span><span class="token punctuation">]</span><span class="token punctuation">;</span>    <span class="token keyword">for</span> <span class="token punctuation">(</span><span class="token keyword">var</span> j <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span> j <span class="token operator">&lt;</span> ary<span class="token punctuation">.</span>length<span class="token punctuation">;</span> j<span class="token operator">++</span><span class="token punctuation">)</span> <span class="token punctuation">{</span><span class="token comment" spellcheck="true">//控制轮数</span>        <span class="token keyword">for</span> <span class="token punctuation">(</span><span class="token keyword">var</span> i <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span> i <span class="token operator">&lt;</span> ary<span class="token punctuation">.</span>length <span class="token operator">-</span> <span class="token number">1</span><span class="token operator">-</span> j<span class="token punctuation">;</span> i<span class="token operator">++</span><span class="token punctuation">)</span> <span class="token punctuation">{</span><span class="token comment" spellcheck="true">//每轮比较的次数</span>            <span class="token comment" spellcheck="true">// ary[i]前一项 ary[i+1]后一项</span>            <span class="token keyword">if</span> <span class="token punctuation">(</span>ary<span class="token punctuation">[</span>i<span class="token punctuation">]</span> <span class="token operator">></span> ary<span class="token punctuation">[</span>i <span class="token operator">+</span> <span class="token number">1</span><span class="token punctuation">]</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>                <span class="token keyword">var</span> temp <span class="token operator">=</span> <span class="token keyword">null</span><span class="token punctuation">;</span><span class="token comment" spellcheck="true">//借助一下中间变量</span>                temp <span class="token operator">=</span> ary<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">;</span>                ary<span class="token punctuation">[</span>i<span class="token punctuation">]</span> <span class="token operator">=</span> ary<span class="token punctuation">[</span>i <span class="token operator">+</span> <span class="token number">1</span><span class="token punctuation">]</span><span class="token punctuation">;</span>                ary<span class="token punctuation">[</span>i <span class="token operator">+</span> <span class="token number">1</span><span class="token punctuation">]</span> <span class="token operator">=</span> temp<span class="token punctuation">;</span>            <span class="token punctuation">}</span>        <span class="token punctuation">}</span>    <span class="token punctuation">}</span>    console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span>ary<span class="token punctuation">)</span><span class="token punctuation">;</span></code></pre><h3 id="快速排序"><a href="#快速排序" class="headerlink" title="快速排序"></a>快速排序</h3><pre class=" language-javascript"><code class="language-javascript">    <span class="token comment" spellcheck="true">//快速排序：去除数组的中间项，将其他项跟中间项进行比较，若比中间项小，放入left数组中，若比中间项大，则放入righth数组当中，left和right重复以上逻辑</span>    <span class="token keyword">var</span> ary <span class="token operator">=</span> <span class="token punctuation">[</span><span class="token number">12</span><span class="token punctuation">,</span> <span class="token number">3</span><span class="token punctuation">,</span> <span class="token number">4</span><span class="token punctuation">,</span> <span class="token number">1</span><span class="token punctuation">,</span> <span class="token number">41</span><span class="token punctuation">,</span> <span class="token number">2</span><span class="token punctuation">,</span> <span class="token number">11</span><span class="token punctuation">,</span> <span class="token number">444</span><span class="token punctuation">,</span> <span class="token number">1000</span><span class="token punctuation">,</span> <span class="token number">47</span><span class="token punctuation">]</span><span class="token punctuation">;</span>    去除数组中的中间项ary<span class="token punctuation">.</span>length<span class="token operator">/</span><span class="token number">2</span>  <span class="token keyword">function</span> <span class="token function">quickSort</span><span class="token punctuation">(</span>ary<span class="token punctuation">)</span> <span class="token punctuation">{</span>       <span class="token keyword">if</span><span class="token punctuation">(</span>ary<span class="token punctuation">.</span>length<span class="token operator">&lt;=</span><span class="token number">1</span><span class="token punctuation">)</span><span class="token punctuation">{</span>           <span class="token keyword">return</span> ary<span class="token punctuation">;</span>       <span class="token punctuation">}</span>       <span class="token keyword">var</span> pointIndex <span class="token operator">=</span> Math<span class="token punctuation">.</span><span class="token function">floor</span><span class="token punctuation">(</span>ary<span class="token punctuation">.</span>length <span class="token operator">/</span> <span class="token number">2</span><span class="token punctuation">)</span><span class="token comment" spellcheck="true">//取出中间项</span>       <span class="token keyword">var</span> pointValue <span class="token operator">=</span> ary<span class="token punctuation">.</span><span class="token function">splice</span><span class="token punctuation">(</span>pointIndex<span class="token punctuation">,</span> <span class="token number">1</span><span class="token punctuation">)</span><span class="token punctuation">[</span><span class="token number">0</span><span class="token punctuation">]</span><span class="token punctuation">;</span>       <span class="token keyword">var</span> left <span class="token operator">=</span> <span class="token punctuation">[</span><span class="token punctuation">]</span><span class="token punctuation">;</span>        <span class="token keyword">var</span> right <span class="token operator">=</span> <span class="token punctuation">[</span><span class="token punctuation">]</span><span class="token punctuation">;</span>        <span class="token keyword">for</span> <span class="token punctuation">(</span><span class="token keyword">var</span> i <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span> i <span class="token operator">&lt;</span> ary<span class="token punctuation">.</span>length<span class="token punctuation">;</span> i<span class="token operator">++</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>          <span class="token keyword">var</span> cur <span class="token operator">=</span> ary<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">;</span>           <span class="token keyword">if</span> <span class="token punctuation">(</span>cur <span class="token operator">&lt;=</span> pointValue<span class="token punctuation">)</span> <span class="token punctuation">{</span>                left<span class="token punctuation">.</span><span class="token function">push</span><span class="token punctuation">(</span>cur<span class="token punctuation">)</span><span class="token punctuation">;</span>            <span class="token punctuation">}</span> <span class="token keyword">else</span> <span class="token punctuation">{</span>                right<span class="token punctuation">.</span><span class="token function">push</span><span class="token punctuation">(</span>cur<span class="token punctuation">)</span><span class="token punctuation">;</span>            <span class="token punctuation">}</span>        <span class="token punctuation">}</span>        <span class="token keyword">return</span> <span class="token function">quickSort</span><span class="token punctuation">(</span>left<span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">concat</span><span class="token punctuation">(</span>pointValue<span class="token punctuation">,</span><span class="token function">quickSort</span><span class="token punctuation">(</span>right<span class="token punctuation">)</span><span class="token punctuation">)</span>    <span class="token punctuation">}</span>    console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span><span class="token function">quickSort</span><span class="token punctuation">(</span>ary<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span></code></pre>]]></content>
      
      
      <categories>
          
          <category> 前端 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 前端 </tag>
            
            <tag> 数组 </tag>
            
            <tag> 算法 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>React学习总结</title>
      <link href="/2018/04/02/react/"/>
      <url>/2018/04/02/react/</url>
      
        <content type="html"><![CDATA[<blockquote><p>React是FaceBook(脸书)公司研发的一款JS框架(MVC)</p></blockquote><h3 id="React的脚手架"><a href="#React的脚手架" class="headerlink" title="React的脚手架"></a>React的脚手架</h3><p>React是一款框架 : 具备自己开发的独立思想(MVC : Model View Controller)</p><ul><li>划分组件开发</li><li>基于路由的SPA单页面开发</li><li>基于ES6来编写代码(最后部署上线的时候，我们需要把ES6编译成ES5 =&gt;基于Babel来完成编译)</li><li>可能用到Less/Sass等，我们也需要使用对应的插件把他们进行预编译</li><li>为了优化性能(减少http请求次数)，我们需要把JS或者CSS进行合并压缩</li><li>………….</li><li>webpack来完成以上页面组件合并、JS / CSS编译加合并等工作</li></ul><p>前端工程化开发</p><ul><li>基于框架的组件化开发 / 模块化开发</li><li>基于webpack的自动部署</li></ul><p>但是配置webpack是一个相对复杂的工作，我们需要自己安装许多的包，还需要自己写相对复杂的配置文件… 如果我们有一个插件，基于它可以快速构建一套完整的自动化工程项目结构，那么有助于提高开发的效率=&gt;<strong><code>脚手架</code></strong><br>VUE : vue-cli<br>REACT : create-react-app</p><h3 id="create-react-app-的使用"><a href="#create-react-app-的使用" class="headerlink" title="create-react-app 的使用"></a>create-react-app 的使用</h3><pre><code>1.把模块安装在全局(目的:可以使用命令),mac电脑安装的时候，前面需要加sudo，否则没有权限npm install creact-react-app -g2.基于脚手架命令，创建出一个基于react的自动化 / 工程化项目目录，和npm发包时候的命名规范一样，项目名称中不能出现:大写字母 / 中文 / 特殊符号(-或者_是可以的)等create-react-app [项目名称]</code></pre><h3 id="脚手架生成目录中的一些内容"><a href="#脚手架生成目录中的一些内容" class="headerlink" title="脚手架生成目录中的一些内容"></a>脚手架生成目录中的一些内容</h3><ul><li><p>node_modules : 当前项目中依赖的包都安装在这里</p><ul><li>.bin : 本地项目中可执行命令，在package.json的scripts中配置对应的脚本即可(react-scripts命令)</li></ul></li><li><p>public : 存放的是当前项目的HTML页面(单页面应用放一个index.html即可，多页面根据自己需求放置需要的页面)</p><pre class=" language-html"><code class="language-html">  <span class="token comment" spellcheck="true">&lt;!--       在react框架中，所有的逻辑都是在JS中完成的(包括页面结构的创建)如果想给当前的页面导入一些css样式或者image图片等内容，我们有两种方式:       1.在JS中基于ES6 Module模块规范使用import导入，这样webpack在编译合并页面的时候，会把导入的资源文件等插入到页面的结构中(绝对不能再JS管控的结构中通过相对目录./或者../导入资源，因为在webpack编译的时候，地址就不再是之前的相对地址了)       2.如果不想在JS中导入(JS中导入的资源都会基于webpack编译)，我们也可以把资源手动的在HTML中导入，但是HTML最后也要基于webpack编译，带入的地址也不建议写相对地址，而是使用%PUBLIC_URL%/ 写成绝对路径    &lt;link rel="manifest" href="%PUBLIC_URL%/manifest.json">    &lt;link rel="shortcut icon" href="%PUBLIC_URL%/favicon.ico">  --></span></code></pre></li><li><p>src : 项目结构中最主要的目录，因为后期所有的JS、路由、组件等都是放到这里面(包括需要编写的CSS或者图片等)</p></li><li><p>.gitignore : git提交时候忽略文件的目录配置项</p></li><li><p>package.json : 当前项目的配置清单<br>```javascript<br>“dependencies”: {<br>  “react”: “^16.4.1”,<br>  “react-dom”: “^16.4.1”,<br>  “react-scripts”: “1.1.4”<br>},<br>基于脚手架生成工程目录，自动帮我们安装了三个模块，react/react-dom/react-scripts<br>react-scripts集成了webpack需要的内容:</p></li><li><p>babel</p></li><li><p>css</p></li><li><p>eslink</p></li><li><p>webpack</p></li><li><p>其他<br>没有less/sass的处理内容(项目中使用less，需要自己额外安装)</p><p>“scripts”: {<br>  “start”: “react-scripts start”,<br>  “build”: “react-scripts build”,<br>  “test”: “react-scripts test –env=jsdom”,<br>  “eject”: “react-scripts eject”<br>}<br>可执行的脚本”npm run start / yarn start”<br>  start:开发环境下，基于webpack编译处理，最后可以预览当前开发的项目成果(在webpack中，安装了webpack-dev-server插件，基于这个插件会自动创建一个web服务[端口号默认是3000]，webpack会帮我们自动打开浏览器并且展示我们的页面，并且能够监听我们代码的改变，如果代码改变了，webpack会自动重新编译并且刷新浏览器来完成重新渲染)<br>  build:项目需要部署到服务器上，我们先执行yarn build，把项目整体编译打包（完成后会在项目中生成一个build文件夹，这个文件夹中包含了所有编译后的内容，我们把它上传到服务器即可）;而且在服务器上进行部署的时候，不需要安装任何模块，因为webpack已经把需要的内容都打包到一个JS中了</p><pre><code></code></pre></li></ul><h3 id="React脚手架的深入剖析"><a href="#React脚手架的深入剖析" class="headerlink" title="React脚手架的深入剖析"></a>React脚手架的深入剖析</h3><p>creact-react-app脚手架为了让结构目录清晰，把安装的webpack及配置文件都集成在了react-scripts模块中，放到了node_modules中</p><p>但是真实项目中，我们需要在脚手架默认安装的基础上，额外安装一些我们需要的模块，例如 : react-router-dom / axios 及 less / less-loader….</p><p> 情况一 : 如果我们安装其他的组件，但是安装成功后不需要修改webpack配置项，此时我们直接的安装并且调取使用即可</p><p> 情况二 : 我们安装的插件是基于webpack处理的，也就是需要把安装的模块配置到webpack当中(重新修改webpack配置项)</p><ul><li>首先需要把隐藏到node_modules中的配置项暴露到项目<pre><code>yarn eject:暴露到项目中</code></pre></li></ul><p>首先会提示确认是否执行eject操作，这个操作是不可逆转的，一旦暴露出来配置项，就无法再隐藏回去了</p><p>如果当前的项目基于git管理，在执行eject的时候，如果还有没有提交到历史区的内容，需要先提交到历史区，然后再eject才可以，否则报错</p><p>一旦暴露后，项目中多了两个文件夹<br>    config:存放到的是webpack的配置文件<br>        webpack.config.dev.js:开发环境下的配置项(yarn start)<br>        webpack.config.prod.js:生产环境下的配置项(yarn build)<br>    scripts:存放的是可执行脚本的JS文件<br>        start.js:yarn start执行的JS<br>        bulid.js:yarn build执行的JS<br>    package.json中的内容也改了</p><pre><code>例如:配置less-    yarn add less less-loader -    less是开发和生产环境下都需要配置的</code></pre><p> {loader: require.resolve(‘less-loader’) }</p><pre><code>  - 再去修改对应的配置项即可我们预览项目的时候，也是先基于webpack编译，把编译后的内容放到浏览器中运行，所以如果项目中使用了less，我们需要修改webpack配置项，在配置项中加入less的编译工作，这样后期预览项目，首先基于webpack把less编译为css，然后再呈现在页面中.### 设置环境变量</code></pre><p>set HTTPS=true&amp;&amp;npm start  开启HTTPS协议模式<br>set PORT=6666&amp;&amp;npm start 修改端口号</p><pre><code>### react&amp;&amp;react-dom[渐进式框架]- 一种最流行的框架设计思想，一般框架中包含很多内容，这样导致框架的体积过于臃肿，会拖慢加载速度，真实项目中，我们使用一个框架，不一定用到所有的功能，此时我们应该把框架的功能进行拆分，用户想用什么，让其自由组合即可- 全家桶 : 渐进式框架N多部分的组合- Vue全家桶 : vue-cli / vue / vue-router / vuex / axios(fatch) / vue element(vant) - React全家桶 : create-react-app / react / react-dom / react-router(-dom) / redux / react-redux / axios(fatch) / ant / dva / mobx...&gt; 1.react : react框架的核心部分，提供了Component类可以供我们进行组件开发，提供了钩子函数(生命周期函数 : 所有的生命周期函数都是基于回调函数完成的) &gt;  &gt; 2.react-dom : 把JSX语法(React独有的语法)渲染为真实DOM(能够放到页面中展示的结构都叫做真实的DOM)的组装件 ### 把JSX(虚拟DOM)变为真实的DOM**`JSX语法`**&gt; ReactDOM.render([jsx],[container],[callback]); 把JSX渲染到页面中&gt;  - jsx:react虚拟元素&gt;  - container:容器，我们想把元素放到页面中的哪个容器中&gt;  - callback:当把内容放到页面中呈现触发的回调函数JSX(javascript+XML(HTML))- 和之前拼接的HTML字符串类似，都是把HTML结构代码和JS代码或者数据混合在一起了，但是它不是字符串-  1.不建议我们把JSX直接渲染到body中，而是放在自己创建的一个容器中，一般我们都放在一个id为root的div中即可-  2.在JSX中出现的{}是存放JS的，但是要求JS代码执行完成需要有返回结果(JS表达式)  - 不能直接放一个对象数据类型的值(对象(除了给style赋值)、函数都不行，数组里面如果没有对象，都是基本值是可以的或者是JSX元素)  -  可以是基本数据类型的值(布尔类型什么都不显示，null、undefined也是JSX元素，代表的是空)  -  循环判断的语句都不支持，但是支持三元运算符- 3.循环数组创建JSX元素(一般都基于数组的map方法完成迭代)，需要给创建的元素设置唯一的key值(当前本次循环内唯一即可)- 4.只能出现一个根元素- 5.给元素设置样式类用的是className而不是class-  6.style中不能直接的写样式字符串，需要基于一个样式对象来遍历赋值```javascriptlet data = [        { name:&quot;张三&quot;,age:18},        {name:&quot;李四&quot;,age:20}    ],root = document.querySelector(&quot;#root&quot;);ReactDOM.render(&lt;div id=&quot;box&quot;&gt;Hello world!        &lt;ul&gt;            {data.map((item,index)=&gt;{                let {name, age} = item;                return &lt;li key={index}&gt;                    &lt;span&gt;{name}&lt;/span&gt;                    &lt;span&gt;{age}&lt;/span&gt;                &lt;/li&gt;            })}        &lt;/ul&gt;&lt;/div&gt;, root);</code></pre><h3 id="JSX渲染机制"><a href="#JSX渲染机制" class="headerlink" title="JSX渲染机制"></a>JSX渲染机制</h3><ul><li>1.基于babel中的语法解析模块(babel-preset-react)把JSX语法编译为react.createElement(…)结构</li><li>2.执行createElement<pre class=" language-javascript"><code class="language-javascript">React<span class="token punctuation">.</span><span class="token function">createElement</span><span class="token punctuation">(</span>type<span class="token punctuation">,</span> props<span class="token punctuation">,</span> children<span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token function">创建一个对象</span><span class="token punctuation">(</span>虚拟DOM<span class="token punctuation">)</span>属性：type<span class="token punctuation">:</span><span class="token string">"h1"</span> <span class="token punctuation">:</span> 标签名props<span class="token punctuation">:</span><span class="token punctuation">{</span>id<span class="token punctuation">:</span><span class="token string">"titleBox"</span><span class="token punctuation">,</span>className<span class="token punctuation">:</span><span class="token string">"title"</span><span class="token punctuation">,</span>style<span class="token punctuation">:</span><span class="token punctuation">{</span><span class="token operator">...</span><span class="token punctuation">}</span><span class="token punctuation">,</span>children<span class="token punctuation">:</span><span class="token string">"jiatengda"</span> <span class="token operator">=</span><span class="token operator">></span>存放的是元素中的内容<span class="token punctuation">}</span>ref<span class="token punctuation">:</span><span class="token keyword">null</span>key<span class="token punctuation">:</span><span class="token keyword">null</span><span class="token operator">...</span>__proto__<span class="token punctuation">:</span>Object<span class="token punctuation">.</span>prototype</code></pre></li><li>3.reactDOM.render(JSX语法最后生成的对象，容器)，基于render方法把生成的对象对台创建DOM元素，插入到执行的容器中</li></ul><p><strong><code>自己写createElement&amp;&amp;render</code></strong></p><pre class=" language-javascript"><code class="language-javascript"><span class="token keyword">function</span> <span class="token function">createElement</span><span class="token punctuation">(</span>type<span class="token punctuation">,</span> props<span class="token punctuation">,</span> children<span class="token punctuation">)</span> <span class="token punctuation">{</span>    props <span class="token operator">=</span> props <span class="token operator">||</span> <span class="token punctuation">{</span><span class="token punctuation">}</span><span class="token punctuation">;</span>    <span class="token comment" spellcheck="true">//创建一个对象，设置一些默认属性值</span>    <span class="token keyword">let</span> obj <span class="token operator">=</span> <span class="token punctuation">{</span>        type<span class="token punctuation">:</span> <span class="token keyword">null</span><span class="token punctuation">,</span>        props<span class="token punctuation">:</span> <span class="token punctuation">{</span>            children<span class="token punctuation">:</span> <span class="token string">""</span>        <span class="token punctuation">}</span><span class="token punctuation">,</span>        ref<span class="token punctuation">:</span> <span class="token keyword">null</span><span class="token punctuation">,</span>        key<span class="token punctuation">:</span> <span class="token keyword">null</span>    <span class="token punctuation">}</span><span class="token punctuation">;</span>    <span class="token comment" spellcheck="true">//用传递的type和props覆盖原有的默认值</span>    <span class="token comment" spellcheck="true">// obj = {...obj, type, props};//=>type:type,props:props</span>    obj <span class="token operator">=</span> <span class="token punctuation">{</span><span class="token operator">...</span>obj<span class="token punctuation">,</span> type<span class="token punctuation">,</span> props<span class="token punctuation">:</span> <span class="token punctuation">{</span><span class="token operator">...</span>props<span class="token punctuation">,</span> children<span class="token punctuation">}</span><span class="token punctuation">}</span><span class="token punctuation">;</span>    <span class="token comment" spellcheck="true">//把ref和key提取出来(并且删除props中的属性)</span>    <span class="token string">"key"</span> <span class="token keyword">in</span> obj<span class="token punctuation">.</span>props <span class="token operator">?</span> <span class="token punctuation">(</span>obj<span class="token punctuation">.</span>key <span class="token operator">=</span> obj<span class="token punctuation">.</span>props<span class="token punctuation">.</span>key<span class="token punctuation">,</span> <span class="token keyword">delete</span> obj<span class="token punctuation">.</span>props<span class="token punctuation">.</span>key<span class="token punctuation">)</span> <span class="token punctuation">:</span> <span class="token keyword">null</span><span class="token punctuation">;</span>    <span class="token string">"ref"</span> <span class="token keyword">in</span> obj<span class="token punctuation">.</span>props <span class="token operator">?</span> <span class="token punctuation">(</span>obj<span class="token punctuation">.</span>ref <span class="token operator">=</span> obj<span class="token punctuation">.</span>props<span class="token punctuation">.</span>ref<span class="token punctuation">,</span> <span class="token keyword">delete</span> obj<span class="token punctuation">.</span>props<span class="token punctuation">.</span>ref<span class="token punctuation">)</span> <span class="token punctuation">:</span> <span class="token keyword">null</span><span class="token punctuation">;</span>    <span class="token keyword">return</span> obj<span class="token punctuation">;</span><span class="token punctuation">}</span></code></pre><pre class=" language-javascript"><code class="language-javascript"><span class="token keyword">function</span> <span class="token function">render</span><span class="token punctuation">(</span>obj<span class="token punctuation">,</span> container<span class="token punctuation">,</span> callback<span class="token punctuation">)</span> <span class="token punctuation">{</span>    <span class="token keyword">let</span> <span class="token punctuation">{</span>type<span class="token punctuation">,</span> props<span class="token punctuation">}</span> <span class="token operator">=</span> obj <span class="token operator">||</span> <span class="token punctuation">{</span><span class="token punctuation">}</span><span class="token punctuation">,</span>        newElement <span class="token operator">=</span> document<span class="token punctuation">.</span><span class="token function">createElement</span><span class="token punctuation">(</span>type<span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token keyword">for</span> <span class="token punctuation">(</span><span class="token keyword">let</span> attr <span class="token keyword">in</span> props<span class="token punctuation">)</span> <span class="token punctuation">{</span>        <span class="token keyword">if</span> <span class="token punctuation">(</span>props<span class="token punctuation">.</span><span class="token function">hasOwnProperty</span><span class="token punctuation">(</span>attr<span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token keyword">break</span><span class="token punctuation">;</span><span class="token comment" spellcheck="true">//不是私有的直接结束遍历</span>        <span class="token keyword">if</span> <span class="token punctuation">(</span><span class="token operator">!</span>props<span class="token punctuation">[</span>attr<span class="token punctuation">]</span><span class="token punctuation">)</span> <span class="token keyword">continue</span><span class="token punctuation">;</span><span class="token comment" spellcheck="true">//如果当前属性没有值，直接不处理即可</span>        <span class="token keyword">let</span> value <span class="token operator">=</span> props<span class="token punctuation">[</span>attr<span class="token punctuation">]</span><span class="token punctuation">;</span>        <span class="token comment" spellcheck="true">//className的处理</span>        <span class="token keyword">if</span> <span class="token punctuation">(</span>attr <span class="token operator">===</span> <span class="token string">"className"</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>            newElement<span class="token punctuation">.</span><span class="token function">setAttribute</span><span class="token punctuation">(</span><span class="token string">"class"</span><span class="token punctuation">,</span> value<span class="token punctuation">)</span><span class="token punctuation">;</span>            <span class="token keyword">continue</span><span class="token punctuation">;</span>        <span class="token punctuation">}</span>        <span class="token comment" spellcheck="true">//style</span>        <span class="token keyword">if</span> <span class="token punctuation">(</span>attr <span class="token operator">===</span> <span class="token string">"style"</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>            <span class="token keyword">if</span> <span class="token punctuation">(</span>value <span class="token operator">===</span> <span class="token string">""</span><span class="token punctuation">)</span> <span class="token keyword">continue</span><span class="token punctuation">;</span>            <span class="token keyword">for</span> <span class="token punctuation">(</span><span class="token keyword">let</span> styKey <span class="token keyword">in</span> value<span class="token punctuation">)</span> <span class="token punctuation">{</span>                <span class="token keyword">if</span> <span class="token punctuation">(</span><span class="token operator">!</span>value<span class="token punctuation">.</span><span class="token function">hasOwnProperty</span><span class="token punctuation">(</span>styKey<span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token keyword">break</span><span class="token punctuation">;</span>                newElement<span class="token punctuation">[</span><span class="token string">'style'</span><span class="token punctuation">]</span><span class="token punctuation">[</span>styKey<span class="token punctuation">]</span> <span class="token operator">=</span> value<span class="token punctuation">[</span>styKey<span class="token punctuation">]</span><span class="token punctuation">;</span>            <span class="token punctuation">}</span>            <span class="token keyword">continue</span><span class="token punctuation">;</span>        <span class="token punctuation">}</span>        <span class="token comment" spellcheck="true">//children</span>        <span class="token keyword">if</span> <span class="token punctuation">(</span>attr <span class="token operator">===</span> <span class="token string">"children"</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>            <span class="token keyword">if</span> <span class="token punctuation">(</span><span class="token keyword">typeof</span> value <span class="token operator">===</span> <span class="token string">"string"</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>                <span class="token keyword">let</span> text <span class="token operator">=</span> document<span class="token punctuation">.</span><span class="token function">createTextNode</span><span class="token punctuation">(</span>value<span class="token punctuation">)</span><span class="token punctuation">;</span>                newElement<span class="token punctuation">.</span><span class="token function">appendChild</span><span class="token punctuation">(</span>text<span class="token punctuation">)</span><span class="token punctuation">;</span>            <span class="token punctuation">}</span>            <span class="token keyword">continue</span><span class="token punctuation">;</span>        <span class="token punctuation">}</span>        newElement<span class="token punctuation">.</span><span class="token function">setAttribute</span><span class="token punctuation">(</span>attr<span class="token punctuation">,</span> value<span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token comment" spellcheck="true">//基于setAttribute可以让设置的属性表现在HTML的结构上</span>    <span class="token punctuation">}</span>    container<span class="token punctuation">.</span><span class="token function">appendChild</span><span class="token punctuation">(</span>newElement<span class="token punctuation">)</span><span class="token punctuation">;</span>    callback <span class="token operator">&amp;&amp;</span> <span class="token function">callback</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token punctuation">}</span></code></pre><h3 id="React组件"><a href="#React组件" class="headerlink" title="React组件"></a>React组件</h3><p>不管是VUE还是REACT框架，设计之初都是期望我们按照<strong><code>组件/模块管理</code></strong>的方式来构建程序的，也就是把程序划分为一个个的组件来单独处理</p><ul><li>有助于多人协作开发</li><li>我们开发的组件可以被复用</li><li>……</li></ul><p>React中创建组件有两种方式:</p><ul><li>函数声明式组件</li><li>基于继承component类来创建组件</li></ul><p>src-&gt;components : 这个文件夹中存放的就是开发的组件</p><blockquote><p>知识点 : createElement在处理的时候，遇到一个组件，返回的对象中，type就不再是字符串标签名了，而是一个函数(类)，但是属性还是存在props中</p></blockquote><pre><code>{    type:Dialog    props:{        lx:1,        con:&quot;xxx&quot;,        children:一个值||一个数组    }}</code></pre><blockquote><p>render渲染的时候，我们需要做处理，首先判断type的类型，如果是字符串，就创建一个元素标签，如果是函数或者类，就把函数执行，把props中的每一项(包含children) 传递给函数</p><p>在执行函数的时候，把函数中return的JSX转换为新对象(createElement)，把这个对象返回;紧接着render按照以往的渲染方式，创建DOM元素，插入到指定的容器中即可</p></blockquote><h3 id="基于继承component类来创建组件"><a href="#基于继承component类来创建组件" class="headerlink" title="基于继承component类来创建组件"></a>基于继承component类来创建组件</h3><p>基于createElement把JSX转化为一个对象，当render渲染这个对象的时候，遇到type是一个函数或者类，不是直接创建元素，而是先把方法执行</p><p>如果就是函数式声明组件，就把它当做普通方法执行(方法中的this是undefined)，把函数返回的JSX元素(也是解析后的对象)进行渲染</p><p>如果是类声明式组件，会把当前类new它执行，创建类的一个实例(当前本次调取的组件就是它的实例)，执行contructor之后，会执行this.render(),把render返回的JSX拿过来渲染，所以<strong><code>类声明式组件</code></strong>，必须有一个render的方法，方法中<strong><code>需要返回一个JSX元素</code></strong></p><p>但是不管是哪一种方式，最后都会把解析出来的props属性对象作为实参传递给对应的函数或者类</p><blockquote><p>总结<br>创建组件有两种方式，<code>函数式</code>和<code>创建类式</code></p></blockquote><p> [函数式]</p><ul><li>1.操作很简单</li><li>2.功能也简单，简单的调取,简单的返回</li></ul><p>[创建类式]</p><ul><li>1.操作相对复杂一点，但是也可以实现更为复杂的业务功能</li><li>2.能够使用声明周期函数操作业务<ul><li>3.函数式可以理解为静态组件(组件中的内容调取的时候就已经固定了，很难再修改)，而类这种方式，可以基于组件内容的状态来动态更新渲染的内容</li></ul></li></ul><h3 id="组件的属性和状态"><a href="#组件的属性和状态" class="headerlink" title="组件的属性和状态"></a>组件的属性和状态</h3><p>React中有两个非常重要的概念</p><ul><li>1.组件的属性 : [只读] 调取组件的时候传递进来的信息</li><li>2.组件的状态 : [读写] 自己在组件中设定和规划的(只有类声明式组件才有状态的管控，函数式声明组件不存在状态的管理)</li></ul><pre class=" language-javascript"><code class="language-javascript"><span class="token keyword">function</span> <span class="token function">Clock</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>    <span class="token keyword">return</span> <span class="token operator">&lt;</span>section<span class="token operator">></span>        <span class="token operator">&lt;</span>h3<span class="token operator">></span>当前北京时间为<span class="token punctuation">:</span><span class="token operator">&lt;</span><span class="token operator">/</span>h3<span class="token operator">></span>        <span class="token operator">&lt;</span>div style<span class="token operator">=</span><span class="token punctuation">{</span><span class="token punctuation">{</span>color<span class="token punctuation">:</span><span class="token string">"lightblue"</span><span class="token punctuation">,</span>fontWeight<span class="token punctuation">:</span><span class="token string">"bold"</span><span class="token punctuation">}</span><span class="token punctuation">}</span><span class="token operator">></span><span class="token punctuation">{</span><span class="token keyword">new</span> <span class="token class-name">Date</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">toLocaleString</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">}</span><span class="token operator">&lt;</span><span class="token operator">/</span>div<span class="token operator">></span>    <span class="token operator">&lt;</span><span class="token operator">/</span>section<span class="token operator">></span><span class="token punctuation">}</span>window<span class="token punctuation">.</span><span class="token function">setInterval</span><span class="token punctuation">(</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token operator">=</span><span class="token operator">></span><span class="token punctuation">{</span>    <span class="token comment" spellcheck="true">//每隔一秒钟重新调取组件，然后渲染到页面中</span>    ReactDOM<span class="token punctuation">.</span><span class="token function">render</span><span class="token punctuation">(</span><span class="token operator">&lt;</span>Clock<span class="token operator">/</span><span class="token operator">></span><span class="token punctuation">,</span> root<span class="token punctuation">)</span><span class="token punctuation">}</span><span class="token punctuation">,</span> <span class="token number">1000</span><span class="token punctuation">)</span><span class="token punctuation">;</span></code></pre><p>所谓函数式组件是静态组件 : 和执行普通方法一样，调取一次组件，就把组件的内容获取到，插入到页面当中，如果不重新调取组件，显示的内容是不会发生任何改变的</p><blockquote><p>真实项目中只有调取组件，组件中的内容不会再次改变的情况下，我们才可能使用函数式组件</p></blockquote><blockquote><p>组件的状态类似于Vue中的数据驱动 : 我们数据绑定的时候是基于状态值绑定，当修改组件内部状态后，对应的JSX元素也会跟着重新渲染(差异渲染 : 值把数据改变的部分重新渲染，基于dom-diff算法完成的)</p><p>当代框架最重要的核心思想就是<strong><code>数据操控视图(视图改变数据)</code></strong>,告别jQuery手动操作DOM的时代，我们以后只需要改变数据，框架会帮我们重新渲染改变视图，从而减少直接操作DOM，提高性能，也有助于开发效率</p></blockquote><pre class=" language-javascript"><code class="language-javascript"><span class="token keyword">class</span> <span class="token class-name">Clock</span> <span class="token keyword">extends</span> <span class="token class-name">React<span class="token punctuation">.</span>Component</span> <span class="token punctuation">{</span>    <span class="token function">constructor</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>        <span class="token keyword">super</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token comment" spellcheck="true">//初始化组件的状态(都是对象类型的):要求我们在constructor中需要把后期使用的状态信息全部初始化一下(约定俗成)</span>        <span class="token keyword">this</span><span class="token punctuation">.</span>state <span class="token operator">=</span> <span class="token punctuation">{</span>            time<span class="token punctuation">:</span> <span class="token keyword">new</span> <span class="token class-name">Date</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">toLocaleString</span><span class="token punctuation">(</span><span class="token punctuation">)</span>        <span class="token punctuation">}</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span>    <span class="token function">componentDidMount</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>        <span class="token comment" spellcheck="true">//React声明周期函数之一:第一次组件渲染完成后触发(我们在这里只需要间隔1秒把state状态中的time数据改变，这样React会自动帮我们把组件中部分内容重新渲染)</span>        <span class="token comment" spellcheck="true">//React中虽然下面方式可以修改状态，但是并不会通知React重新渲染页面，所以不能这么操作和修改状态</span>            <span class="token comment" spellcheck="true">//this.state.time = new Date().toLocaleString();</span>        <span class="token function">setInterval</span><span class="token punctuation">(</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">=</span><span class="token operator">></span> <span class="token punctuation">{</span>            <span class="token comment" spellcheck="true">//修改组件的状态</span>            <span class="token comment" spellcheck="true">//1.修改部分状态:会用我们传递的对象和初始化的state进行匹配，只把我们传递的属性进行修改，没有传递的依然保留原始的状态信息(部分无法修改)</span>            <span class="token comment" spellcheck="true">//2.当状态修改完成，会通知React，把组件JSX中的部分元素重新进行渲染</span>            <span class="token keyword">this</span><span class="token punctuation">.</span><span class="token function">setState</span><span class="token punctuation">(</span><span class="token punctuation">{</span>                time<span class="token punctuation">:</span> <span class="token keyword">new</span> <span class="token class-name">Date</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">toLocaleString</span><span class="token punctuation">(</span><span class="token punctuation">)</span>            <span class="token punctuation">}</span><span class="token punctuation">,</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token operator">=</span><span class="token operator">></span><span class="token punctuation">{</span>                <span class="token comment" spellcheck="true">//当通知React把需要重新渲染的JSX元素渲染完成后，执行的回调操作(类似于声明周期函数中的componentDidUpdate，项目中一般使用钩子函数，而不是这个回调)</span>                <span class="token comment" spellcheck="true">//=>设置回调函数是因为setState是一个异步操作，基于async和await可以把异步的变为类似于同步</span>            <span class="token punctuation">}</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token punctuation">}</span><span class="token punctuation">,</span> <span class="token number">1000</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token punctuation">}</span>    <span class="token function">render</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>        <span class="token keyword">return</span> <span class="token operator">&lt;</span>section<span class="token operator">></span>            <span class="token operator">&lt;</span>h3<span class="token operator">></span>当前北京时间为<span class="token punctuation">:</span><span class="token operator">&lt;</span><span class="token operator">/</span>h3<span class="token operator">></span>            <span class="token operator">&lt;</span>div style<span class="token operator">=</span><span class="token punctuation">{</span><span class="token punctuation">{</span>color<span class="token punctuation">:</span> <span class="token string">"lightblue"</span><span class="token punctuation">,</span> fontWeight<span class="token punctuation">:</span> <span class="token string">"bold"</span><span class="token punctuation">}</span><span class="token punctuation">}</span><span class="token operator">></span>                <span class="token punctuation">{</span><span class="token comment" spellcheck="true">/*获取组装件的状态信息*/</span><span class="token punctuation">}</span>                <span class="token punctuation">{</span><span class="token keyword">this</span><span class="token punctuation">.</span>state<span class="token punctuation">.</span>time<span class="token punctuation">}</span>                <span class="token operator">&lt;</span><span class="token operator">/</span>div<span class="token operator">></span>        <span class="token operator">&lt;</span><span class="token operator">/</span>section<span class="token operator">></span>    <span class="token punctuation">}</span><span class="token punctuation">}</span>ReactDOM<span class="token punctuation">.</span><span class="token function">render</span><span class="token punctuation">(</span><span class="token operator">&lt;</span>Clock<span class="token operator">/</span><span class="token operator">></span><span class="token punctuation">,</span> root<span class="token punctuation">)</span><span class="token punctuation">;</span></code></pre><h3 id="JSX中的事件绑定"><a href="#JSX中的事件绑定" class="headerlink" title="JSX中的事件绑定"></a>JSX中的事件绑定</h3><pre class=" language-javascript"><code class="language-javascript"><span class="token function">render</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">{</span><span class="token comment" spellcheck="true">//this:当前类的实例  this.support.bind(this)</span>     <span class="token operator">&lt;</span>button className<span class="token operator">=</span><span class="token string">"btn btn-success"</span> onClick<span class="token operator">=</span><span class="token punctuation">{</span><span class="token keyword">this</span><span class="token punctuation">.</span>support<span class="token punctuation">}</span><span class="token operator">></span>支持<span class="token operator">&lt;</span><span class="token operator">/</span>button<span class="token operator">></span><span class="token punctuation">}</span><span class="token function">support</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">{</span><span class="token comment" spellcheck="true">//this:undefined</span><span class="token comment" spellcheck="true">//ev.target:通过事件源可以获取当前操作的元素(一般很少操作，一般框架是数据驱动所有DOM的改变)</span><span class="token punctuation">}</span></code></pre><p>如果能让方法中的this变成当前类的实例就好了，这样可以操作属性和状态等信息</p><pre class=" language-javascript"><code class="language-javascript">support<span class="token operator">=</span>ev<span class="token operator">=</span><span class="token operator">></span><span class="token punctuation">{</span>    <span class="token comment" spellcheck="true">//this:继承上下文中的this(实例)，真实项目中，给JSX元素绑定的事件方法一般都是箭头函数，目的是为了保证函数中的this还是实例</span><span class="token punctuation">}</span></code></pre><p> 受控组件 : 数据管控的组件<br> 非受控组件 : 不受数据管控的组件</p><blockquote><p>在React中</p><ul><li><p>1.基于数据驱动(修改状态数据，React帮助我们重新渲染视图)完成的组件叫做<strong><code>受控组件</code></strong></p></li><li><p>2.通过ref操作DOM实现视图更新的，叫做<strong><code>非受控组件</code></strong></p></li></ul><p>真实项目中尽量多使用受控组件</p></blockquote><p>VUE : [MVVM]  数据更改视图也跟着更改，视图更改数据也跟着更改(双向数据绑定)<br>REACT : [MVC] 数据更改视图跟着更改(原本是单向数据绑定,但是我们可以自己构建出双向的效果)</p><h3 id="React中的生命周期函数"><a href="#React中的生命周期函数" class="headerlink" title="React中的生命周期函数"></a>React中的生命周期函数</h3><blockquote><p>所谓生命周期函数(钩子函数) : 描述一个组件或者程序从创建到销毁的过程，我们可以在过程中间基于钩子函数来完成一些自己的操作，例如 : 在第一次渲染完成做什么，或者第二次即将重新渲染之前做什么等</p></blockquote><p>[基本流程]<br>    constructor 创建一个组件<br>    |<br>    componentWillMount  第一次渲染之前<br>    |<br>    render 第一次渲染<br>    |<br>    componentDidMount  第一次渲染之后<br>[修改流程]<br>当组件的状态数据发生改变(setState)或者传递给组件的属性发生改变(重新调用组件传递不通的属性都会引发render重新渲染(差异渲染)<br>    shouldComponentUpdate : 是否允许组件重新渲染(允许则执行后面函数，不允许直接结束即可)<br>    |<br>    componentWillUpdate : 重新渲染之前<br>    |<br>    render  第二次及以后重新渲染<br>    |<br>    componentDidUpdate : 重新渲染之后<br>[componentWillReceiveProps]父组件把传递给子组件的属性 发生改变后触发的钩子函数</p><p>[卸载]<br>原有渲染的是不消失的，只不过以后不能基于数据改变视图了<br>    componentWillUnmount : 卸载组件之前(一般不用)</p><pre class=" language-javascript"><code class="language-javascript"><span class="token keyword">function</span> <span class="token function">queryData</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>    <span class="token keyword">return</span> <span class="token keyword">new</span> <span class="token class-name">Promise</span><span class="token punctuation">(</span>resolve <span class="token operator">=</span><span class="token operator">></span> <span class="token punctuation">{</span>        <span class="token function">setTimeout</span><span class="token punctuation">(</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token operator">=</span><span class="token operator">></span><span class="token punctuation">{</span>            <span class="token function">resolve</span><span class="token punctuation">(</span><span class="token number">200</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token punctuation">}</span><span class="token punctuation">,</span><span class="token number">3000</span><span class="token punctuation">)</span>    <span class="token punctuation">}</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token punctuation">}</span><span class="token keyword">class</span> <span class="token class-name">A</span> <span class="token keyword">extends</span> <span class="token class-name">React<span class="token punctuation">.</span>Component</span><span class="token punctuation">{</span>    <span class="token comment" spellcheck="true">// static default = {};//这个是第一个执行的,执行完成(给属性设置默认值后)才向下执行</span>    <span class="token function">constructor</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">{</span>        <span class="token keyword">super</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span><span class="token string">"1-constructor"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token keyword">this</span><span class="token punctuation">.</span>state<span class="token operator">=</span><span class="token punctuation">{</span>            n<span class="token punctuation">:</span> <span class="token number">1</span>        <span class="token punctuation">}</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span>    <span class="token comment" spellcheck="true">/*componentWillMount(){        console.log("2-willMount: 第一次渲染之前",this.refs.div);//undefined        //在willMount中，如果直接的setState修改数据，会把状态信息改变后，然后render和didMount;但是如果setState是放到一个异步操作中完成(例如:定时器或者从服务器获取数据)，也是先执行render和did，然后在执行这个异步操作修改状态，紧接着走修改的流程(这样和放到didMount中没有区别)，所以我们一般吧数据请求放到did中处理        //=>真实项目中的数据绑定，一般第一次组件渲染，我们都是绑定的默认数据，第二次才是绑定的从服务器获取的数据(有些需求我们需要根据数据是否存在判断显示隐藏)        this.setState({n: 2})    }*/</span>    <span class="token keyword">async</span> <span class="token function">componentWillMount</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">{</span>        console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span><span class="token string">"2-willMount"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>     <span class="token keyword">let</span> res <span class="token operator">=</span>  <span class="token keyword">await</span> <span class="token function">queryData</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>     <span class="token keyword">this</span><span class="token punctuation">.</span><span class="token function">setState</span><span class="token punctuation">(</span><span class="token punctuation">{</span>n<span class="token punctuation">:</span> res<span class="token punctuation">}</span><span class="token punctuation">)</span>    <span class="token punctuation">}</span>    <span class="token function">componentDidMount</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">{</span>        console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span><span class="token string">"4-didMount: 第一次渲染之后"</span><span class="token punctuation">,</span> <span class="token keyword">this</span><span class="token punctuation">.</span>refs<span class="token punctuation">.</span>div<span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token comment" spellcheck="true">//div</span>        <span class="token comment" spellcheck="true">/*         * 真实项目中在这个阶段一般做如下处理:         *    1.控制状态信息更改的操作         *    2.从服务器获取数据，然后修改状态信息，完成数据绑定         */</span>        <span class="token function">setInterval</span><span class="token punctuation">(</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">=</span><span class="token operator">></span> <span class="token punctuation">{</span>            <span class="token keyword">this</span><span class="token punctuation">.</span><span class="token function">setState</span><span class="token punctuation">(</span><span class="token punctuation">{</span>n<span class="token punctuation">:</span> <span class="token keyword">this</span><span class="token punctuation">.</span>state<span class="token punctuation">.</span>n <span class="token operator">+</span> <span class="token number">1</span><span class="token punctuation">}</span><span class="token punctuation">)</span>        <span class="token punctuation">}</span><span class="token punctuation">,</span> <span class="token number">5000</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span>    <span class="token function">shouldComponentUpdate</span><span class="token punctuation">(</span>nextProps<span class="token punctuation">,</span>nextState<span class="token punctuation">)</span> <span class="token punctuation">{</span>        <span class="token comment" spellcheck="true">//在这个钩子函数中，我们获取的state不是最新修改的，而是上一次的state</span>        <span class="token comment" spellcheck="true">//例如:第一次加载完成，五秒后，我们基于setState把b修改为2，但是此处获取的还是1</span>        <span class="token comment" spellcheck="true">//但是这个方法有两个参数</span>        <span class="token comment" spellcheck="true">//nextProps:最新修改的属性</span>        <span class="token comment" spellcheck="true">//nextState:最新修改的状态信息</span>        console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span><span class="token string">"5-是否允许更新，函数返回true允许，反之false不允许"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token keyword">return</span> nextState<span class="token punctuation">.</span>n <span class="token operator">></span> <span class="token number">3</span> <span class="token operator">?</span> <span class="token boolean">false</span> <span class="token punctuation">:</span> <span class="token boolean">true</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span>    <span class="token function">componentWillUpdate</span><span class="token punctuation">(</span>nextProps<span class="token punctuation">,</span>nextState<span class="token punctuation">)</span> <span class="token punctuation">{</span>        <span class="token comment" spellcheck="true">// console.log(this.state.n);//这里获取的是更新之前的(和should相同，也有两个参数存储最新的信息-)</span>        console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span><span class="token string">"6-组件更新之前"</span><span class="token punctuation">)</span>    <span class="token punctuation">}</span>    <span class="token function">componentDidUpdate</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">{</span>        <span class="token comment" spellcheck="true">// console.log(this.state.n);这里获取的状态是更新之后的</span>        console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span><span class="token string">"8-组件更新之后，因为7是render"</span><span class="token punctuation">)</span>    <span class="token punctuation">}</span>    <span class="token function">componentWillReceiveProps</span><span class="token punctuation">(</span>nextProps<span class="token punctuation">,</span> nextState<span class="token punctuation">)</span> <span class="token punctuation">{</span>        console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span><span class="token string">"组件属性改变 "</span><span class="token punctuation">,</span> <span class="token keyword">this</span><span class="token punctuation">.</span>props<span class="token punctuation">.</span>n<span class="token punctuation">,</span> nextProps<span class="token punctuation">.</span>n<span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token comment" spellcheck="true">//属性改变也会触发子组件重新渲染，继续完成修改这套流程</span>    <span class="token punctuation">}</span>    <span class="token function">render</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>        console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span><span class="token string">"render"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token keyword">return</span> <span class="token operator">&lt;</span>div ref<span class="token operator">=</span><span class="token string">"div"</span> style<span class="token operator">=</span><span class="token punctuation">{</span><span class="token punctuation">{</span>textAlign<span class="token punctuation">:</span><span class="token string">"center"</span><span class="token punctuation">,</span>fontSize<span class="token punctuation">:</span><span class="token string">"30px"</span><span class="token punctuation">}</span><span class="token punctuation">}</span><span class="token operator">></span><span class="token punctuation">{</span><span class="token keyword">this</span><span class="token punctuation">.</span>state<span class="token punctuation">.</span>n<span class="token punctuation">}</span><span class="token operator">&lt;</span><span class="token operator">/</span>div<span class="token operator">></span>    <span class="token punctuation">}</span><span class="token punctuation">}</span>ReactDOM<span class="token punctuation">.</span><span class="token function">render</span><span class="token punctuation">(</span><span class="token operator">&lt;</span>A<span class="token operator">/</span><span class="token operator">></span><span class="token punctuation">,</span> root<span class="token punctuation">)</span><span class="token punctuation">;</span></code></pre>]]></content>
      
      
      <categories>
          
          <category> 前端 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 前端 </tag>
            
            <tag> React </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>数组对象好用的方法</title>
      <link href="/2018/03/09/es6/"/>
      <url>/2018/03/09/es6/</url>
      
        <content type="html"><![CDATA[<h3 id="ES6-不常用且好用的-数组对象中新增的方法"><a href="#ES6-不常用且好用的-数组对象中新增的方法" class="headerlink" title="ES6(不常用且好用的)数组对象中新增的方法"></a>ES6(不常用且好用的)数组对象中新增的方法</h3><p>isArray,isObject : 判断是不是一个数组 / 对象</p><h3 id="数组方法"><a href="#数组方法" class="headerlink" title="数组方法"></a>数组方法</h3><blockquote><ul><li>map() : 返回一个新的数组，参数接收一个函数</li></ul></blockquote><pre class=" language-javascript"><code class="language-javascript">    <span class="token keyword">let</span> ary <span class="token operator">=</span> <span class="token punctuation">[</span><span class="token number">1</span><span class="token punctuation">,</span> <span class="token number">2</span><span class="token punctuation">,</span> <span class="token number">3</span><span class="token punctuation">,</span> <span class="token number">4</span><span class="token punctuation">,</span> <span class="token number">5</span><span class="token punctuation">,</span> <span class="token number">6</span><span class="token punctuation">,</span> <span class="token number">7</span><span class="token punctuation">]</span><span class="token punctuation">;</span>    <span class="token keyword">let</span> newAry <span class="token operator">=</span> ary<span class="token punctuation">.</span><span class="token function">map</span><span class="token punctuation">(</span><span class="token punctuation">(</span>value<span class="token punctuation">,</span> index<span class="token punctuation">,</span> arr<span class="token punctuation">)</span> <span class="token operator">=</span><span class="token operator">></span> value<span class="token punctuation">)</span><span class="token punctuation">;</span>    console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span>newAry<span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token comment" spellcheck="true">//[1, 2, 3, 4, 5, 6, 7]</span></code></pre><blockquote><ul><li>filter() : 过滤，返回为true的值</li></ul></blockquote><pre class=" language-javascript"><code class="language-javascript"><span class="token keyword">let</span> arr<span class="token operator">=</span><span class="token punctuation">[</span><span class="token number">1</span><span class="token punctuation">,</span><span class="token number">2</span><span class="token punctuation">,</span><span class="token number">3</span><span class="token punctuation">,</span><span class="token number">4</span><span class="token punctuation">,</span><span class="token number">3</span><span class="token punctuation">,</span><span class="token number">2</span><span class="token punctuation">,</span><span class="token number">1</span><span class="token punctuation">,</span><span class="token number">2</span><span class="token punctuation">]</span><span class="token punctuation">;</span><span class="token keyword">let</span> newArr1<span class="token operator">=</span>arr<span class="token punctuation">.</span><span class="token function">filter</span><span class="token punctuation">(</span><span class="token punctuation">(</span>value<span class="token punctuation">,</span>index<span class="token punctuation">,</span>arr<span class="token punctuation">)</span><span class="token operator">=</span><span class="token operator">></span>value<span class="token operator">>=</span><span class="token number">3</span><span class="token punctuation">)</span>console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span>newArr1<span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token comment" spellcheck="true">//输出[3,4,3]</span></code></pre><blockquote><ul><li>reduce : 第一个参数也是函数，接受四个参数(上一次return的值，当前项的值，当前位置，原数组)，刚开始遍历，默认前一项值是第一项值，当前项是第二项值，reduce还接受第二个参数，给前一项值设置初始值，此时的函数中的当前值就是从第一项开始</li><li>reduceRight : reduce是从左到右遍历，reduceRight是从右向左遍历</li></ul></blockquote><pre class=" language-javascript"><code class="language-javascript"><span class="token comment" spellcheck="true">//以前找最大值,最小值我们是用的2层循环来找的,现在直接一行代码搞定,是不是很爽</span><span class="token keyword">let</span> arr<span class="token operator">=</span><span class="token punctuation">[</span><span class="token number">1</span><span class="token punctuation">,</span><span class="token number">2</span><span class="token punctuation">,</span><span class="token number">3</span><span class="token punctuation">,</span><span class="token number">4</span><span class="token punctuation">,</span><span class="token number">3</span><span class="token punctuation">,</span><span class="token number">2</span><span class="token punctuation">,</span><span class="token number">1</span><span class="token punctuation">,</span><span class="token number">2</span><span class="token punctuation">]</span><span class="token punctuation">;</span><span class="token keyword">let</span> newArr2<span class="token operator">=</span>arr<span class="token punctuation">.</span><span class="token function">reduce</span><span class="token punctuation">(</span><span class="token punctuation">(</span>pre<span class="token punctuation">,</span>cur<span class="token punctuation">,</span>curIndex<span class="token punctuation">,</span>arr<span class="token punctuation">)</span><span class="token operator">=</span><span class="token operator">></span>pre<span class="token operator">></span>cur<span class="token operator">?</span>pre<span class="token punctuation">:</span>cur<span class="token punctuation">)</span><span class="token comment" spellcheck="true">//pre=1不大于cur=2,返回2;</span><span class="token comment" spellcheck="true">//pre接收返回值2;pre=2不大于cur=3,返回3</span><span class="token operator">...</span><span class="token punctuation">.</span><span class="token punctuation">.</span><span class="token comment" spellcheck="true">//一直找到4并且返回4;</span><span class="token comment" spellcheck="true">//pre接收4,pre=4大于pre=3然后就一直返回的都是4,这样就会找到最大值</span>console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span>newArr2<span class="token punctuation">)</span><span class="token comment" spellcheck="true">//输出4,找到最大值,如果想找最小值只需要pre&lt;cur?pre:cur</span></code></pre><blockquote><p>Array.from() : 把一个类似数组或可以迭代的对象中创建一个新的数组实例,它接收三个参数，第一个是想要转换的数组或者对象，第二个类似于数组的map方法，对每个元素进行处理再返回，第三个参数是改变第二个参数中的this</p></blockquote><pre class=" language-javascript"><code class="language-javascript">      <span class="token keyword">let</span> list <span class="token operator">=</span> document<span class="token punctuation">.</span><span class="token function">querySelectorAll</span><span class="token punctuation">(</span><span class="token string">"*"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span>Array<span class="token punctuation">.</span><span class="token keyword">from</span><span class="token punctuation">(</span>list<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token comment" spellcheck="true">//[html, head, meta, title, body, script]</span>    <span class="token keyword">let</span> <span class="token keyword">set</span> <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">Set</span><span class="token punctuation">(</span><span class="token punctuation">[</span><span class="token number">1</span><span class="token punctuation">,</span> <span class="token number">2</span><span class="token punctuation">,</span> <span class="token number">3</span><span class="token punctuation">,</span> <span class="token number">4</span><span class="token punctuation">,</span> <span class="token number">5</span><span class="token punctuation">,</span> <span class="token number">6</span><span class="token punctuation">,</span> <span class="token number">7</span><span class="token punctuation">,</span> <span class="token number">8</span><span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span>Array<span class="token punctuation">.</span><span class="token keyword">from</span><span class="token punctuation">(</span><span class="token keyword">set</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token comment" spellcheck="true">//[1, 2, 3, 4, 5, 6, 7, 8]</span>    <span class="token comment" spellcheck="true">//他们的__proto__都指向Array的原型</span></code></pre><blockquote><p>Array.of() : 将一组值转换为数组,解决了构造函数方式创建数组传一个参数异常的问题</p></blockquote><pre class=" language-javascript"><code class="language-javascript">  console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span>Array<span class="token punctuation">.</span><span class="token keyword">of</span><span class="token punctuation">(</span><span class="token number">1</span><span class="token punctuation">,</span> <span class="token number">2</span><span class="token punctuation">,</span> <span class="token number">3</span><span class="token punctuation">,</span> <span class="token number">4</span><span class="token punctuation">,</span> <span class="token number">6</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token comment" spellcheck="true">// [1, 2, 3, 4, 6]</span>  console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span>Array<span class="token punctuation">.</span><span class="token keyword">of</span><span class="token punctuation">(</span><span class="token number">1</span><span class="token punctuation">,</span> <span class="token number">2</span><span class="token punctuation">,</span> <span class="token number">3</span><span class="token punctuation">,</span> <span class="token number">4</span><span class="token punctuation">,</span> <span class="token number">6</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token comment" spellcheck="true">// [1, 2, 3, 4, 6]</span>  console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span><span class="token keyword">new</span> <span class="token class-name">Array</span><span class="token punctuation">(</span><span class="token number">6</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token comment" spellcheck="true">//[empty × 6]</span>  console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span>Array<span class="token punctuation">.</span><span class="token keyword">of</span><span class="token punctuation">(</span><span class="token number">6</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token comment" spellcheck="true">//[6]</span></code></pre><blockquote><p>copyWidthin() : copyWidthin方法可以在当前数组内部，将指定位置的数组项复制到其他位置(会覆盖原数组项)，然后返回当前数组。使用copyWidthin方法会修改当前数组。</p></blockquote><pre class=" language-javascript"><code class="language-javascript">Array<span class="token punctuation">.</span>prototype<span class="token punctuation">.</span><span class="token function">copyWithin</span><span class="token punctuation">(</span>target<span class="token punctuation">,</span> start <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">,</span> end <span class="token operator">=</span> <span class="token keyword">this</span><span class="token punctuation">.</span>length<span class="token punctuation">)</span>target<span class="token punctuation">:</span> 这个参数是必须的，从该位置开始替换数组项start<span class="token punctuation">:</span> 这是一个可选参数，从该位置开始读取数组项，默认为<span class="token number">0</span>，如果为负值，表示从数组的右边向左开始读取end<span class="token punctuation">:</span> 这是一个可选参数，到该位置停止读取的数组项，默认等于Array<span class="token punctuation">.</span>length。如果为负值，表示倒数<span class="token operator">--</span><span class="token operator">--</span><span class="token operator">--</span><span class="token operator">--</span><span class="token operator">--</span><span class="token operator">-</span>items<span class="token punctuation">.</span><span class="token function">copyWithin</span><span class="token punctuation">(</span><span class="token number">6</span><span class="token punctuation">,</span> <span class="token number">1</span><span class="token punctuation">,</span> <span class="token number">3</span><span class="token punctuation">)</span><span class="token comment" spellcheck="true">// &lt;- [1, 2, 3, undefined × 3, 2, 3, undefined × 2]</span></code></pre><blockquote><ul><li>Array.prototype.fill方法使用给定的值填充一个数组:用于空数组的初始化很方便，数组中已经有的元素会全部抹去，Array.prototype.fill方法还可以接受第二个和第三个参数，用于指定填充的起始位置和结束位置。</li></ul></blockquote><pre class=" language-javascript"><code class="language-javascript"><span class="token keyword">let</span> ary <span class="token operator">=</span> <span class="token punctuation">[</span><span class="token number">1</span><span class="token punctuation">,</span> <span class="token number">2</span><span class="token punctuation">,</span> <span class="token number">3</span><span class="token punctuation">,</span> <span class="token number">4</span><span class="token punctuation">,</span> <span class="token number">5</span><span class="token punctuation">,</span> <span class="token number">6</span><span class="token punctuation">,</span> <span class="token punctuation">,</span> <span class="token punctuation">,</span> <span class="token punctuation">,</span> <span class="token punctuation">,</span><span class="token punctuation">]</span><span class="token punctuation">;</span>ary<span class="token punctuation">.</span><span class="token function">fill</span><span class="token punctuation">(</span><span class="token number">3</span><span class="token punctuation">,</span><span class="token number">6</span><span class="token punctuation">,</span><span class="token number">8</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token comment" spellcheck="true">//(10) [1, 2, 3, 4, 5, 6, 3, 3, empty × 2]</span>console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span>ary<span class="token punctuation">)</span><span class="token punctuation">;</span></code></pre><blockquote><ul><li>find() : 用于找出第一个符合条件的数组成员。它的参数是一个回调函数，所有数组成员依次执行该回调函数，直到找出第一个返回值为true的数组项，然后返回该数组项。如果没有符合条件的数组项，则返回undefined。</li></ul></blockquote><pre class=" language-javascript"><code class="language-javascript"><span class="token punctuation">[</span><span class="token number">1</span><span class="token punctuation">,</span> <span class="token number">2</span><span class="token punctuation">,</span> <span class="token number">3</span><span class="token punctuation">,</span> <span class="token number">4</span><span class="token punctuation">,</span> <span class="token number">5</span><span class="token punctuation">]</span><span class="token punctuation">.</span><span class="token function">find</span><span class="token punctuation">(</span>item <span class="token operator">=</span><span class="token operator">></span> item <span class="token operator">></span> <span class="token number">2</span><span class="token punctuation">)</span><span class="token comment" spellcheck="true">//3</span><span class="token punctuation">[</span><span class="token number">1</span><span class="token punctuation">,</span> <span class="token number">2</span><span class="token punctuation">,</span> <span class="token number">3</span><span class="token punctuation">,</span> <span class="token number">4</span><span class="token punctuation">,</span> <span class="token number">5</span><span class="token punctuation">]</span><span class="token punctuation">.</span><span class="token function">find</span><span class="token punctuation">(</span><span class="token punctuation">(</span>item<span class="token punctuation">,</span> i<span class="token punctuation">)</span> <span class="token operator">=</span><span class="token operator">></span> i <span class="token operator">===</span> <span class="token number">3</span><span class="token punctuation">)</span><span class="token comment" spellcheck="true">//4</span><span class="token punctuation">[</span><span class="token number">1</span><span class="token punctuation">,</span> <span class="token number">2</span><span class="token punctuation">,</span> <span class="token number">3</span><span class="token punctuation">,</span><span class="token number">5</span><span class="token punctuation">]</span><span class="token punctuation">.</span><span class="token function">find</span><span class="token punctuation">(</span>item <span class="token operator">=</span><span class="token operator">></span> item <span class="token operator">===</span> <span class="token number">Infinity</span><span class="token punctuation">)</span><span class="token comment" spellcheck="true">//undefined</span></code></pre><blockquote><ul><li>findIndex() : 用来返回数组项在数组中的位置。其和Array.prototype.find方法非常类似，接受一个回调函数，如果符合回调函数的条件，则返回数组项在数组中的位置，如果所有数组项都不符合回调函数条件，则会返回-1。</li></ul></blockquote><pre class=" language-javascript"><code class="language-javascript"><span class="token punctuation">[</span><span class="token number">1</span><span class="token punctuation">,</span> <span class="token number">2</span><span class="token punctuation">,</span> <span class="token number">3</span><span class="token punctuation">,</span> <span class="token number">4</span><span class="token punctuation">,</span> <span class="token number">5</span><span class="token punctuation">]</span><span class="token punctuation">.</span><span class="token function">findIndex</span><span class="token punctuation">(</span>item <span class="token operator">=</span><span class="token operator">></span> item <span class="token operator">></span> <span class="token number">2</span><span class="token punctuation">)</span><span class="token comment" spellcheck="true">//2</span><span class="token punctuation">[</span><span class="token number">1</span><span class="token punctuation">,</span> <span class="token number">2</span><span class="token punctuation">,</span> <span class="token number">3</span><span class="token punctuation">,</span> <span class="token number">4</span><span class="token punctuation">,</span> <span class="token number">5</span><span class="token punctuation">]</span><span class="token punctuation">.</span><span class="token function">findIndex</span><span class="token punctuation">(</span><span class="token punctuation">(</span>item<span class="token punctuation">,</span> i<span class="token punctuation">)</span> <span class="token operator">=</span><span class="token operator">></span> i <span class="token operator">===</span> <span class="token number">3</span><span class="token punctuation">)</span><span class="token comment" spellcheck="true">//3</span><span class="token punctuation">[</span><span class="token number">1</span><span class="token punctuation">,</span> <span class="token number">2</span><span class="token punctuation">,</span> <span class="token number">3</span><span class="token punctuation">,</span> <span class="token number">4</span><span class="token punctuation">,</span> <span class="token number">5</span><span class="token punctuation">]</span><span class="token punctuation">.</span><span class="token function">findIndex</span><span class="token punctuation">(</span>item <span class="token operator">=</span><span class="token operator">></span> item <span class="token operator">===</span> <span class="token number">Infinity</span><span class="token punctuation">)</span><span class="token comment" spellcheck="true">//-1</span></code></pre><h2 id="ES6中的遍历方法"><a href="#ES6中的遍历方法" class="headerlink" title="ES6中的遍历方法"></a>ES6中的遍历方法</h2><blockquote><p>entries()、keys()和values()，用来遍历数组。它们都返回一个遍历器对象，可以用for…of循环进行遍历，唯一的区别是keys()是对数组的键名的遍历、values()是对数组键值的遍历，entries()方法是对数值的键值对的遍历。</p></blockquote><pre class=" language-javascript"><code class="language-javascript"><span class="token keyword">for</span> <span class="token punctuation">(</span><span class="token keyword">let</span> index <span class="token keyword">of</span> <span class="token punctuation">[</span><span class="token string">'a'</span><span class="token punctuation">,</span> <span class="token string">'b'</span><span class="token punctuation">]</span><span class="token punctuation">.</span><span class="token function">keys</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span>index<span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token punctuation">}</span><span class="token comment" spellcheck="true">// 0</span><span class="token comment" spellcheck="true">// 1</span><span class="token keyword">for</span> <span class="token punctuation">(</span><span class="token keyword">let</span> elem <span class="token keyword">of</span> <span class="token punctuation">[</span><span class="token string">'a'</span><span class="token punctuation">,</span> <span class="token string">'b'</span><span class="token punctuation">]</span><span class="token punctuation">.</span><span class="token function">values</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span>elem<span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token punctuation">}</span><span class="token comment" spellcheck="true">// 'a'</span><span class="token comment" spellcheck="true">// 'b'</span><span class="token keyword">for</span> <span class="token punctuation">(</span><span class="token keyword">let</span> <span class="token punctuation">[</span>index<span class="token punctuation">,</span> elem<span class="token punctuation">]</span> <span class="token keyword">of</span> <span class="token punctuation">[</span><span class="token string">'a'</span><span class="token punctuation">,</span> <span class="token string">'b'</span><span class="token punctuation">]</span><span class="token punctuation">.</span><span class="token function">entries</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span>index<span class="token punctuation">,</span> elem<span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token punctuation">}</span><span class="token comment" spellcheck="true">// 0 "a"</span><span class="token comment" spellcheck="true">// 1 "b"</span></code></pre><blockquote><p>如果不使用for…of循环，可以手动调用遍历器对象的next方法，进行遍历</p><pre class=" language-javascript"><code class="language-javascript"><span class="token keyword">let</span> letter <span class="token operator">=</span> <span class="token punctuation">[</span><span class="token string">'a'</span><span class="token punctuation">,</span> <span class="token string">'b'</span><span class="token punctuation">,</span> <span class="token string">'c'</span><span class="token punctuation">]</span><span class="token punctuation">;</span><span class="token keyword">let</span> entries <span class="token operator">=</span> letter<span class="token punctuation">.</span><span class="token function">entries</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span>entries<span class="token punctuation">.</span><span class="token function">next</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span>value<span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment" spellcheck="true">// [0, 'a']</span>console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span>entries<span class="token punctuation">.</span><span class="token function">next</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span>value<span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment" spellcheck="true">// [1, 'b']</span>console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span>entries<span class="token punctuation">.</span><span class="token function">next</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span>value<span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment" spellcheck="true">// [2, 'c']</span></code></pre></blockquote><h3 id="对象方法"><a href="#对象方法" class="headerlink" title="对象方法"></a>对象方法</h3><blockquote><ul><li>Object.is(a,b) : 将a和b进行比较，解决了NaN在===比较的时候不相等的问题<br>还有+0和-0 三个等于号比较的时候不相等的问题</li></ul></blockquote><pre class=" language-javascript"><code class="language-javascript"> console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span><span class="token number">NaN</span> <span class="token operator">===</span> <span class="token number">NaN</span><span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment" spellcheck="true">//false</span> console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span>Object<span class="token punctuation">.</span><span class="token function">is</span><span class="token punctuation">(</span><span class="token number">NaN</span><span class="token punctuation">,</span> <span class="token number">NaN</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment" spellcheck="true">//true</span> console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span>Object<span class="token punctuation">.</span><span class="token function">is</span><span class="token punctuation">(</span><span class="token operator">+</span><span class="token number">0</span><span class="token punctuation">,</span> <span class="token operator">-</span><span class="token number">0</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment" spellcheck="true">//true</span> console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span><span class="token operator">+</span><span class="token number">0</span> <span class="token operator">===</span> <span class="token operator">-</span><span class="token number">0</span><span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment" spellcheck="true">//fasle</span></code></pre><blockquote><ul><li>Object.assign(target, source…)方法的第一个参数是目标对象，后面的参数都是源对象。 Object.assign()主要用来拷贝对象。</li></ul></blockquote><pre class=" language-javascript"><code class="language-javascript">  Object<span class="token punctuation">.</span><span class="token function">assign</span><span class="token punctuation">(</span><span class="token punctuation">)</span>主要用来拷贝对象。例如：  <span class="token keyword">let</span> s1 <span class="token operator">=</span> <span class="token punctuation">{</span><span class="token punctuation">}</span><span class="token punctuation">;</span>  Object<span class="token punctuation">.</span><span class="token function">defineProperty</span><span class="token punctuation">(</span>s1<span class="token punctuation">,</span> <span class="token string">'name'</span><span class="token punctuation">,</span> <span class="token punctuation">{</span>    value<span class="token punctuation">:</span> <span class="token string">'xiaoming'</span><span class="token punctuation">,</span>    configurable<span class="token punctuation">:</span> <span class="token boolean">true</span><span class="token punctuation">,</span>    enumerable<span class="token punctuation">:</span> <span class="token boolean">true</span><span class="token punctuation">,</span>    writable<span class="token punctuation">:</span> <span class="token boolean">true</span>  <span class="token punctuation">}</span><span class="token punctuation">)</span><span class="token punctuation">;</span>  Object<span class="token punctuation">.</span><span class="token function">defineProperty</span><span class="token punctuation">(</span>s1<span class="token punctuation">,</span> <span class="token string">'age'</span><span class="token punctuation">,</span> <span class="token punctuation">{</span>    value<span class="token punctuation">:</span> <span class="token number">21</span><span class="token punctuation">,</span>    configurable<span class="token punctuation">:</span> <span class="token boolean">true</span><span class="token punctuation">,</span>    enumerable<span class="token punctuation">:</span> <span class="token boolean">false</span><span class="token punctuation">,</span> <span class="token comment" spellcheck="true">//这个属性为不可枚举</span>    writable<span class="token punctuation">:</span> <span class="token boolean">true</span>  <span class="token punctuation">}</span><span class="token punctuation">)</span><span class="token punctuation">;</span>  <span class="token keyword">let</span> s2 <span class="token operator">=</span> Object<span class="token punctuation">.</span><span class="token function">assign</span><span class="token punctuation">(</span><span class="token punctuation">{</span><span class="token punctuation">}</span><span class="token punctuation">,</span>s1<span class="token punctuation">)</span><span class="token punctuation">;</span>  console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span>s2<span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment" spellcheck="true">// Object {name: "xiaoming"}</span>  这里的Object<span class="token punctuation">.</span><span class="token function">assign</span><span class="token punctuation">(</span><span class="token punctuation">)</span>拷贝的性质还是属于浅拷贝，如果你需要深拷贝的话：  <span class="token keyword">let</span> s1 <span class="token operator">=</span> <span class="token punctuation">{</span>    name<span class="token punctuation">:</span> <span class="token string">'xiaoming'</span><span class="token punctuation">,</span>    age<span class="token punctuation">:</span> <span class="token number">21</span><span class="token punctuation">,</span>    info<span class="token punctuation">:</span> <span class="token punctuation">{</span>      childhood<span class="token punctuation">:</span> <span class="token punctuation">{</span>        name<span class="token punctuation">:</span> <span class="token string">'xiao'</span>      <span class="token punctuation">}</span><span class="token punctuation">,</span>      youth<span class="token punctuation">:</span> <span class="token punctuation">{</span>        name<span class="token punctuation">:</span> <span class="token string">'xiaoming'</span>      <span class="token punctuation">}</span>    <span class="token punctuation">}</span>  <span class="token punctuation">}</span>  <span class="token keyword">let</span> s2 <span class="token operator">=</span> JSON<span class="token punctuation">.</span><span class="token function">parse</span><span class="token punctuation">(</span>JSON<span class="token punctuation">.</span><span class="token function">stringify</span><span class="token punctuation">(</span>s1<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>  console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span>s1 <span class="token operator">===</span> s2<span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment" spellcheck="true">//false</span>  console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span>s1<span class="token punctuation">.</span>info <span class="token operator">===</span> s2<span class="token punctuation">.</span>info<span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment" spellcheck="true">//false</span></code></pre><blockquote><ul><li>Object.setPrototypeOf(obj, prototype)</li><li>obj : 要设置其原型的对象</li><li>prototype : 该对象的新的原型(一个对象或者null,如果是其他值，则什么都不会做)</li></ul></blockquote><pre class=" language-javascript"><code class="language-javascript">首先要介绍一下，__proto__是一个内部属性，用来操作prototype。  直接使用prototype不是特别好，于是出了几个代替的方法：  <span class="token number">1</span>、Object<span class="token punctuation">.</span><span class="token function">setPrototypeOf</span><span class="token punctuation">(</span><span class="token punctuation">)</span> 写操作（ES6）  <span class="token number">2</span>、Object<span class="token punctuation">.</span><span class="token function">getPrototypeOf</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token function">读操作</span><span class="token punctuation">(</span>ES5<span class="token punctuation">)</span>  <span class="token number">3</span>、Object<span class="token punctuation">.</span><span class="token function">create</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token function">生成操作</span><span class="token punctuation">(</span>ES5<span class="token punctuation">)</span>  <span class="token operator">--</span><span class="token operator">--</span><span class="token operator">--</span><span class="token operator">--</span><span class="token operator">--</span><span class="token operator">--</span><span class="token operator">--</span><span class="token operator">--</span><span class="token operator">--</span><span class="token operator">--</span><span class="token operator">--</span><span class="token operator">--</span><span class="token operator">--</span><span class="token operator">-</span>    Object<span class="token punctuation">.</span>getPrototypeOf  <span class="token operator">--</span><span class="token operator">--</span><span class="token operator">--</span><span class="token operator">--</span><span class="token operator">--</span><span class="token operator">--</span><span class="token operator">--</span><span class="token operator">--</span><span class="token operator">--</span><span class="token operator">--</span><span class="token operator">--</span><span class="token operator">--</span><span class="token operator">--</span><span class="token operator">-</span>  <span class="token keyword">function</span> <span class="token function">People</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">{</span><span class="token punctuation">}</span><span class="token punctuation">;</span>  <span class="token keyword">let</span> p <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">People</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>  console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span>Object<span class="token punctuation">.</span><span class="token function">getPrototypeOf</span><span class="token punctuation">(</span>p<span class="token punctuation">)</span> <span class="token operator">===</span> People<span class="token punctuation">.</span>prototype<span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment" spellcheck="true">// true</span>  <span class="token operator">--</span><span class="token operator">--</span><span class="token operator">--</span><span class="token operator">--</span><span class="token operator">--</span><span class="token operator">--</span><span class="token operator">--</span><span class="token operator">--</span><span class="token operator">--</span><span class="token operator">--</span>    Object<span class="token punctuation">.</span><span class="token function">create</span><span class="token punctuation">(</span><span class="token punctuation">)</span>  <span class="token operator">--</span><span class="token operator">--</span><span class="token operator">--</span><span class="token operator">--</span><span class="token operator">--</span><span class="token operator">--</span><span class="token operator">--</span><span class="token operator">--</span><span class="token operator">--</span><span class="token operator">--</span>  <span class="token keyword">let</span> o <span class="token operator">=</span> <span class="token punctuation">{</span><span class="token punctuation">}</span><span class="token punctuation">;</span>  <span class="token comment" spellcheck="true">//上面的操作等价于 let o = Object.create(Object.prototype);  </span>  <span class="token operator">--</span><span class="token operator">--</span><span class="token operator">--</span><span class="token operator">--</span><span class="token operator">--</span><span class="token operator">--</span><span class="token operator">--</span><span class="token operator">--</span><span class="token operator">--</span><span class="token operator">--</span><span class="token operator">--</span><span class="token operator">--</span><span class="token operator">--</span><span class="token operator">--</span><span class="token operator">-</span>    Object<span class="token punctuation">.</span><span class="token function">setPrototypeOf</span><span class="token punctuation">(</span><span class="token punctuation">)</span>  <span class="token operator">--</span><span class="token operator">--</span><span class="token operator">--</span><span class="token operator">--</span><span class="token operator">--</span><span class="token operator">--</span><span class="token operator">--</span><span class="token operator">--</span><span class="token operator">--</span><span class="token operator">--</span><span class="token operator">--</span><span class="token operator">--</span><span class="token operator">--</span><span class="token operator">--</span><span class="token operator">-</span>  <span class="token keyword">let</span> fa <span class="token operator">=</span> <span class="token punctuation">{</span><span class="token punctuation">}</span><span class="token punctuation">;</span>  <span class="token keyword">let</span> ch <span class="token operator">=</span> <span class="token punctuation">{</span>    x<span class="token punctuation">:</span> <span class="token number">10</span>  <span class="token punctuation">}</span>  Object<span class="token punctuation">.</span><span class="token function">setPrototypeOf</span><span class="token punctuation">(</span>ch<span class="token punctuation">,</span> fa<span class="token punctuation">)</span><span class="token punctuation">;</span>  fa<span class="token punctuation">.</span>y <span class="token operator">=</span> <span class="token number">20</span><span class="token punctuation">;</span>  console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span>ch<span class="token punctuation">.</span>y<span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment" spellcheck="true">//20</span></code></pre>]]></content>
      
      
      <categories>
          
          <category> 前端 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 前端 </tag>
            
            <tag> 数组 </tag>
            
            <tag> ES6 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>vue学习总结</title>
      <link href="/2018/03/01/vue/"/>
      <url>/2018/03/01/vue/</url>
      
        <content type="html"><![CDATA[<p><strong>vue是一套用于构建用户界面的渐进式框架。</strong></p><blockquote><p>构造函数方式创建vue实例</p><pre class=" language-javascript"><code class="language-javascript"><span class="token keyword">let</span> vm <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">Vue</span><span class="token punctuation">(</span>options<span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token comment" spellcheck="true">//options是一个对象,用来配置选项</span></code></pre><p>配置选项</p><ul><li>el :  给当前实例设定一个管辖范围,不可以直接写成body或者html，因为script标签在body里面，可能会把script标签操作.</li><li>data : 当一个 Vue 实例被创建时，它向 Vue 的响应式系统中加入了其 data 对象中能找到的所有的属性。当这些属性的值发生改变时，视图将会产生“响应”，即匹配更新为新的值。</li><li>template : 模板，会用其属性值替换el管辖的结构</li><li>methods : 一般函数都放在这里</li><li>computed : 计算属性，依赖其他属性的属性</li><li>filters : 过滤，语法 : 值|过滤器(过滤器是一个函数)</li><li>生命周期钩子函数(created,mounted,updated…)</li></ul></blockquote><pre class=" language-javascript"><code class="language-javascript"> <span class="token keyword">let</span> vm <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">Vue</span><span class="token punctuation">(</span><span class="token punctuation">{</span>        el<span class="token punctuation">:</span> <span class="token string">"#app"</span><span class="token punctuation">,</span>        data<span class="token punctuation">:</span> <span class="token punctuation">{</span>            name<span class="token punctuation">:</span> <span class="token string">"贾"</span><span class="token punctuation">,</span>            age<span class="token punctuation">:</span> <span class="token number">21</span><span class="token punctuation">,</span>            sex<span class="token punctuation">:</span> <span class="token number">1</span>        <span class="token punctuation">}</span>    <span class="token punctuation">}</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token comment" spellcheck="true">//对应页面Vue数据</span><span class="token operator">&lt;</span>div id<span class="token operator">=</span><span class="token string">"app"</span><span class="token operator">></span>      <span class="token punctuation">{</span><span class="token punctuation">{</span>name<span class="token punctuation">}</span><span class="token punctuation">}</span><span class="token punctuation">{</span><span class="token punctuation">{</span>age<span class="token operator">+</span><span class="token number">1</span><span class="token punctuation">}</span><span class="token punctuation">}</span><span class="token punctuation">{</span><span class="token punctuation">{</span>sex<span class="token operator">?</span><span class="token string">"男"</span><span class="token punctuation">:</span><span class="token string">"女"</span><span class="token punctuation">}</span><span class="token punctuation">}</span> <span class="token operator">&lt;</span><span class="token operator">/</span>div<span class="token operator">></span></code></pre><blockquote><p>小胡子语法 : 支持vue数据，简单的运算符，三元运算，函数运行，正则等.</p><p>小胡子语法里面不能写多个数据，可以多个数据进行拼接或者运算，只显示第一个数据，或者多个数据运算得出的第一个数据</p><pre class=" language-javascript"><code class="language-javascript"></code></pre></blockquote>{{name}}{{age+1}}{{sex?"男":"女"}}{{fn()}}{{value.replace(/,/g,'')}}<pre><code>&gt; 引用数据类型进行数据绑定&gt; - 对象中的属性初始化了之后才会有get和set&gt; - 数组绑定完成后，后面如果需要操作数组来实现页面的改变，必须改变数组的地址，重新赋值新的数组(数组中所有直接操作原数组的方法都可以刷新页面：push / pop / unshift / shift / reverse / sort / splice)&gt; - data : 加载data中的数据可以通过vm.$data.xxx获取，也可以通过vm.xxx获取&gt; - 初始化对象中的属性vm.$set(vm.data,&quot;name&quot;,&quot;666&quot;)```javascriptlet vm = new Vue({        el: &quot;#app&quot;,        data: {ary:[1,2,3,4]}    });    //vm.push(100)如果加上push，页面会重新刷新，如果不加，下面数组操作不会起到作用    vm.ary[2] = 300;    vm.ary[1] = 0;</code></pre><h3 id="双向数据绑定"><a href="#双向数据绑定" class="headerlink" title="双向数据绑定"></a>双向数据绑定</h3><blockquote><p>是通过Object.defineProperties(data,{})或者Proxy 拦截实现的.</p></blockquote><p><strong><code>一段实现了一丢丢丢双向绑定的代码</code></strong></p><pre class=" language-javascript"><code class="language-javascript">    <span class="token keyword">let</span> app <span class="token operator">=</span> document<span class="token punctuation">.</span><span class="token function">getElementById</span><span class="token punctuation">(</span><span class="token string">"app"</span><span class="token punctuation">)</span><span class="token punctuation">,</span>        inputs <span class="token operator">=</span> app<span class="token punctuation">.</span><span class="token function">getElementsByTagName</span><span class="token punctuation">(</span><span class="token string">"input"</span><span class="token punctuation">)</span><span class="token punctuation">,</span>        nodeList <span class="token operator">=</span> <span class="token punctuation">[</span><span class="token operator">...</span>app<span class="token punctuation">.</span>children<span class="token punctuation">]</span><span class="token punctuation">.</span><span class="token function">filter</span><span class="token punctuation">(</span>item <span class="token operator">=</span><span class="token operator">></span> item<span class="token punctuation">.</span>tagName <span class="token operator">!==</span> <span class="token string">"INPUT"</span><span class="token punctuation">)</span><span class="token punctuation">,</span>        data <span class="token operator">=</span> <span class="token punctuation">{</span>name<span class="token punctuation">:</span> <span class="token string">"贾腾达"</span><span class="token punctuation">}</span><span class="token punctuation">,</span>        cloneList <span class="token operator">=</span> nodeList<span class="token punctuation">.</span><span class="token function">map</span><span class="token punctuation">(</span>item <span class="token operator">=</span><span class="token operator">></span> item<span class="token punctuation">.</span><span class="token function">cloneNode</span><span class="token punctuation">(</span><span class="token boolean">true</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span>cloneList<span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token keyword">for</span> <span class="token punctuation">(</span><span class="token keyword">let</span> val <span class="token keyword">of</span> inputs<span class="token punctuation">)</span> <span class="token punctuation">{</span>        <span class="token keyword">if</span> <span class="token punctuation">(</span>val<span class="token punctuation">.</span><span class="token function">getAttribute</span><span class="token punctuation">(</span><span class="token string">"v-model"</span><span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>            val<span class="token punctuation">.</span>value <span class="token operator">=</span> data<span class="token punctuation">[</span>val<span class="token punctuation">.</span><span class="token function">getAttribute</span><span class="token punctuation">(</span><span class="token string">"v-model"</span><span class="token punctuation">)</span><span class="token punctuation">]</span><span class="token punctuation">;</span>        <span class="token punctuation">}</span>        val<span class="token punctuation">.</span>oninput <span class="token operator">=</span> <span class="token keyword">function</span> <span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>            data<span class="token punctuation">[</span>val<span class="token punctuation">.</span><span class="token function">getAttribute</span><span class="token punctuation">(</span><span class="token string">"v-model"</span><span class="token punctuation">)</span><span class="token punctuation">]</span> <span class="token operator">=</span> <span class="token keyword">this</span><span class="token punctuation">.</span>value<span class="token punctuation">;</span>        <span class="token punctuation">}</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span>    nodeList<span class="token punctuation">.</span><span class="token function">forEach</span><span class="token punctuation">(</span><span class="token punctuation">(</span>item<span class="token punctuation">,</span> index<span class="token punctuation">)</span> <span class="token operator">=</span><span class="token operator">></span> <span class="token punctuation">{</span>        <span class="token keyword">if</span><span class="token punctuation">(</span><span class="token regex">/\{\{\w+\}\}/</span><span class="token punctuation">.</span><span class="token function">test</span><span class="token punctuation">(</span>item<span class="token punctuation">.</span>innerHTML<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">{</span>            item<span class="token punctuation">.</span>innerHTML <span class="token operator">=</span> item<span class="token punctuation">.</span>innerHTML<span class="token punctuation">.</span><span class="token function">replace</span><span class="token punctuation">(</span><span class="token regex">/\{\{(\w+)\}\}/</span><span class="token punctuation">,</span> <span class="token punctuation">(</span><span class="token operator">...</span>arg<span class="token punctuation">)</span> <span class="token operator">=</span><span class="token operator">></span> data<span class="token punctuation">[</span>arg<span class="token punctuation">[</span><span class="token number">1</span><span class="token punctuation">]</span><span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token punctuation">}</span>    <span class="token punctuation">}</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    Object<span class="token punctuation">.</span><span class="token function">defineProperties</span><span class="token punctuation">(</span>data<span class="token punctuation">,</span> <span class="token punctuation">{</span>        name<span class="token punctuation">:</span><span class="token punctuation">{</span>            <span class="token keyword">set</span><span class="token punctuation">(</span>val<span class="token punctuation">)</span><span class="token punctuation">{</span>                <span class="token keyword">for</span><span class="token punctuation">(</span><span class="token keyword">let</span> item <span class="token keyword">of</span> inputs<span class="token punctuation">)</span><span class="token punctuation">{</span>                    <span class="token keyword">if</span> <span class="token punctuation">(</span>item<span class="token punctuation">.</span><span class="token function">getAttribute</span><span class="token punctuation">(</span><span class="token string">"v-model"</span><span class="token punctuation">)</span> <span class="token operator">===</span> <span class="token string">"name"</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>                        item<span class="token punctuation">.</span>val <span class="token operator">=</span> val<span class="token punctuation">;</span>                    <span class="token punctuation">}</span>                <span class="token punctuation">}</span>                cloneList<span class="token punctuation">.</span><span class="token function">forEach</span><span class="token punctuation">(</span><span class="token punctuation">(</span>item<span class="token punctuation">,</span> index<span class="token punctuation">)</span> <span class="token operator">=</span><span class="token operator">></span> <span class="token punctuation">{</span>                    nodeList<span class="token punctuation">[</span>index<span class="token punctuation">]</span><span class="token punctuation">.</span>innerHTML <span class="token operator">=</span> item<span class="token punctuation">.</span>innerHTML<span class="token punctuation">.</span><span class="token function">replace</span><span class="token punctuation">(</span><span class="token regex">/\{\{name\}\}/g</span><span class="token punctuation">,</span> <span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">=</span><span class="token operator">></span> val<span class="token punctuation">)</span><span class="token punctuation">;</span>                <span class="token punctuation">}</span><span class="token punctuation">)</span><span class="token punctuation">;</span>            <span class="token punctuation">}</span>        <span class="token punctuation">}</span>    <span class="token punctuation">}</span><span class="token punctuation">)</span><span class="token punctuation">;</span></code></pre><h3 id="事件绑定"><a href="#事件绑定" class="headerlink" title="事件绑定"></a>事件绑定</h3><pre class=" language-javascript"><code class="language-javascript"><span class="token operator">&lt;</span>div onclick<span class="token operator">=</span><span class="token string">"fn(event)"</span><span class="token operator">></span><span class="token number">1111111</span><span class="token operator">&lt;</span><span class="token operator">/</span>div<span class="token operator">></span><span class="token operator">&lt;</span><span class="token operator">!</span><span class="token operator">--</span>不使用Vue<span class="token punctuation">,</span>event 实参事件对象 window<span class="token punctuation">.</span>event<span class="token operator">--</span><span class="token operator">></span><span class="token operator">&lt;</span>div id<span class="token operator">=</span><span class="token string">"app"</span><span class="token operator">></span>    <span class="token operator">&lt;</span><span class="token operator">!</span><span class="token operator">--</span>绑定事件@事件类型<span class="token operator">=</span><span class="token string">"xxx"</span><span class="token operator">--</span><span class="token operator">></span>     <span class="token operator">&lt;</span>div @click<span class="token operator">=</span><span class="token string">"fn1"</span><span class="token operator">></span><span class="token number">222</span><span class="token operator">&lt;</span><span class="token operator">/</span>div<span class="token operator">></span>      <span class="token operator">&lt;</span><span class="token operator">!</span><span class="token operator">--</span>fn不写括号默认执行的时候就会传一个事件对象<span class="token operator">--</span><span class="token operator">></span>    <span class="token operator">&lt;</span>div @click<span class="token operator">=</span><span class="token string">"fn2($event,'aa')"</span><span class="token operator">></span><span class="token number">222</span><span class="token operator">&lt;</span><span class="token operator">/</span>div<span class="token operator">></span>    <span class="token operator">&lt;</span><span class="token operator">!</span><span class="token operator">--</span>如果用到其他参数，还想用事件对象的话必须手动传$event<span class="token operator">--</span><span class="token operator">></span>    <span class="token operator">&lt;</span>div @click<span class="token operator">=</span><span class="token string">"fn3('a')"</span><span class="token operator">></span><span class="token number">222</span>        <span class="token operator">&lt;</span>i @click<span class="token punctuation">.</span>stop<span class="token operator">=</span><span class="token string">"fn"</span><span class="token operator">></span>iiiiiii<span class="token operator">&lt;</span><span class="token operator">/</span>i<span class="token operator">></span>    <span class="token operator">&lt;</span><span class="token operator">/</span>div<span class="token operator">></span>    <span class="token operator">&lt;</span>input type<span class="token operator">=</span><span class="token string">"text"</span> @keyup<span class="token punctuation">.</span>enter<span class="token operator">=</span><span class="token string">"get"</span><span class="token operator">></span>    <span class="token operator">&lt;</span><span class="token operator">!</span><span class="token operator">--</span>    <span class="token punctuation">.</span>stop<span class="token punctuation">:</span>阻止时间冒泡    <span class="token punctuation">.</span>prevent<span class="token punctuation">:</span>阻止默认行为    <span class="token punctuation">.</span>capture<span class="token punctuation">:</span>捕获阶段发生    <span class="token punctuation">.</span>self<span class="token punctuation">:</span>自己作为事件源的时候才会发生    <span class="token punctuation">.</span>once<span class="token punctuation">:</span>只执行一次    <span class="token punctuation">.</span>passive<span class="token punctuation">:</span>在移动端的滚动事件会用到，会提高性能，不阻止默认行为 <span class="token punctuation">.</span>enter<span class="token regex">/.tab/</span><span class="token punctuation">.</span><span class="token keyword">delete</span> <span class="token punctuation">(</span>捕获“删除”和“退格”键<span class="token punctuation">)</span> <span class="token punctuation">.</span>esc<span class="token regex">/.up/</span><span class="token punctuation">.</span>space<span class="token operator">...</span><span class="token punctuation">.</span><span class="token operator">&lt;</span><span class="token operator">/</span>div<span class="token operator">></span><span class="token operator">--</span><span class="token operator">--</span><span class="token operator">--</span><span class="token operator">--</span>  <span class="token keyword">let</span> vm <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">Vue</span><span class="token punctuation">(</span><span class="token punctuation">{</span>        el<span class="token punctuation">:</span> <span class="token string">"#app"</span><span class="token punctuation">,</span>        data<span class="token punctuation">:</span> <span class="token punctuation">{</span><span class="token punctuation">}</span><span class="token punctuation">,</span>        methods<span class="token punctuation">:</span> <span class="token punctuation">{</span>            <span class="token comment" spellcheck="true">//函数放在这里面</span>            <span class="token function">fn1</span><span class="token punctuation">(</span>e<span class="token punctuation">)</span> <span class="token punctuation">{</span>console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span>e<span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token punctuation">}</span><span class="token punctuation">,</span><span class="token comment" spellcheck="true">//MouseEvent</span>            <span class="token function">fn2</span><span class="token punctuation">(</span>e<span class="token punctuation">,</span>a<span class="token punctuation">)</span> <span class="token punctuation">{</span>console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span>e<span class="token punctuation">,</span>a<span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token punctuation">}</span><span class="token punctuation">,</span><span class="token comment" spellcheck="true">//MouseEvent,'aa'</span>            <span class="token function">fn1</span><span class="token punctuation">(</span>e<span class="token punctuation">)</span> <span class="token punctuation">{</span>console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span>e<span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token punctuation">}</span><span class="token punctuation">,</span><span class="token comment" spellcheck="true">//'a'</span>            <span class="token keyword">get</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>                <span class="token comment" spellcheck="true">//this表示当前实例</span>                console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span><span class="token keyword">this</span><span class="token punctuation">)</span><span class="token punctuation">;</span>            <span class="token punctuation">}</span>        <span class="token punctuation">}</span>    <span class="token punctuation">}</span><span class="token punctuation">)</span></code></pre><h3 id="指令"><a href="#指令" class="headerlink" title="指令"></a>指令</h3><blockquote><p>v-text=”text” : 所有数据只看做文本<br>v-html=”text” : 识别标签<br>v-model=”text” : 双向数据绑定(一般都是表单元素会有双向数据绑定)</p><pre class=" language-javascript"><code class="language-javascript">checkBox 中只要有了v<span class="token operator">-</span>model，checked就不起作用了<span class="token punctuation">,</span>实现多选 <span class="token punctuation">:</span> 每一个checkBox的v<span class="token operator">-</span>model都是同一个数据，而且是一个数组，只要选中checkBox，就会将其value值加在数组中，如果没有value值就是<span class="token keyword">null</span><span class="token punctuation">;</span></code></pre></blockquote><p>radio单选按钮，v-model绑定相同的数据，这个数据存放的是被选中的value值<br> <input type="radio" value="男" v-model="sex">男<br> <input type="radio" value="女" v-model="sex">女</p><p>select实现单选  v-model是一个值，存放的是选中的option的value值，没有value值就是option的内容<br> select实现多选，给select加一个属性multiple，v-model绑定数据就变成了一个数组，数组中存放的是所有option的value值，没有value值就是option的内容<br>  <select v-model="sel" multiple><br>        <option value="1">小米</option><br>        <option disabled>大米</option><br>  </select></p><pre><code>&gt; v-once : 初始的时候渲染一次，以后数据改变也不会再次渲染```javascript    &lt;p v-text=&quot;text&quot;&gt;&lt;/p&gt;//&lt;p&gt;哈哈哈哈哈&lt;/p&gt;    &lt;p v-html=&quot;text&quot;&gt;&lt;/p&gt;//哈哈哈哈哈    &lt;input type=&quot;text&quot; v-model=&quot;text&quot;&gt;//输入框里面内容：&lt;p&gt;哈哈哈哈哈&lt;/p&gt;    &lt;p v-once&gt;{{text}}&lt;/p&gt;//&lt;p&gt;哈哈哈哈哈&lt;/p&gt;//再次改变text数据的值，前三个内容都会跟着改变，而v-once以后再也不会改变//js  let vm = new Vue({        el:&quot;#app&quot;,        data:{text:&quot;&lt;p&gt;哈哈哈哈哈&lt;/p&gt;&quot;}    })</code></pre><blockquote><p>v-for : 加到想要循环的元素上</p><pre class=" language-javascript"><code class="language-javascript"></code></pre></blockquote><p v-for="item in value">{{item}}</p>value(对象):键值对有几对循环几次，item是属性值value(数字):数字是几，循环几次，负数报错，item一次递增value(数组):数组也是对象value(null&undefinde&布尔值):不循环，不报错value(字符串):循环value.length次，item是每一次循环的字符```> v-bind : 动态绑定属性，绑定的是vue中的数据，也可以直接给属性名前面加上`:`(冒号 : 新版本快捷使用)> - 如果绑定的是class类名>   - 如果绑定的是一个对象，根据每一个属性名对应的属性值判断拿不拿这个属性名作为类名。>   - 如果绑定的是一个数组，可以用来增删类名，很方便，而且可以通过索引取出某项值>   - 如果绑定的是一个对象，让类名显示去除很方便>    > - style : 要么绑定的是一个对象，要么绑定的是一个数组，而且数组的每一项都是一个对象```javascript    <div v-bind:class="className1"></div>    //可以省略v-bind，直接加一个冒号   <div :class="className1"></div><pre><code>### 自定义指令 ```javascript// 注册一个全局自定义指令 `v-focus`Vue.directive(&#39;focus&#39;, {  // 当被绑定的元素插入到 DOM 中时……  inserted: function (el) {    // 聚焦元素    el.focus()  }})//-------------局部自定义指令directives: {  focus: {    // 指令的定义    inserted: function (el) {      el.focus()    }  }}</code></pre><blockquote><p>filters : 过滤器，语法 : 值|过滤器(过滤器是一个函数)</p><ul><li>这个过滤器是处理管道符前面的值的，将前面的值按照过滤器定义的方式过滤</li><li>过滤器会默认把|(管道符)前面的值当做第一次参数传给里面的函数</li><li>如果不需要传其他参数，可以省略括号，默认执行</li><li>如果需要传参，第二个参数开始才是我们传的参数，第一个依然是target</li><li>可以多次使用管道符，前面一个处理完了，会把结果当做参数传递给下一个管道符后面的函数<pre class=" language-javascript"><code class="language-javascript"></code></pre></li></ul></blockquote><div>{{0.0111444|toFixed(3)|toFixed(2)}}</div>filters{toFixed(target,num){}}//target:0.0111444  num:3```<blockquote><p>computed : 计算属性 </p><ul><li>在这里面写的属性不要在data里面重复写</li><li>跟data中的数据一样，可以通过vm.数据获取或者修改</li><li>如果别的属性改变会影响到这个属性，可以通过计算属性来操作</li><li>get必须有，set可以没有，一般v-model双向数据绑定的有set，其他的只有get</li><li>如果只有get，可以简写成一个函数的形式，但是它还是一个属性</li><li>依赖的属性不能出现什么差错(比如没有初始化)，那么这个计算属性也会不起作用</li><li>set里面会默认传一个参数与，就是设置的属性值</li><li>get的返回值，就是展示的数据值</li><li>第一次获取的时候，依赖属性没有改变，也会默认执行一次</li><li>不支持异步，必须有get，而且get里面必须return</li></ul><p>watch : 监听data里面的属性</p><ul><li>第一次默认不会执行，每一次执行会给其传入两个参数，新值和旧值</li><li>如果想让其第一次执行一下，可以加一个属性immediate : true;</li><li>如果监控的属性值是一个对象，那么监控的值是这个对象的地址，如果地址不变，不管里面的内容是否改变，都不会被监控到，如果想要监控对象地址指向空间的变化，需要给其加上一个属性deep : true;</li></ul></blockquote><pre class=" language-javascript"><code class="language-javascript"> computed<span class="token punctuation">:</span> <span class="token punctuation">{</span>            isAll<span class="token punctuation">:</span> <span class="token punctuation">{</span>                <span class="token keyword">get</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>                    console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span><span class="token number">1</span><span class="token punctuation">)</span><span class="token punctuation">;</span>                    <span class="token keyword">return</span> <span class="token keyword">this</span><span class="token punctuation">.</span>is<span class="token punctuation">;</span>                <span class="token punctuation">}</span><span class="token punctuation">,</span>                <span class="token keyword">set</span><span class="token punctuation">(</span>val<span class="token punctuation">)</span> <span class="token punctuation">{</span>                    <span class="token comment" spellcheck="true">//val 设置的值</span>                    <span class="token keyword">this</span><span class="token punctuation">.</span>isAll <span class="token operator">=</span> <span class="token keyword">this</span><span class="token punctuation">.</span>is<span class="token punctuation">;</span>                <span class="token punctuation">}</span>            <span class="token punctuation">}</span><span class="token punctuation">,</span>watch<span class="token punctuation">:</span><span class="token punctuation">{</span>          obj<span class="token punctuation">:</span><span class="token punctuation">{</span>                 <span class="token function">handler</span><span class="token punctuation">(</span>newVal<span class="token punctuation">,</span>oldVal<span class="token punctuation">)</span><span class="token punctuation">{</span>                 console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span>newVal<span class="token punctuation">,</span> oldVal<span class="token punctuation">)</span><span class="token punctuation">;</span>               <span class="token punctuation">}</span><span class="token punctuation">,</span>                deep<span class="token punctuation">:</span> <span class="token boolean">true</span><span class="token comment" spellcheck="true">//如果想监控对象里面值的改变，需要加上这个属性</span>        <span class="token punctuation">}</span>    <span class="token punctuation">}</span></code></pre><h3 id="Vue标签"><a href="#Vue标签" class="headerlink" title="Vue标签"></a>Vue标签</h3><ul><li>vue中提供的自定义标签，也叫组件</li></ul><blockquote><p>transition ，transition-group : 使用这两个标签包起来的内容可以加上一些自定义的动画效果</p><ul><li>一般我们结合animate.js或者其他插件使用</li><li>transition标签里面只能放一对标签，transition-group里面能放多个标签</li></ul></blockquote><pre class=" language-javascript"><code class="language-javascript">    <span class="token operator">&lt;</span>button @click<span class="token operator">=</span><span class="token string">"flag=!flag"</span><span class="token operator">></span>切换<span class="token operator">&lt;</span><span class="token operator">/</span>button<span class="token operator">></span>    <span class="token operator">&lt;</span>transition enter<span class="token operator">-</span>active<span class="token operator">-</span><span class="token keyword">class</span><span class="token operator">=</span><span class="token string">"animated bounceInLeft"</span> leave<span class="token operator">-</span>active<span class="token operator">-</span><span class="token keyword">class</span><span class="token operator">=</span><span class="token string">"animated bounceOutRight"</span><span class="token operator">></span>        <span class="token operator">&lt;</span>div v<span class="token operator">-</span>show<span class="token operator">=</span><span class="token string">"flag"</span><span class="token operator">></span><span class="token operator">&lt;</span>h1<span class="token operator">></span>I LOVE YOU<span class="token operator">&lt;</span><span class="token operator">/</span>h1<span class="token operator">></span><span class="token operator">&lt;</span><span class="token operator">/</span>div<span class="token operator">></span>    <span class="token operator">&lt;</span><span class="token operator">/</span>transition<span class="token operator">></span>    <span class="token operator">&lt;</span>transition<span class="token operator">-</span>group enter<span class="token operator">-</span>active<span class="token operator">-</span><span class="token keyword">class</span><span class="token operator">=</span><span class="token string">"animated bounceInLeft"</span> leave<span class="token operator">-</span>active<span class="token operator">-</span><span class="token keyword">class</span><span class="token operator">=</span><span class="token string">"animated bounceOutRight"</span><span class="token operator">></span>        <span class="token operator">&lt;</span>div v<span class="token operator">-</span>show<span class="token operator">=</span><span class="token string">"flag"</span> <span class="token punctuation">:</span>key<span class="token operator">=</span><span class="token string">"3"</span><span class="token operator">></span><span class="token operator">&lt;</span>h1<span class="token operator">></span>I LOVE YOU<span class="token operator">&lt;</span><span class="token operator">/</span>h1<span class="token operator">></span><span class="token operator">&lt;</span><span class="token operator">/</span>div<span class="token operator">></span>        <span class="token operator">&lt;</span>div v<span class="token operator">-</span>show<span class="token operator">=</span><span class="token string">"flag"</span> <span class="token punctuation">:</span>key<span class="token operator">=</span><span class="token string">"4"</span><span class="token operator">></span><span class="token operator">&lt;</span>h1<span class="token operator">></span>I LOVE YOU<span class="token operator">&lt;</span><span class="token operator">/</span>h1<span class="token operator">></span><span class="token operator">&lt;</span><span class="token operator">/</span>div<span class="token operator">></span>        <span class="token operator">&lt;</span>div v<span class="token operator">-</span>show<span class="token operator">=</span><span class="token string">"flag"</span> <span class="token punctuation">:</span>key<span class="token operator">=</span><span class="token string">"5"</span><span class="token operator">></span><span class="token operator">&lt;</span>h1<span class="token operator">></span>I LOVE YOU<span class="token operator">&lt;</span><span class="token operator">/</span>h1<span class="token operator">></span><span class="token operator">&lt;</span><span class="token operator">/</span>div<span class="token operator">></span>    <span class="token operator">&lt;</span><span class="token operator">/</span>transition<span class="token operator">-</span>group<span class="token operator">></span></code></pre><h3 id="生命周期"><a href="#生命周期" class="headerlink" title="生命周期"></a>生命周期</h3><blockquote><p>beforeCreate : 数据初始化之前，在这里获取不到data的值<br>created : 数据初始化完成，可以操作和获取data中的数据，一般数据请求在这里实现(常用)</p><p>beforeMound : 挂载之前<br>mounted : 挂载完成(常用，获取渲染后真实的DOM)</p><p>beforeUpdate : 数据更新之前<br>updated : 更新完成(这两个函数一般会用watch代替)</p><p>beforeDestroy : 销毁之前<br>destoryed : 销毁完成<br>vm.$destroy() : 手动销毁，不会销毁之前的内容，渲染好页面也保留下来了，但是后面实例就不再起作用了，</p></blockquote><h3 id="根据官方流程图总结"><a href="#根据官方流程图总结" class="headerlink" title="根据官方流程图总结"></a>根据官方流程图总结</h3><pre class=" language-javascript"><code class="language-javascript">vm<span class="token punctuation">.</span><span class="token function">$mount</span><span class="token punctuation">(</span><span class="token string">"#app"</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token comment" spellcheck="true">//跟el:"app",一样,没有el的时候才会看 $mount</span><span class="token keyword">let</span> vm <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">Vue</span><span class="token punctuation">(</span><span class="token punctuation">{</span>el<span class="token punctuation">:</span><span class="token string">"#app"</span><span class="token punctuation">,</span><span class="token comment" spellcheck="true">//先看一下有没有el,没有的话会走vm.$mount</span>template<span class="token punctuation">:</span><span class="token string">"&lt;div>&lt;/div>"</span><span class="token punctuation">,</span><span class="token comment" spellcheck="true">//如果有template，就相当于直接换掉#app,里面的内容只能有一个根元素包裹，否则会报错</span>data<span class="token punctuation">:</span><span class="token punctuation">{</span>a<span class="token punctuation">:</span><span class="token string">"a"</span><span class="token punctuation">}</span><span class="token punctuation">,</span><span class="token function">beforeCreate</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">{</span>console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span><span class="token keyword">this</span><span class="token punctuation">.</span>a<span class="token punctuation">)</span><span class="token punctuation">}</span><span class="token comment" spellcheck="true">//undefined</span><span class="token function">created</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">{</span>console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span><span class="token keyword">this</span><span class="token punctuation">.</span>a<span class="token punctuation">)</span><span class="token punctuation">}</span><span class="token comment" spellcheck="true">//"a"</span><span class="token function">beforeMound</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">{</span><span class="token punctuation">}</span><span class="token comment" spellcheck="true">//判断渲染模板正确与否</span><span class="token function">mounted</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">{</span><span class="token punctuation">}</span><span class="token comment" spellcheck="true">//挂载完成，视图渲染</span><span class="token function">beforeUpdate</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">{</span><span class="token punctuation">}</span><span class="token comment" spellcheck="true">//数据更新之前</span><span class="token function">updated</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">{</span><span class="token punctuation">}</span><span class="token comment" spellcheck="true">//数据更新完成</span><span class="token function">beforeDestroy</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">{</span><span class="token punctuation">}</span><span class="token comment" spellcheck="true">//销毁之前</span><span class="token function">destroyed</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">{</span><span class="token punctuation">}</span><span class="token comment" spellcheck="true">//销毁完成</span><span class="token punctuation">}</span><span class="token punctuation">)</span></code></pre><blockquote><p>ref : vue中提供的获取元素的方法，给想要获取的元素加一个属性ref=”xxx”。会存储到vue实例的$refs里面,$refs是一个对象,里面存储着加ref属性的元素</p><ul><li><p>表现形式:{ref后面的值:元素}({box:div})</p></li><li><p>可以通过指定的属性名(ref属性对应的属性值)获取想要的元素</p></li><li><p>如果ref值相同了，只能获取一个，后面的覆盖前面的，因为存储的是一个对象形式，属性不重名，后面属性覆盖前面的</p></li><li><p>通过循环得到的元素，加上ref，在vm.refs里面得到的值是一个数组，里面存放着循环出的所有的元素</p><blockquote><p>mounted函数解析 </p></blockquote></li><li><p>只执行一次，一般操作元素都是在这里面操作</p></li><li><p>为了保证真实性，一般都在外面包一个this.$nextTick()，参数里面传一个函数，里面包着我们写的代码，等到DOM渲染完成后执行，通过这种方法拿到更新后的数据</p><pre class=" language-javascript"><code class="language-javascript">`<span class="token operator">&lt;</span>div id<span class="token operator">=</span><span class="token string">"app"</span><span class="token operator">></span>  <span class="token operator">&lt;</span>div ref<span class="token operator">=</span><span class="token string">"box"</span><span class="token operator">></span><span class="token punctuation">{</span><span class="token punctuation">{</span>msg<span class="token punctuation">}</span><span class="token punctuation">}</span><span class="token operator">&lt;</span><span class="token operator">/</span>div<span class="token operator">></span> <span class="token operator">&lt;</span>div ref<span class="token operator">=</span><span class="token string">"box1"</span><span class="token operator">></span><span class="token punctuation">{</span><span class="token punctuation">{</span>msg<span class="token punctuation">}</span><span class="token punctuation">}</span><span class="token operator">&lt;</span><span class="token operator">/</span>div<span class="token operator">></span> <span class="token operator">&lt;</span>div ref<span class="token operator">=</span><span class="token string">"box2"</span><span class="token operator">></span><span class="token punctuation">{</span><span class="token punctuation">{</span>msg<span class="token punctuation">}</span><span class="token punctuation">}</span><span class="token operator">&lt;</span><span class="token operator">/</span>div<span class="token operator">></span> <span class="token operator">&lt;</span>div ref<span class="token operator">=</span><span class="token string">"box"</span><span class="token operator">></span><span class="token punctuation">{</span><span class="token punctuation">{</span>msg<span class="token punctuation">}</span><span class="token punctuation">}</span><span class="token operator">&lt;</span><span class="token operator">/</span>div<span class="token operator">></span> <span class="token operator">&lt;</span>p ref<span class="token operator">=</span><span class="token string">"p"</span> v<span class="token operator">-</span><span class="token keyword">for</span><span class="token operator">=</span><span class="token string">"item in list"</span><span class="token operator">></span><span class="token punctuation">{</span><span class="token punctuation">{</span>item<span class="token punctuation">}</span><span class="token punctuation">}</span><span class="token operator">&lt;</span><span class="token operator">/</span>p<span class="token operator">></span></code></pre></li></ul></blockquote>`//-----------------js    let vm = new Vue({        el:"#app",        data:{msg:"贾腾达",list:[1,2,3,4,5,6]},        mounted() {            //挂载完成了，如果想要获取渲染后好的DOM元素在这里获取             // console.log(this.$refs);            //可以通过指定的属性名(ref属性对应的属性值)获取想要的元素            this.list = [1, 2, 3];            //渲染DOM是异步的，这里仍然是渲染之前的            this.$nextTick(() => {                //等到DOM渲染完成后执行，通过这种方法拿到更新后的数据                console.log(this.$refs.p.length);//3            });            console.log(this.$refs.p.length);//6        },        updated(){            //在这里面渲染完成        }    })```<h3 id="全局组件"><a href="#全局组件" class="headerlink" title="全局组件"></a>全局组件</h3><blockquote><ul><li>组件是独立的，独立的生命周期，独立的数据</li><li>组件中的data必须是一个函数，返回一个对象，里面存储着我们想要的data</li><li>里面的complate属性存储的是组件的所有结构，有且仅有一个根元素</li><li>做开发的时候，一般定义组件的名字使用驼峰命名法，使用组件的时候用中杠的形式(中杠后面跟一个小写字母相当于一个大写字母)</li><li>因为标签名只支持小写，如果组件名有大写字母，会自动转换为小写</li></ul></blockquote><pre class=" language-javascript"><code class="language-javascript"><span class="token operator">&lt;</span>div id<span class="token operator">=</span><span class="token string">"app"</span><span class="token operator">></span>    <span class="token operator">&lt;</span><span class="token operator">!</span><span class="token operator">--</span>标签只支持小写<span class="token operator">--</span><span class="token operator">></span>    <span class="token operator">&lt;</span>vbox<span class="token operator">></span><span class="token operator">&lt;</span><span class="token operator">/</span>vbox<span class="token operator">></span>    <span class="token operator">&lt;</span>vBox<span class="token operator">></span><span class="token operator">&lt;</span><span class="token operator">/</span>vBox<span class="token operator">></span><span class="token operator">&lt;</span><span class="token operator">!</span><span class="token operator">--</span>跟小写的一样，就算写成大写也会编译成小写的<span class="token operator">--</span><span class="token operator">></span>    <span class="token operator">&lt;</span>v<span class="token operator">-</span>box<span class="token operator">></span><span class="token operator">&lt;</span><span class="token operator">/</span>v<span class="token operator">-</span>box<span class="token operator">></span><span class="token operator">&lt;</span><span class="token operator">!</span><span class="token operator">--</span>给大写字母前面加一个中杠，即可识别成大写的<span class="token operator">--</span><span class="token operator">></span><span class="token operator">&lt;</span><span class="token operator">/</span>div<span class="token operator">></span><span class="token operator">--</span><span class="token operator">--</span><span class="token operator">--</span><span class="token operator">--</span><span class="token operator">--</span><span class="token operator">--</span><span class="token operator">--</span><span class="token operator">--</span><span class="token operator">--</span><span class="token operator">--</span><span class="token operator">--</span><span class="token operator">-</span>JS    Vue<span class="token punctuation">.</span><span class="token function">component</span><span class="token punctuation">(</span><span class="token string">"vbox"</span><span class="token punctuation">,</span> <span class="token punctuation">{</span>        template<span class="token punctuation">:</span> <span class="token string">"&lt;div>&lt;h1>{{msg}}&lt;/h1>&lt;/div>"</span><span class="token punctuation">,</span><span class="token comment" spellcheck="true">//有且只有一个根元素</span>        <span class="token function">data</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">{</span><span class="token comment" spellcheck="true">//默认执行</span>            <span class="token keyword">return</span> <span class="token punctuation">{</span>                msg<span class="token punctuation">:</span> <span class="token string">"我是一个独立的组件"</span>            <span class="token punctuation">}</span>        <span class="token punctuation">}</span><span class="token punctuation">,</span>    <span class="token punctuation">}</span><span class="token punctuation">)</span><span class="token punctuation">;</span></code></pre><h3 id="局部组件"><a href="#局部组件" class="headerlink" title="局部组件"></a>局部组件</h3><blockquote><ul><li>三部曲 : 定义组件，注册组件，使用组件</li></ul></blockquote><pre class=" language-javascript"><code class="language-javascript"> <span class="token keyword">let</span> component1 <span class="token operator">=</span> <span class="token punctuation">{</span>        template<span class="token punctuation">:</span> <span class="token string">"&lt;div>&lt;h2 @click='fn'>{{val}}&lt;/h2>&lt;/div>"</span><span class="token punctuation">,</span>        <span class="token function">data</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">{</span><span class="token keyword">return</span><span class="token punctuation">{</span>val<span class="token punctuation">:</span> <span class="token string">"我是组件component1"</span><span class="token punctuation">}</span><span class="token punctuation">}</span><span class="token punctuation">,</span>        methods<span class="token punctuation">:</span> <span class="token punctuation">{</span><span class="token function">fn</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span><span class="token keyword">this</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token comment" spellcheck="true">//this是当前组件}</span>        <span class="token punctuation">}</span><span class="token punctuation">,</span>    <span class="token punctuation">}</span><span class="token punctuation">;</span><span class="token comment" spellcheck="true">//注册组件</span>   <span class="token keyword">let</span> vm  <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">Vue</span><span class="token punctuation">(</span><span class="token punctuation">{</span>        el<span class="token punctuation">:</span><span class="token string">"#app"</span><span class="token punctuation">,</span>        data<span class="token punctuation">:</span> <span class="token punctuation">{</span><span class="token punctuation">}</span><span class="token punctuation">,</span>        components<span class="token punctuation">:</span> <span class="token punctuation">{</span>            <span class="token comment" spellcheck="true">//注册组件</span>            component1<span class="token punctuation">,</span><span class="token comment" spellcheck="true">//相当于属性值属性名都是component1</span>            component2<span class="token punctuation">:</span><span class="token punctuation">{</span>  template<span class="token punctuation">:</span> <span class="token string">"&lt;div>&lt;h2>我是组件component2&lt;/h2>&lt;/div>"</span><span class="token punctuation">}</span><span class="token comment" spellcheck="true">//如此效果一样，不过内容过长不容易看，一般向component1那样写</span>        <span class="token punctuation">}</span>    <span class="token punctuation">}</span><span class="token punctuation">)</span><span class="token comment" spellcheck="true">//使用组件</span><span class="token operator">&lt;</span>div id<span class="token operator">=</span><span class="token string">"app"</span><span class="token operator">></span>    <span class="token operator">&lt;</span><span class="token operator">!</span><span class="token operator">--</span>使用组件<span class="token operator">--</span><span class="token operator">></span>    <span class="token operator">&lt;</span>component1<span class="token operator">></span><span class="token operator">&lt;</span><span class="token operator">/</span>component1<span class="token operator">></span>    <span class="token operator">&lt;</span>component2<span class="token operator">></span><span class="token operator">&lt;</span><span class="token operator">/</span>component2<span class="token operator">></span><span class="token operator">&lt;</span><span class="token operator">/</span>div<span class="token operator">></span></code></pre><h3 id="组件嵌套使用"><a href="#组件嵌套使用" class="headerlink" title="组件嵌套使用"></a>组件嵌套使用</h3><blockquote><ul><li>组件里面也有components属性，其子组件只需要在里面注册，就可以在父组件模板中使用</li></ul></blockquote><pre class=" language-javascript"><code class="language-javascript">    <span class="token keyword">let</span> son <span class="token operator">=</span> <span class="token punctuation">{</span>        template<span class="token punctuation">:</span> <span class="token string">"&lt;div>&lt;h2>{{name}}&lt;/h2>&lt;/div>"</span><span class="token punctuation">,</span>        <span class="token function">data</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span><span class="token keyword">return</span><span class="token punctuation">{</span>name<span class="token punctuation">:</span> <span class="token string">"son"</span><span class="token punctuation">}</span><span class="token punctuation">}</span>    <span class="token punctuation">}</span><span class="token punctuation">;</span>    <span class="token keyword">let</span> parent <span class="token operator">=</span> <span class="token punctuation">{</span>        template<span class="token punctuation">:</span> <span class="token string">"#temp1"</span><span class="token punctuation">,</span>        <span class="token function">data</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">{</span><span class="token keyword">return</span> <span class="token punctuation">{</span>name<span class="token punctuation">:</span> <span class="token string">"parent"</span><span class="token punctuation">}</span><span class="token punctuation">;</span><span class="token punctuation">}</span><span class="token punctuation">,</span>        components<span class="token punctuation">:</span><span class="token punctuation">{</span>son<span class="token punctuation">}</span>    <span class="token punctuation">}</span><span class="token punctuation">;</span>    <span class="token keyword">let</span> vm <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">Vue</span><span class="token punctuation">(</span><span class="token punctuation">{</span>        el<span class="token punctuation">:</span><span class="token string">"#app"</span><span class="token punctuation">,</span>        data<span class="token punctuation">:</span> <span class="token punctuation">{</span><span class="token punctuation">}</span><span class="token punctuation">,</span>        components<span class="token punctuation">:</span> <span class="token punctuation">{</span>            parent        <span class="token punctuation">}</span>    <span class="token punctuation">}</span><span class="token punctuation">)</span><span class="token comment" spellcheck="true">//使用组件</span><span class="token operator">&lt;</span>div id<span class="token operator">=</span><span class="token string">"app"</span><span class="token operator">></span>    <span class="token operator">&lt;</span>parent<span class="token operator">></span><span class="token operator">&lt;</span><span class="token operator">/</span>parent<span class="token operator">></span><span class="token operator">&lt;</span><span class="token operator">/</span>div<span class="token operator">></span><span class="token operator">&lt;</span>template id<span class="token operator">=</span><span class="token string">"temp1"</span><span class="token operator">></span>    <span class="token operator">&lt;</span>div<span class="token operator">></span><span class="token operator">&lt;</span>h2<span class="token operator">></span><span class="token punctuation">{</span><span class="token punctuation">{</span>name<span class="token punctuation">}</span><span class="token punctuation">}</span><span class="token operator">&lt;</span><span class="token operator">/</span>h2<span class="token operator">></span><span class="token operator">&lt;</span>son<span class="token operator">></span><span class="token operator">&lt;</span><span class="token operator">/</span>son<span class="token operator">></span><span class="token operator">&lt;</span><span class="token operator">/</span>div<span class="token operator">></span><span class="token operator">&lt;</span><span class="token operator">/</span>template<span class="token operator">></span></code></pre><h3 id="组件之间的数据传递"><a href="#组件之间的数据传递" class="headerlink" title="组件之间的数据传递"></a>组件之间的数据传递</h3><blockquote><p>父组件给子组件传递数据</p><ul><li>使用props属性获取组件在使用的时候从父组件获取的数据</li><li>props里面放着所有的属性(属性名)，全部都是字符串</li><li>父传子还能进行属性校验,props属性值是一个对象.</li></ul></blockquote><pre class=" language-javascript"><code class="language-javascript"><span class="token operator">&lt;</span>div id<span class="token operator">=</span><span class="token string">"app"</span><span class="token operator">></span>    <span class="token operator">&lt;</span>parent<span class="token operator">></span><span class="token operator">&lt;</span><span class="token operator">/</span>parent<span class="token operator">></span><span class="token operator">&lt;</span><span class="token operator">/</span>div<span class="token operator">></span><span class="token operator">&lt;</span>template id<span class="token operator">=</span><span class="token string">"parent"</span><span class="token operator">></span>    <span class="token operator">&lt;</span>div<span class="token operator">></span>        <span class="token operator">&lt;</span>son <span class="token punctuation">:</span>k<span class="token operator">=</span><span class="token string">"key"</span> <span class="token punctuation">:</span>v<span class="token operator">=</span><span class="token string">"value"</span> @change<span class="token operator">=</span><span class="token string">"change"</span><span class="token operator">></span><span class="token operator">&lt;</span><span class="token operator">/</span>son<span class="token operator">></span>        <span class="token operator">&lt;</span>h1<span class="token operator">></span>I'm parent<span class="token operator">&lt;</span><span class="token operator">/</span>h1<span class="token operator">></span>        <span class="token operator">&lt;</span>button @click<span class="token operator">=</span><span class="token string">"point"</span><span class="token operator">></span>point me <span class="token operator">&lt;</span><span class="token operator">/</span>button<span class="token operator">></span>    <span class="token operator">&lt;</span><span class="token operator">/</span>div<span class="token operator">></span><span class="token operator">&lt;</span><span class="token operator">/</span>template<span class="token operator">></span><span class="token operator">&lt;</span>template id<span class="token operator">=</span><span class="token string">"son"</span><span class="token operator">></span>        <span class="token operator">&lt;</span>div<span class="token operator">></span>            <span class="token operator">&lt;</span>button @click<span class="token operator">=</span><span class="token string">"sonPoint"</span><span class="token operator">></span>Point me <span class="token operator">&lt;</span><span class="token operator">/</span>button<span class="token operator">></span>             <span class="token operator">&lt;</span>h2<span class="token operator">></span>I'm son<span class="token operator">&lt;</span><span class="token operator">/</span>h2<span class="token operator">></span>            <span class="token operator">&lt;</span><span class="token operator">/</span>div<span class="token operator">></span><span class="token operator">&lt;</span><span class="token operator">/</span>template<span class="token operator">></span>    <span class="token keyword">let</span> son <span class="token operator">=</span> <span class="token punctuation">{</span>        template<span class="token punctuation">:</span><span class="token string">"#son"</span><span class="token punctuation">,</span>        props<span class="token punctuation">:</span><span class="token punctuation">{</span>            k<span class="token punctuation">:</span><span class="token punctuation">{</span>                type<span class="token punctuation">:</span>String<span class="token punctuation">,</span><span class="token comment" spellcheck="true">//类型</span>                required<span class="token punctuation">:</span><span class="token boolean">true</span><span class="token punctuation">,</span><span class="token comment" spellcheck="true">//是否必填</span>                <span class="token keyword">default</span><span class="token punctuation">:</span><span class="token string">"666666"</span>                   <span class="token punctuation">}</span><span class="token punctuation">,</span>            v<span class="token punctuation">:</span><span class="token punctuation">{</span>                <span class="token function">validator</span><span class="token punctuation">(</span>val<span class="token punctuation">)</span><span class="token punctuation">{</span>                    <span class="token comment" spellcheck="true">//自定义校验，返回true则通过校验</span>                    <span class="token keyword">return</span> <span class="token keyword">typeof</span> val <span class="token operator">===</span><span class="token string">"string"</span><span class="token punctuation">;</span>                <span class="token punctuation">}</span>            <span class="token punctuation">}</span>        <span class="token punctuation">}</span>      <span class="token punctuation">}</span>    <span class="token keyword">let</span> parent <span class="token operator">=</span> <span class="token punctuation">{</span>        template<span class="token punctuation">:</span><span class="token string">"#parent"</span><span class="token punctuation">,</span>        components<span class="token punctuation">:</span><span class="token punctuation">{</span>son<span class="token punctuation">}</span><span class="token punctuation">,</span>        <span class="token function">data</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">{</span><span class="token keyword">return</span><span class="token punctuation">{</span>key<span class="token punctuation">:</span><span class="token string">"jia"</span><span class="token punctuation">,</span>value<span class="token punctuation">:</span><span class="token string">"tengda"</span><span class="token punctuation">}</span><span class="token punctuation">}</span><span class="token punctuation">,</span>    <span class="token punctuation">}</span>    <span class="token keyword">let</span> vm <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">Vue</span><span class="token punctuation">(</span><span class="token punctuation">{</span>        el<span class="token punctuation">:</span><span class="token string">"#app"</span><span class="token punctuation">,</span>        data<span class="token punctuation">:</span><span class="token punctuation">{</span><span class="token punctuation">}</span><span class="token punctuation">,</span>        components<span class="token punctuation">:</span><span class="token punctuation">{</span>            parent        <span class="token punctuation">}</span>    <span class="token punctuation">}</span><span class="token punctuation">)</span></code></pre><h3 id="子组件传递给父组件"><a href="#子组件传递给父组件" class="headerlink" title="子组件传递给父组件"></a>子组件传递给父组件</h3><blockquote><ul><li>利用$emit(“订阅的事件”,给订阅的事件传参数)</li></ul></blockquote><pre class=" language-javascript"><code class="language-javascript"><span class="token operator">&lt;</span>div id<span class="token operator">=</span><span class="token string">"app"</span><span class="token operator">></span>    <span class="token operator">&lt;</span>h1<span class="token operator">></span><span class="token punctuation">{</span><span class="token punctuation">{</span>money<span class="token punctuation">}</span><span class="token punctuation">}</span><span class="token operator">&lt;</span><span class="token operator">/</span>h1<span class="token operator">></span>    <span class="token operator">&lt;</span>child <span class="token punctuation">:</span>m<span class="token operator">=</span><span class="token string">"money"</span> @change<span class="token operator">-</span>money<span class="token operator">=</span><span class="token string">"change"</span><span class="token operator">></span><span class="token operator">&lt;</span><span class="token operator">/</span>child<span class="token operator">></span>    <span class="token operator">&lt;</span><span class="token operator">!</span><span class="token operator">--</span>订阅了一个自定义事件 change<span class="token operator">-</span>money 由child控制的<span class="token operator">--</span><span class="token operator">></span><span class="token operator">&lt;</span><span class="token operator">/</span>div<span class="token operator">></span><span class="token operator">&lt;</span>template id<span class="token operator">=</span><span class="token string">"child"</span><span class="token operator">></span>    <span class="token operator">&lt;</span>div<span class="token operator">></span>        <span class="token operator">&lt;</span>h2<span class="token operator">></span><span class="token punctuation">{</span><span class="token punctuation">{</span>m<span class="token punctuation">}</span><span class="token punctuation">}</span><span class="token operator">&lt;</span><span class="token operator">/</span>h2<span class="token operator">></span>        <span class="token operator">&lt;</span>button @click<span class="token operator">=</span><span class="token string">"getMore"</span><span class="token operator">></span>more money<span class="token operator">&lt;</span><span class="token operator">/</span>button<span class="token operator">></span>    <span class="token operator">&lt;</span><span class="token operator">/</span>div<span class="token operator">></span> <span class="token operator">&lt;</span><span class="token operator">/</span>template<span class="token operator">></span></code></pre><blockquote><ul><li>此处给child绑定属性，:m属于child的属性，money是父组件app中的数据，@change-money(不能用驼峰命名，大写字母前面可以加中杠),是子组件的自定义事件，change是父组件的方法</li><li>$emit相当于发布订阅中的发布，通知订阅的事情执行，第一个参数是订阅的方法，第二个参数是给方法传参数<pre class=" language-javascript"><code class="language-javascript"> <span class="token keyword">let</span> child <span class="token operator">=</span> <span class="token punctuation">{</span>     template<span class="token punctuation">:</span> <span class="token string">"#child"</span><span class="token punctuation">,</span>     props<span class="token punctuation">:</span> <span class="token punctuation">[</span><span class="token string">"m"</span><span class="token punctuation">]</span><span class="token punctuation">,</span>     methods<span class="token punctuation">:</span> <span class="token punctuation">{</span>         <span class="token function">getMore</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>             <span class="token comment" spellcheck="true">//发布之前订阅的事件</span>             <span class="token comment" spellcheck="true">//第二个参数就是给之前订阅的事件传参数用的</span>             <span class="token keyword">this</span><span class="token punctuation">.</span><span class="token function">$emit</span><span class="token punctuation">(</span><span class="token string">"change-money"</span><span class="token punctuation">,</span> <span class="token number">100</span><span class="token punctuation">)</span><span class="token punctuation">;</span>         <span class="token punctuation">}</span>     <span class="token punctuation">}</span> <span class="token punctuation">}</span><span class="token punctuation">;</span> <span class="token keyword">let</span> vm <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">Vue</span><span class="token punctuation">(</span><span class="token punctuation">{</span>     el<span class="token punctuation">:</span> <span class="token string">"#app"</span><span class="token punctuation">,</span>     data<span class="token punctuation">:</span> <span class="token punctuation">{</span>         money<span class="token punctuation">:</span> <span class="token number">10000</span>     <span class="token punctuation">}</span><span class="token punctuation">,</span>     components<span class="token punctuation">:</span> <span class="token punctuation">{</span>child<span class="token punctuation">}</span><span class="token punctuation">,</span>     methods<span class="token punctuation">:</span> <span class="token punctuation">{</span>         <span class="token function">change</span><span class="token punctuation">(</span>money<span class="token punctuation">)</span> <span class="token punctuation">{</span>             <span class="token comment" spellcheck="true">//自己修改自己data，让子组件控制这个函数执行</span>             <span class="token keyword">this</span><span class="token punctuation">.</span>money <span class="token operator">=</span> money<span class="token punctuation">;</span>         <span class="token punctuation">}</span>     <span class="token punctuation">}</span> <span class="token punctuation">}</span><span class="token punctuation">)</span></code></pre></li></ul></blockquote><h3 id="父组件操作子组件"><a href="#父组件操作子组件" class="headerlink" title="父组件操作子组件"></a>父组件操作子组件</h3><pre class=" language-javascript"><code class="language-javascript"><span class="token operator">&lt;</span>div id<span class="token operator">=</span><span class="token string">"app"</span><span class="token operator">></span>    <span class="token operator">&lt;</span>button @click<span class="token operator">=</span><span class="token string">"hide"</span><span class="token operator">></span>point me<span class="token operator">&lt;</span><span class="token operator">/</span>button<span class="token operator">></span>    <span class="token operator">&lt;</span><span class="token operator">!</span><span class="token operator">--</span>给组件加一个ref属性<span class="token operator">--</span><span class="token operator">></span>    <span class="token operator">&lt;</span>child1 ref<span class="token operator">=</span><span class="token string">"child1"</span><span class="token operator">></span><span class="token operator">&lt;</span><span class="token operator">/</span>child1<span class="token operator">></span><span class="token operator">&lt;</span><span class="token operator">/</span>div<span class="token operator">></span><span class="token operator">--</span><span class="token operator">--</span><span class="token operator">--</span><span class="token operator">--</span><span class="token operator">--</span><span class="token operator">-</span>console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span><span class="token keyword">this</span><span class="token punctuation">.</span>$refs<span class="token punctuation">.</span>child1<span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token comment" spellcheck="true">//child1组件,通过父组件的$refs获取里面的子组件</span></code></pre><h3 id="组件的生命周期"><a href="#组件的生命周期" class="headerlink" title="组件的生命周期"></a>组件的生命周期</h3><blockquote><ul><li>组件的数据修改只会触发自己的beforeUpdate,updated，不会触发父组件的生命周期</li><li>在父组件的mounted中加一个this.$nextTick()，将获取自己活着是子组件的元素放在里面，保证拿到的是最新渲染后的</li></ul><p>执行顺序<br>vm.created&gt;vm.beforeMount&gt;child.created&gt;child.beforeMount&gt;<br>child.amounted&gt;vm.mounted(如果child组件的数据修改)&gt;child.beforeUpdate&gt;child.updated&gt;vm.$nextTick()(页面修改)</p><pre class=" language-javascript"><code class="language-javascript"></code></pre></blockquote><div id="app">    <h2>{{msg}}</h2>    <child ref="child"></child></div><template id="t1">    <div>        <h1 ref="h1" :key="h1">{{msg}}</h1>    </div></template>//-----------js   let child = {        template: "#t1",        data() {return {msg: "贾腾达"}},        created() {debugger;},//3        beforeMount() {debugger;},//4        mounted() { this.msg = "666";debugger;},//5        beforeUpdate() {debugger;},//7        updated() {debugger;}//8    };    //组件的数据修改只会触发自己的beforeUpdate和updated，不会触发父组件的声明周期    //修改子组件数据的时候    let vm = new Vue({        el: "#app",        data: {msg: "学习VUE"},        components: {            child        },        created() {debugger;},//1        beforeMount() {debugger;},//2        mounted() {            //在父组件的mounted中加一个this.$nextTick()，将获取自己活着是子组件的元素放在里面，保证拿到的是最新渲染后的            this.$nextTick(() => {                console.log(this.$refs.child.$refs.h1.innerHTML);            });            debugger;//6        },        beforeUpdate() {debugger;},//未触发        updated() {debugger;},//未触发    });```<h3 id="component标签"><a href="#component标签" class="headerlink" title="component标签"></a>component标签</h3><blockquote><ul><li>component标签里面只能放一个组件，组件之间切换的时候会销毁之前的组件，重建新的组件，这样很浪费性能</li><li>keep-alive标签里面包住component标签，这样组件不会销毁，只是缓存一下(类似缓存，不是缓存)</li><li>is是写在component标签里面的属性，is后面的属性名是哪个组件名，就显示哪个组件</li><li>component标签大小写都可以，浏览器最后都会解释成小写，因为标签名都是小写的<pre class=" language-javascript"><code class="language-javascript">  <span class="token operator">&lt;</span><span class="token operator">!</span><span class="token operator">--</span>Component is<span class="token operator">=</span><span class="token string">"这里是什么组件就显示什么组件"</span><span class="token operator">--</span><span class="token operator">></span>  <span class="token operator">&lt;</span><span class="token operator">!</span><span class="token operator">--</span>Component 首字母大小写都可以<span class="token operator">--</span><span class="token operator">></span>  <span class="token operator">&lt;</span>input type<span class="token operator">=</span><span class="token string">"radio"</span> v<span class="token operator">-</span>model<span class="token operator">=</span><span class="token string">"sel"</span> value<span class="token operator">=</span><span class="token string">"com1"</span><span class="token operator">></span>com1  <span class="token operator">&lt;</span>input type<span class="token operator">=</span><span class="token string">"radio"</span> v<span class="token operator">-</span>model<span class="token operator">=</span><span class="token string">"sel"</span> value<span class="token operator">=</span><span class="token string">"com2"</span><span class="token operator">></span>com2  <span class="token operator">&lt;</span><span class="token operator">!</span><span class="token operator">--</span><span class="token operator">&lt;</span>Component is<span class="token operator">=</span><span class="token string">"com1"</span><span class="token operator">></span><span class="token operator">&lt;</span><span class="token operator">/</span>Component<span class="token operator">></span><span class="token operator">--</span><span class="token operator">></span>  <span class="token operator">&lt;</span><span class="token operator">!</span><span class="token operator">--</span>Component 里面只能放一个组件，组件之间切换的时候就会销毁之前的组件，重建新的组件，这样会浪费性能<span class="token operator">--</span><span class="token operator">></span>  <span class="token operator">&lt;</span><span class="token operator">!</span><span class="token operator">--</span>涉及到组件切换的时候，用keep<span class="token operator">-</span>alive，这样组件不会销毁，只是缓存一下<span class="token operator">--</span><span class="token operator">></span>  <span class="token operator">&lt;</span>keep<span class="token operator">-</span>alive<span class="token operator">></span>      <span class="token operator">&lt;</span>Component <span class="token punctuation">:</span>is<span class="token operator">=</span><span class="token string">"sel"</span><span class="token operator">></span><span class="token operator">&lt;</span><span class="token operator">/</span>Component<span class="token operator">></span>  <span class="token operator">&lt;</span><span class="token operator">/</span>keep<span class="token operator">-</span>alive<span class="token operator">></span><span class="token comment" spellcheck="true">//-----------------js</span> <span class="token keyword">let</span> com1 <span class="token operator">=</span> <span class="token punctuation">{</span>      template<span class="token punctuation">:</span> <span class="token string">"&lt;div>我是com1&lt;/div>"</span><span class="token punctuation">,</span>      <span class="token function">created</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>          <span class="token comment" spellcheck="true">// debugger;//点击com1触发</span>      <span class="token punctuation">}</span><span class="token punctuation">,</span>      <span class="token function">beforeDestroy</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>          <span class="token comment" spellcheck="true">// debugger;//点击com2触发</span>      <span class="token punctuation">}</span>  <span class="token punctuation">}</span><span class="token punctuation">;</span>  <span class="token keyword">let</span> com2 <span class="token operator">=</span> <span class="token punctuation">{</span>      template<span class="token punctuation">:</span> <span class="token string">"&lt;div>我是com2&lt;/div>"</span>  <span class="token punctuation">}</span><span class="token punctuation">;</span>  <span class="token keyword">let</span> vm <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">Vue</span><span class="token punctuation">(</span><span class="token punctuation">{</span>      el<span class="token punctuation">:</span> <span class="token string">"#app"</span><span class="token punctuation">,</span>      data<span class="token punctuation">:</span> <span class="token punctuation">{</span>sel<span class="token punctuation">:</span><span class="token string">""</span><span class="token punctuation">}</span><span class="token punctuation">,</span>      components<span class="token punctuation">:</span> <span class="token punctuation">{</span>com1<span class="token punctuation">,</span>com2 <span class="token punctuation">}</span>      <span class="token punctuation">}</span><span class="token punctuation">)</span>如果component标签外面不加keep<span class="token operator">-</span>alive标签，组件会不停的销毁重建，上面的<span class="token keyword">debugger</span>不管点击哪一个，都会有一个重建，一个销毁，如果加了以后，就不会销毁，会缓存起来</code></pre></li></ul></blockquote><h3 id="slot-插槽"><a href="#slot-插槽" class="headerlink" title="slot : 插槽"></a>slot : 插槽</h3><blockquote><ul><li>组件中的标签加一个属性slot=”<code>属性名</code>“，组件中定义的模板的slot对应有name属性，放上对应的”<code>属性名</code>“，两个属性名相同</li><li>如果模板上slot标签没有name属性，就会给其一个默认属性及属性名name=”<code>default</code>“，将组件中没有加slot属性的放到里面，但是只能有一个，写多个会给警告，虽然可以实现，但是不易维护</li><li>如果没有匹配到对应的name值，将会显示slot里面的内容，相当于写了一个默认值<pre class=" language-javascript"><code class="language-javascript"></code></pre></li></ul></blockquote><div id="app">    <box>        <span>我是标题1</span>        <span slot="wg">王干</span>        <span slot="zs">张三</span>        <span slot="ls">李四</span>        <span slot="fw">冯五</span>        <span slot="ll">刘六</span>    </box></div><!--组件中的标签加一个属性slot="属性名",组件中定义的模板的slot对应有name属性，放上对应的"属性名"--><template id="temp1">    <div>        <!--<slot></slot>-->        第一名:        <slot name="wg"></slot>        第二名:        <slot name="zs"></slot>        第三名:        <slot name="fw"></slot>        第四名:        <slot name="ls"></slot>        <!--default:里面放的是没有slot属性的标签,可以省略default，直接写一个slot标签-->        <slot name="default"></slot>        <!--没有匹配到对应的name，显示slot里面的内容，相当于写一个默认值(默认结构)-->        <slot name="mq"><h2>孟倩</h2></slot>    </div></template>//---------------jslet box = {template: "#temp1"}; let vm = new Vue({        el: "#app",        data: {},        components: {box}    })```<h3 id="vue路由-根据不同的地址匹配不同的模块-组件"><a href="#vue路由-根据不同的地址匹配不同的模块-组件" class="headerlink" title="vue路由 : 根据不同的地址匹配不同的模块(组件)"></a>vue路由 : 根据不同的地址匹配不同的模块(组件)</h3><blockquote><ul><li>需要引入vue-router.js</li><li>路由有两种模式:1.hash模式(默认) 2.history模式<pre class=" language-javascript"><code class="language-javascript"><span class="token comment" spellcheck="true">//构造函数方式创建router</span><span class="token keyword">let</span> router <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">VueRouter</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token comment" spellcheck="true">//在Vue实例中注册router</span><span class="token keyword">let</span> vm <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">Vue</span><span class="token punctuation">(</span><span class="token punctuation">{</span>el<span class="token punctuation">:</span><span class="token string">"app"</span><span class="token punctuation">,</span>router<span class="token punctuation">}</span><span class="token punctuation">)</span><span class="token comment" spellcheck="true">//router:router简写</span><span class="token comment" spellcheck="true">//创建router实例常用参数</span><span class="token keyword">let</span> router <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">VueRouter</span><span class="token punctuation">(</span><span class="token punctuation">{</span>      mode<span class="token punctuation">:</span><span class="token string">"history"</span><span class="token punctuation">,</span><span class="token comment" spellcheck="true">//路由模式选择(两种)</span>      routes<span class="token punctuation">,</span><span class="token comment" spellcheck="true">//注入的路由配置</span>      linkActiveClass<span class="token punctuation">:</span> <span class="token string">"active"</span><span class="token comment" spellcheck="true">//给router-link标签加选中类名</span>  <span class="token punctuation">}</span><span class="token punctuation">)</span><span class="token punctuation">;</span></code></pre></li><li>只要创建了VueRouter的实例，页面的url地址就会在后面多加一个#/</li><li>一般分为三步(二三步一般都写在一起)<pre class=" language-javascript"><code class="language-javascript"><span class="token comment" spellcheck="true">//1.定义组件</span><span class="token keyword">let</span> home <span class="token operator">=</span> <span class="token punctuation">{</span>template<span class="token punctuation">:</span><span class="token string">"&lt;h1>home&lt;/h1>"</span><span class="token punctuation">}</span><span class="token punctuation">;</span><span class="token keyword">let</span> list <span class="token operator">=</span> <span class="token punctuation">{</span>template<span class="token punctuation">:</span><span class="token string">"&lt;h1>list&lt;/h1>"</span><span class="token punctuation">}</span><span class="token punctuation">;</span><span class="token comment" spellcheck="true">//2.路由映射(映射表):路径和组件之间的映射关系</span><span class="token keyword">let</span> routes <span class="token operator">=</span> <span class="token punctuation">[</span>      <span class="token punctuation">{</span>path<span class="token punctuation">:</span><span class="token string">"/home"</span><span class="token punctuation">,</span>component<span class="token punctuation">:</span>home<span class="token punctuation">}</span><span class="token punctuation">,</span>      <span class="token punctuation">{</span>path<span class="token punctuation">:</span><span class="token string">"/list"</span><span class="token punctuation">,</span>component<span class="token punctuation">:</span>list<span class="token punctuation">}</span><span class="token punctuation">,</span>  <span class="token punctuation">]</span><span class="token punctuation">;</span><span class="token comment" spellcheck="true">//3.注入路由</span><span class="token keyword">let</span> router <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">VueRouter</span><span class="token punctuation">(</span><span class="token punctuation">{</span>      routes<span class="token punctuation">,</span><span class="token comment" spellcheck="true">//routes:routes</span>  <span class="token punctuation">}</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token comment" spellcheck="true">//一般不会写三个步骤，会把后两步写在一起</span><span class="token keyword">let</span> router <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">VueRouter</span><span class="token punctuation">(</span><span class="token punctuation">{</span>      routes<span class="token punctuation">:</span> <span class="token punctuation">[</span>      <span class="token punctuation">{</span>path<span class="token punctuation">:</span><span class="token string">"/home"</span><span class="token punctuation">,</span>component<span class="token punctuation">:</span>home<span class="token punctuation">}</span><span class="token punctuation">,</span>      <span class="token punctuation">{</span>path<span class="token punctuation">:</span><span class="token string">"/list"</span><span class="token punctuation">,</span>component<span class="token punctuation">:</span>list<span class="token punctuation">}</span><span class="token punctuation">,</span>  <span class="token punctuation">]</span><span class="token punctuation">,</span>  <span class="token punctuation">}</span><span class="token punctuation">)</span><span class="token punctuation">;</span></code></pre></li><li>在页面中展示 : 用router-view展示，用router-link跳转(to属性)<pre class=" language-javascript"><code class="language-javascript"></code></pre></li></ul></blockquote><div id="app">    <!--router-link:默认将它渲染成了a标签,tag属性可以指定其渲染成什么标签-->    <!--to="hash值" tag="标签名"-->    <router-link to="/home" tag="button">home</router-link>    <router-link to="/list" tag="button">list</router-link>    <!--router-view: 路由对应的组件显示的位置-->    <router-view></router-view></div>```<blockquote><p>路由的映射问题 : 首次页面打开，默认路径是”/“，我们让其显示主页，如果用户在url上面改hash值，我们让其显示某页面(比如主页)，并且让hash值也重定向成对应页面的hash(或者地址)</p><pre class=" language-javascript"><code class="language-javascript"><span class="token comment" spellcheck="true">//组件还是上面的组件，结构也是上面的结构</span> <span class="token keyword">let</span> router <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">VueRouter</span><span class="token punctuation">(</span><span class="token punctuation">{</span>        <span class="token comment" spellcheck="true">//mode:"history",</span>        routes<span class="token punctuation">:</span> <span class="token punctuation">[</span>            <span class="token comment" spellcheck="true">//首次打开，默认路径是"/"，我们让其显示home组件</span>            <span class="token punctuation">{</span>path<span class="token punctuation">:</span> <span class="token string">"/"</span><span class="token punctuation">,</span> component<span class="token punctuation">:</span> home<span class="token punctuation">}</span><span class="token punctuation">,</span>            <span class="token punctuation">{</span>path<span class="token punctuation">:</span> <span class="token string">"/home"</span><span class="token punctuation">,</span> component<span class="token punctuation">:</span> home<span class="token punctuation">}</span><span class="token punctuation">,</span>            <span class="token punctuation">{</span>path<span class="token punctuation">:</span> <span class="token string">"/list"</span><span class="token punctuation">,</span> component<span class="token punctuation">:</span> list<span class="token punctuation">}</span><span class="token punctuation">,</span>            <span class="token comment" spellcheck="true">//从上到下依次匹配，如果上面都没有匹配到，就走最后一个，所以星号这个放在最后面</span>            <span class="token comment" spellcheck="true">// {path: "/*", component: home},//如果不想重定向，可以这样写</span>            <span class="token comment" spellcheck="true">//redirect:重定向，属性值只能放路径，不能放组件名，会把后面hash值改变成这个属性值</span>            <span class="token punctuation">{</span>path<span class="token punctuation">:</span> <span class="token string">"/*"</span><span class="token punctuation">,</span> redirect<span class="token punctuation">:</span> <span class="token string">"/home"</span><span class="token punctuation">}</span>        <span class="token punctuation">]</span><span class="token punctuation">,</span>    <span class="token punctuation">}</span><span class="token punctuation">)</span><span class="token punctuation">;</span></code></pre><p>编程式导航 : 除了使用router-link创建标签a跳转，还可以通过router的实例方法，通过编码来实现.</p><ul><li>组件都有两个属性 : 1.$router(存放方法) ; 2.$route(存放属性)</li></ul><p>方法 : go/back/forward/push/replace…(跟原生history上的方法类似)</p><ul><li>$router.push向history栈中添加一条数据，用户点击back时，回到原来的url</li><li>$router.replace(location) 跟 router.push 很像，唯一的不同就是，它不会向 history 添加新记录，而是跟它的方法名一样 —— 替换掉当前的 history 记录。</li><li>$router.go(n) 方法的参数是一个整数，在 history 记录中向前或者后退多少步<pre class=" language-javascript"><code class="language-javascript"></code></pre></li></ul></blockquote><div id="app">    <router-view></router-view></div><template id="home">    <div>        <h1>home</h1>        <button @click="goList">go list</button>    </div></template><template id="list">    <div>        <h1>list</h1>        <button @click="goHome">go home</button>        <button @click="goHome2">go home2</button>    </div></template><p>let home = {<br>        template: “#home”,<br>        methods:{<br>            goList() {<br>                this.$router.push(“/list”);<br>                // this.$router.replace(“/list”);<br>            }<br>        }<br>    };<br>    let list = {<br>        template: “#list”,<br>        methods:{<br>            goHome() {<br>                this.$router.replace(“/home”);<br>            },<br>            goHome2() {<br>                this.$router.push(“/“);<br>            }<br>        }<br>    };<br>    /*<br>     * 组件都有两个属性<br>     * $router:放的函数，go/back/forward/push/replace…<br>     * $route:放的属性<br>     */<br>    let router = new VueRouter({<br>        routes: [<br>            {path: “/“, component: home},<br>            {path: “/home”, component: home},<br>            {path: “/list”, component: list}<br>        ]<br>    });</p><pre><code>let vm = new Vue({    el: &quot;#app&quot;,    data: {},    router,    components: {}})</code></pre><pre><code>### 路由嵌套```javascript&lt;div id=&quot;app&quot;&gt;    &lt;router-link to=&quot;/home&quot;&gt;首页&lt;/router-link&gt;    &lt;router-link to=&quot;/list&quot;&gt;列表&lt;/router-link&gt;    &lt;router-view&gt;&lt;/router-view&gt;&lt;/div&gt;&lt;template id=&quot;home&quot;&gt;    &lt;h1&gt;首页&lt;/h1&gt;&lt;/template&gt;&lt;template id=&quot;list&quot;&gt;    &lt;div&gt;        &lt;router-link to=&quot;/list/list1&quot;&gt;list1&lt;/router-link&gt;        &lt;router-link to=&quot;/list/list2&quot;&gt;list2&lt;/router-link&gt;        &lt;router-view&gt;&lt;/router-view&gt;    &lt;/div&gt;&lt;/template&gt;</code></pre><pre class=" language-javascript"><code class="language-javascript">    <span class="token keyword">let</span> home <span class="token operator">=</span> <span class="token punctuation">{</span>template<span class="token punctuation">:</span> <span class="token string">"#home"</span><span class="token punctuation">,</span><span class="token punctuation">}</span><span class="token punctuation">;</span>    <span class="token keyword">let</span> list <span class="token operator">=</span> <span class="token punctuation">{</span>template<span class="token punctuation">:</span> <span class="token string">"#list"</span><span class="token punctuation">}</span><span class="token punctuation">;</span>    <span class="token keyword">let</span> list1 <span class="token operator">=</span> <span class="token punctuation">{</span>template<span class="token punctuation">:</span> <span class="token string">"&lt;h2>list1&lt;/h2>"</span><span class="token punctuation">}</span><span class="token punctuation">;</span>    <span class="token keyword">let</span> list2 <span class="token operator">=</span> <span class="token punctuation">{</span>template<span class="token punctuation">:</span> <span class="token string">"&lt;h2>list2&lt;/h2>"</span><span class="token punctuation">}</span><span class="token punctuation">;</span>    <span class="token keyword">let</span> router <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">VueRouter</span><span class="token punctuation">(</span><span class="token punctuation">{</span>        routes<span class="token punctuation">:</span> <span class="token punctuation">[</span>          <span class="token comment" spellcheck="true">/*  {path:"/",component:home},*/</span>            <span class="token punctuation">{</span>path<span class="token punctuation">:</span> <span class="token string">"/home"</span><span class="token punctuation">,</span> component<span class="token punctuation">:</span> home<span class="token punctuation">}</span><span class="token punctuation">,</span>            <span class="token punctuation">{</span>                path<span class="token punctuation">:</span> <span class="token string">"/list"</span><span class="token punctuation">,</span>                component<span class="token punctuation">:</span> list<span class="token punctuation">,</span>                <span class="token comment" spellcheck="true">//children:子路由</span>                children<span class="token punctuation">:</span> <span class="token punctuation">[</span>                    <span class="token comment" spellcheck="true">//子路由的路径不要写"/"</span>                    <span class="token punctuation">{</span>path<span class="token punctuation">:</span> <span class="token string">"list1"</span><span class="token punctuation">,</span> component<span class="token punctuation">:</span> list1<span class="token punctuation">}</span><span class="token punctuation">,</span>                    <span class="token punctuation">{</span>path<span class="token punctuation">:</span> <span class="token string">"list2"</span><span class="token punctuation">,</span> component<span class="token punctuation">:</span> list2<span class="token punctuation">}</span>                <span class="token punctuation">]</span>            <span class="token punctuation">}</span>        <span class="token punctuation">]</span>    <span class="token punctuation">}</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token keyword">let</span> vm <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">Vue</span><span class="token punctuation">(</span><span class="token punctuation">{</span>el<span class="token punctuation">:</span> <span class="token string">"#app"</span><span class="token punctuation">,</span>data<span class="token punctuation">:</span> <span class="token punctuation">{</span><span class="token punctuation">}</span><span class="token punctuation">,</span>router<span class="token punctuation">}</span><span class="token punctuation">)</span></code></pre>]]></content>
      
      
      <categories>
          
          <category> 前端 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> Vue </tag>
            
        </tags>
      
    </entry>
    
    
  
  
</search>
